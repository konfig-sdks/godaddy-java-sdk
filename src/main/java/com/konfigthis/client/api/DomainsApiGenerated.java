/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConsentRedemption;
import com.konfigthis.client.model.ConsentRenew;
import com.konfigthis.client.model.ConsentV2;
import com.konfigthis.client.model.DomainContactsCreateV2;
import com.konfigthis.client.model.DomainDetailV2;
import com.konfigthis.client.model.DomainForwarding;
import com.konfigthis.client.model.DomainForwardingCreate;
import com.konfigthis.client.model.DomainForwardingMask;
import com.konfigthis.client.model.DomainPurchaseV2;
import com.konfigthis.client.model.DomainRedeemV2;
import com.konfigthis.client.model.DomainRenewV2;
import com.konfigthis.client.model.DomainTransferAuthCode;
import com.konfigthis.client.model.DomainTransferInV2;
import com.konfigthis.client.model.JsonSchema;
import com.konfigthis.client.model.Maintenance;
import com.konfigthis.client.model.MaintenanceDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DomainsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptTransferInCall(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainTransferAuthCode;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferInAccept"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptTransferInValidateBeforeCall(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling acceptTransferIn(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling acceptTransferIn(Async)");
        }

        // verify the required parameter 'domainTransferAuthCode' is set
        if (domainTransferAuthCode == null) {
            throw new ApiException("Missing the required parameter 'domainTransferAuthCode' when calling acceptTransferIn(Async)");
        }

        return acceptTransferInCall(customerId, domain, domainTransferAuthCode, xRequestId, _callback);

    }


    private ApiResponse<Void> acceptTransferInWithHttpInfo(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = acceptTransferInValidateBeforeCall(customerId, domain, domainTransferAuthCode, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call acceptTransferInAsync(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptTransferInValidateBeforeCall(customerId, domain, domainTransferAuthCode, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AcceptTransferInRequestBuilder {
        private final String authCode;
        private final String customerId;
        private final String domain;
        private String xRequestId;

        private AcceptTransferInRequestBuilder(String authCode, String customerId, String domain) {
            this.authCode = authCode;
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return AcceptTransferInRequestBuilder
         */
        public AcceptTransferInRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for acceptTransferIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            return acceptTransferInCall(customerId, domain, domainTransferAuthCode, xRequestId, _callback);
        }

        private DomainTransferAuthCode buildBodyParams() {
            DomainTransferAuthCode domainTransferAuthCode = new DomainTransferAuthCode();
            domainTransferAuthCode.authCode(this.authCode);
            return domainTransferAuthCode;
        }

        /**
         * Execute acceptTransferIn request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            acceptTransferInWithHttpInfo(customerId, domain, domainTransferAuthCode, xRequestId);
        }

        /**
         * Execute acceptTransferIn request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            return acceptTransferInWithHttpInfo(customerId, domain, domainTransferAuthCode, xRequestId);
        }

        /**
         * Execute acceptTransferIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            return acceptTransferInAsync(customerId, domain, domainTransferAuthCode, xRequestId, _callback);
        }
    }

    /**
     * Accepts the transfer in
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to accept the transfer in for (required)
     * @param domainTransferAuthCode An Authorization code for transferring the Domain (required)
     * @return AcceptTransferInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_ACCEPT to poll status </td><td>  -  </td></tr>
     </table>
     */
    public AcceptTransferInRequestBuilder acceptTransferIn(String authCode, String customerId, String domain) throws IllegalArgumentException {
        if (authCode == null) throw new IllegalArgumentException("\"authCode\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new AcceptTransferInRequestBuilder(authCode, customerId, domain);
    }
    private okhttp3.Call acceptTransferOutCall(String customerId, String domain, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferOutAccept"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptTransferOutValidateBeforeCall(String customerId, String domain, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling acceptTransferOut(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling acceptTransferOut(Async)");
        }

        return acceptTransferOutCall(customerId, domain, xRequestId, _callback);

    }


    private ApiResponse<Void> acceptTransferOutWithHttpInfo(String customerId, String domain, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = acceptTransferOutValidateBeforeCall(customerId, domain, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call acceptTransferOutAsync(String customerId, String domain, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptTransferOutValidateBeforeCall(customerId, domain, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AcceptTransferOutRequestBuilder {
        private final String customerId;
        private final String domain;
        private String xRequestId;

        private AcceptTransferOutRequestBuilder(String customerId, String domain) {
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return AcceptTransferOutRequestBuilder
         */
        public AcceptTransferOutRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for acceptTransferOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return acceptTransferOutCall(customerId, domain, xRequestId, _callback);
        }


        /**
         * Execute acceptTransferOut request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            acceptTransferOutWithHttpInfo(customerId, domain, xRequestId);
        }

        /**
         * Execute acceptTransferOut request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return acceptTransferOutWithHttpInfo(customerId, domain, xRequestId);
        }

        /**
         * Execute acceptTransferOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_ACCEPT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return acceptTransferOutAsync(customerId, domain, xRequestId, _callback);
        }
    }

    /**
     * Accept transfer out
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to accept the transfer out for (required)
     * @return AcceptTransferOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_ACCEPT to poll status </td><td>  -  </td></tr>
     </table>
     */
    public AcceptTransferOutRequestBuilder acceptTransferOut(String customerId, String domain) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new AcceptTransferOutRequestBuilder(customerId, domain);
    }
    private okhttp3.Call cancelForwardingRequestCall(String customerId, String fqdn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/forwards/{fqdn}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "fqdn" + "}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelForwardingRequestValidateBeforeCall(String customerId, String fqdn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling cancelForwardingRequest(Async)");
        }

        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling cancelForwardingRequest(Async)");
        }

        return cancelForwardingRequestCall(customerId, fqdn, _callback);

    }


    private ApiResponse<Void> cancelForwardingRequestWithHttpInfo(String customerId, String fqdn) throws ApiException {
        okhttp3.Call localVarCall = cancelForwardingRequestValidateBeforeCall(customerId, fqdn, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelForwardingRequestAsync(String customerId, String fqdn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelForwardingRequestValidateBeforeCall(customerId, fqdn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelForwardingRequestRequestBuilder {
        private final String customerId;
        private final String fqdn;

        private CancelForwardingRequestRequestBuilder(String customerId, String fqdn) {
            this.customerId = customerId;
            this.fqdn = fqdn;
        }

        /**
         * Build call for cancelForwardingRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelForwardingRequestCall(customerId, fqdn, _callback);
        }


        /**
         * Execute cancelForwardingRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelForwardingRequestWithHttpInfo(customerId, fqdn);
        }

        /**
         * Execute cancelForwardingRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelForwardingRequestWithHttpInfo(customerId, fqdn);
        }

        /**
         * Execute cancelForwardingRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelForwardingRequestAsync(customerId, fqdn, _callback);
        }
    }

    /**
     * Submit a forwarding cancellation request for the given fqdn
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param fqdn The fully qualified domain name whose forwarding details are to be deleted. (required)
     * @return CancelForwardingRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public CancelForwardingRequestRequestBuilder cancelForwardingRequest(String customerId, String fqdn) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (fqdn == null) throw new IllegalArgumentException("\"fqdn\" is required but got null");
            

        return new CancelForwardingRequestRequestBuilder(customerId, fqdn);
    }
    private okhttp3.Call cancelTransferInCall(String customerId, String domain, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferInCancel"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTransferInValidateBeforeCall(String customerId, String domain, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling cancelTransferIn(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling cancelTransferIn(Async)");
        }

        return cancelTransferInCall(customerId, domain, xRequestId, _callback);

    }


    private ApiResponse<Void> cancelTransferInWithHttpInfo(String customerId, String domain, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = cancelTransferInValidateBeforeCall(customerId, domain, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelTransferInAsync(String customerId, String domain, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTransferInValidateBeforeCall(customerId, domain, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelTransferInRequestBuilder {
        private final String customerId;
        private final String domain;
        private String xRequestId;

        private CancelTransferInRequestBuilder(String customerId, String domain) {
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return CancelTransferInRequestBuilder
         */
        public CancelTransferInRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for cancelTransferIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_CANCEL to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelTransferInCall(customerId, domain, xRequestId, _callback);
        }


        /**
         * Execute cancelTransferIn request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_CANCEL to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelTransferInWithHttpInfo(customerId, domain, xRequestId);
        }

        /**
         * Execute cancelTransferIn request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_CANCEL to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelTransferInWithHttpInfo(customerId, domain, xRequestId);
        }

        /**
         * Execute cancelTransferIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_CANCEL to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelTransferInAsync(customerId, domain, xRequestId, _callback);
        }
    }

    /**
     * Cancels the transfer in
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to cancel the transfer in for (required)
     * @return CancelTransferInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_CANCEL to poll status </td><td>  -  </td></tr>
     </table>
     */
    public CancelTransferInRequestBuilder cancelTransferIn(String customerId, String domain) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CancelTransferInRequestBuilder(customerId, domain);
    }
    private okhttp3.Call createForwardingConfigurationCall(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainForwardingCreate;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/forwards/{fqdn}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "fqdn" + "}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createForwardingConfigurationValidateBeforeCall(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling createForwardingConfiguration(Async)");
        }

        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling createForwardingConfiguration(Async)");
        }

        // verify the required parameter 'domainForwardingCreate' is set
        if (domainForwardingCreate == null) {
            throw new ApiException("Missing the required parameter 'domainForwardingCreate' when calling createForwardingConfiguration(Async)");
        }

        return createForwardingConfigurationCall(customerId, fqdn, domainForwardingCreate, _callback);

    }


    private ApiResponse<Void> createForwardingConfigurationWithHttpInfo(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate) throws ApiException {
        okhttp3.Call localVarCall = createForwardingConfigurationValidateBeforeCall(customerId, fqdn, domainForwardingCreate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createForwardingConfigurationAsync(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createForwardingConfigurationValidateBeforeCall(customerId, fqdn, domainForwardingCreate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateForwardingConfigurationRequestBuilder {
        private final String type;
        private final String url;
        private final String customerId;
        private final String fqdn;
        private DomainForwardingMask mask;

        private CreateForwardingConfigurationRequestBuilder(String type, String url, String customerId, String fqdn) {
            this.type = type;
            this.url = url;
            this.customerId = customerId;
            this.fqdn = fqdn;
        }

        /**
         * Set mask
         * @param mask  (optional)
         * @return CreateForwardingConfigurationRequestBuilder
         */
        public CreateForwardingConfigurationRequestBuilder mask(DomainForwardingMask mask) {
            this.mask = mask;
            return this;
        }
        
        /**
         * Build call for createForwardingConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            return createForwardingConfigurationCall(customerId, fqdn, domainForwardingCreate, _callback);
        }

        private DomainForwardingCreate buildBodyParams() {
            DomainForwardingCreate domainForwardingCreate = new DomainForwardingCreate();
            domainForwardingCreate.mask(this.mask);
            if (this.type != null)
            domainForwardingCreate.type(DomainForwardingCreate.TypeEnum.fromValue(this.type));
            domainForwardingCreate.url(this.url);
            return domainForwardingCreate;
        }

        /**
         * Execute createForwardingConfiguration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            createForwardingConfigurationWithHttpInfo(customerId, fqdn, domainForwardingCreate);
        }

        /**
         * Execute createForwardingConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            return createForwardingConfigurationWithHttpInfo(customerId, fqdn, domainForwardingCreate);
        }

        /**
         * Execute createForwardingConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            return createForwardingConfigurationAsync(customerId, fqdn, domainForwardingCreate, _callback);
        }
    }

    /**
     * Create a new forwarding configuration for the given FQDN
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your own customer id. (required)
     * @param fqdn The fully qualified domain name whose forwarding details are to be modified. (required)
     * @param domainForwardingCreate Domain forwarding rule to create for the specified fqdn (required)
     * @return CreateForwardingConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public CreateForwardingConfigurationRequestBuilder createForwardingConfiguration(String type, String url, String customerId, String fqdn) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (fqdn == null) throw new IllegalArgumentException("\"fqdn\" is required but got null");
            

        return new CreateForwardingConfigurationRequestBuilder(type, url, customerId, fqdn);
    }
    private okhttp3.Call getDetailsCall(String customerId, String domain, String xRequestId, List<String> includes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includes", includes));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String customerId, String domain, String xRequestId, List<String> includes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getDetails(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDetails(Async)");
        }

        return getDetailsCall(customerId, domain, xRequestId, includes, _callback);

    }


    private ApiResponse<DomainDetailV2> getDetailsWithHttpInfo(String customerId, String domain, String xRequestId, List<String> includes) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(customerId, domain, xRequestId, includes, null);
        Type localVarReturnType = new TypeToken<DomainDetailV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String customerId, String domain, String xRequestId, List<String> includes, final ApiCallback<DomainDetailV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(customerId, domain, xRequestId, includes, _callback);
        Type localVarReturnType = new TypeToken<DomainDetailV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String customerId;
        private final String domain;
        private String xRequestId;
        private List<String> includes;

        private GetDetailsRequestBuilder(String customerId, String domain) {
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set includes
         * @param includes Optional details to be included in the response (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder includes(List<String> includes) {
            this.includes = includes;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, but actions, contacts, and/or verifications may not be included. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(customerId, domain, xRequestId, includes, _callback);
        }


        /**
         * Execute getDetails request
         * @return DomainDetailV2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, but actions, contacts, and/or verifications may not be included. </td><td>  -  </td></tr>
         </table>
         */
        public DomainDetailV2 execute() throws ApiException {
            ApiResponse<DomainDetailV2> localVarResp = getDetailsWithHttpInfo(customerId, domain, xRequestId, includes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;DomainDetailV2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, but actions, contacts, and/or verifications may not be included. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainDetailV2> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(customerId, domain, xRequestId, includes);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, but actions, contacts, and/or verifications may not be included. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainDetailV2> _callback) throws ApiException {
            return getDetailsAsync(customerId, domain, xRequestId, includes, _callback);
        }
    }

    /**
     * Retrieve details for the specified Domain
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain name whose details are to be retrieved (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 203 </td><td> Request was partially successful, but actions, contacts, and/or verifications may not be included. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String customerId, String domain) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new GetDetailsRequestBuilder(customerId, domain);
    }
    private okhttp3.Call getForwardingInfoCall(String customerId, String fqdn, Boolean includeSubs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/forwards/{fqdn}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "fqdn" + "}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSubs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSubs", includeSubs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForwardingInfoValidateBeforeCall(String customerId, String fqdn, Boolean includeSubs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getForwardingInfo(Async)");
        }

        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling getForwardingInfo(Async)");
        }

        return getForwardingInfoCall(customerId, fqdn, includeSubs, _callback);

    }


    private ApiResponse<List<DomainForwarding>> getForwardingInfoWithHttpInfo(String customerId, String fqdn, Boolean includeSubs) throws ApiException {
        okhttp3.Call localVarCall = getForwardingInfoValidateBeforeCall(customerId, fqdn, includeSubs, null);
        Type localVarReturnType = new TypeToken<List<DomainForwarding>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForwardingInfoAsync(String customerId, String fqdn, Boolean includeSubs, final ApiCallback<List<DomainForwarding>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForwardingInfoValidateBeforeCall(customerId, fqdn, includeSubs, _callback);
        Type localVarReturnType = new TypeToken<List<DomainForwarding>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetForwardingInfoRequestBuilder {
        private final String customerId;
        private final String fqdn;
        private Boolean includeSubs;

        private GetForwardingInfoRequestBuilder(String customerId, String fqdn) {
            this.customerId = customerId;
            this.fqdn = fqdn;
        }

        /**
         * Set includeSubs
         * @param includeSubs Optionally include all sub domains if the fqdn specified is a domain and not a sub domain. (optional)
         * @return GetForwardingInfoRequestBuilder
         */
        public GetForwardingInfoRequestBuilder includeSubs(Boolean includeSubs) {
            this.includeSubs = includeSubs;
            return this;
        }
        
        /**
         * Build call for getForwardingInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForwardingInfoCall(customerId, fqdn, includeSubs, _callback);
        }


        /**
         * Execute getForwardingInfo request
         * @return List&lt;DomainForwarding&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DomainForwarding> execute() throws ApiException {
            ApiResponse<List<DomainForwarding>> localVarResp = getForwardingInfoWithHttpInfo(customerId, fqdn, includeSubs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getForwardingInfo request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DomainForwarding&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DomainForwarding>> executeWithHttpInfo() throws ApiException {
            return getForwardingInfoWithHttpInfo(customerId, fqdn, includeSubs);
        }

        /**
         * Execute getForwardingInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DomainForwarding>> _callback) throws ApiException {
            return getForwardingInfoAsync(customerId, fqdn, includeSubs, _callback);
        }
    }

    /**
     * Retrieve the forwarding information for the given fqdn
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param fqdn The fully qualified domain name whose forwarding details are to be retrieved. (required)
     * @return GetForwardingInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetForwardingInfoRequestBuilder getForwardingInfo(String customerId, String fqdn) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (fqdn == null) throw new IllegalArgumentException("\"fqdn\" is required but got null");
            

        return new GetForwardingInfoRequestBuilder(customerId, fqdn);
    }
    private okhttp3.Call getRegisterSchemaCall(String customerId, String tld, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/register/schema/{tld}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "tld" + "}", localVarApiClient.escapeString(tld.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegisterSchemaValidateBeforeCall(String customerId, String tld, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getRegisterSchema(Async)");
        }

        // verify the required parameter 'tld' is set
        if (tld == null) {
            throw new ApiException("Missing the required parameter 'tld' when calling getRegisterSchema(Async)");
        }

        return getRegisterSchemaCall(customerId, tld, xRequestId, _callback);

    }


    private ApiResponse<JsonSchema> getRegisterSchemaWithHttpInfo(String customerId, String tld, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = getRegisterSchemaValidateBeforeCall(customerId, tld, xRequestId, null);
        Type localVarReturnType = new TypeToken<JsonSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRegisterSchemaAsync(String customerId, String tld, String xRequestId, final ApiCallback<JsonSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegisterSchemaValidateBeforeCall(customerId, tld, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<JsonSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRegisterSchemaRequestBuilder {
        private final String customerId;
        private final String tld;
        private String xRequestId;

        private GetRegisterSchemaRequestBuilder(String customerId, String tld) {
            this.customerId = customerId;
            this.tld = tld;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return GetRegisterSchemaRequestBuilder
         */
        public GetRegisterSchemaRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for getRegisterSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRegisterSchemaCall(customerId, tld, xRequestId, _callback);
        }


        /**
         * Execute getRegisterSchema request
         * @return JsonSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public JsonSchema execute() throws ApiException {
            ApiResponse<JsonSchema> localVarResp = getRegisterSchemaWithHttpInfo(customerId, tld, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRegisterSchema request with HTTP info returned
         * @return ApiResponse&lt;JsonSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonSchema> executeWithHttpInfo() throws ApiException {
            return getRegisterSchemaWithHttpInfo(customerId, tld, xRequestId);
        }

        /**
         * Execute getRegisterSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonSchema> _callback) throws ApiException {
            return getRegisterSchemaAsync(customerId, tld, xRequestId, _callback);
        }
    }

    /**
     * Retrieve the schema to be submitted when registering a Domain for the specified TLD
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param tld The Top-Level Domain whose schema should be retrieved (required)
     * @return GetRegisterSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetRegisterSchemaRequestBuilder getRegisterSchema(String customerId, String tld) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (tld == null) throw new IllegalArgumentException("\"tld\" is required but got null");
            

        return new GetRegisterSchemaRequestBuilder(customerId, tld);
    }
    private okhttp3.Call getUpcomingMaintenanceDetailsCall(String maintenanceId, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/domains/maintenances/{maintenanceId}"
            .replace("{" + "maintenanceId" + "}", localVarApiClient.escapeString(maintenanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpcomingMaintenanceDetailsValidateBeforeCall(String maintenanceId, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'maintenanceId' is set
        if (maintenanceId == null) {
            throw new ApiException("Missing the required parameter 'maintenanceId' when calling getUpcomingMaintenanceDetails(Async)");
        }

        return getUpcomingMaintenanceDetailsCall(maintenanceId, xRequestId, _callback);

    }


    private ApiResponse<MaintenanceDetail> getUpcomingMaintenanceDetailsWithHttpInfo(String maintenanceId, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = getUpcomingMaintenanceDetailsValidateBeforeCall(maintenanceId, xRequestId, null);
        Type localVarReturnType = new TypeToken<MaintenanceDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUpcomingMaintenanceDetailsAsync(String maintenanceId, String xRequestId, final ApiCallback<MaintenanceDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpcomingMaintenanceDetailsValidateBeforeCall(maintenanceId, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<MaintenanceDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUpcomingMaintenanceDetailsRequestBuilder {
        private final String maintenanceId;
        private String xRequestId;

        private GetUpcomingMaintenanceDetailsRequestBuilder(String maintenanceId) {
            this.maintenanceId = maintenanceId;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return GetUpcomingMaintenanceDetailsRequestBuilder
         */
        public GetUpcomingMaintenanceDetailsRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for getUpcomingMaintenanceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUpcomingMaintenanceDetailsCall(maintenanceId, xRequestId, _callback);
        }


        /**
         * Execute getUpcomingMaintenanceDetails request
         * @return MaintenanceDetail
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public MaintenanceDetail execute() throws ApiException {
            ApiResponse<MaintenanceDetail> localVarResp = getUpcomingMaintenanceDetailsWithHttpInfo(maintenanceId, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUpcomingMaintenanceDetails request with HTTP info returned
         * @return ApiResponse&lt;MaintenanceDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MaintenanceDetail> executeWithHttpInfo() throws ApiException {
            return getUpcomingMaintenanceDetailsWithHttpInfo(maintenanceId, xRequestId);
        }

        /**
         * Execute getUpcomingMaintenanceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MaintenanceDetail> _callback) throws ApiException {
            return getUpcomingMaintenanceDetailsAsync(maintenanceId, xRequestId, _callback);
        }
    }

    /**
     * Retrieve the details for an upcoming system Maintenances
     * 
     * @param maintenanceId The identifier for the system maintenance (required)
     * @return GetUpcomingMaintenanceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetUpcomingMaintenanceDetailsRequestBuilder getUpcomingMaintenanceDetails(String maintenanceId) throws IllegalArgumentException {
        if (maintenanceId == null) throw new IllegalArgumentException("\"maintenanceId\" is required but got null");
            

        return new GetUpcomingMaintenanceDetailsRequestBuilder(maintenanceId);
    }
    private okhttp3.Call getUpcomingMaintenancesListCall(String xRequestId, String status, String modifiedAtAfter, String startsAtAfter, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/domains/maintenances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (modifiedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAtAfter", modifiedAtAfter));
        }

        if (startsAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startsAtAfter", startsAtAfter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpcomingMaintenancesListValidateBeforeCall(String xRequestId, String status, String modifiedAtAfter, String startsAtAfter, Integer limit, final ApiCallback _callback) throws ApiException {
        return getUpcomingMaintenancesListCall(xRequestId, status, modifiedAtAfter, startsAtAfter, limit, _callback);

    }


    private ApiResponse<Maintenance> getUpcomingMaintenancesListWithHttpInfo(String xRequestId, String status, String modifiedAtAfter, String startsAtAfter, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUpcomingMaintenancesListValidateBeforeCall(xRequestId, status, modifiedAtAfter, startsAtAfter, limit, null);
        Type localVarReturnType = new TypeToken<Maintenance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUpcomingMaintenancesListAsync(String xRequestId, String status, String modifiedAtAfter, String startsAtAfter, Integer limit, final ApiCallback<Maintenance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpcomingMaintenancesListValidateBeforeCall(xRequestId, status, modifiedAtAfter, startsAtAfter, limit, _callback);
        Type localVarReturnType = new TypeToken<Maintenance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUpcomingMaintenancesListRequestBuilder {
        private String xRequestId;
        private String status;
        private String modifiedAtAfter;
        private String startsAtAfter;
        private Integer limit;

        private GetUpcomingMaintenancesListRequestBuilder() {
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return GetUpcomingMaintenancesListRequestBuilder
         */
        public GetUpcomingMaintenancesListRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set status
         * @param status Only include results with the selected &#x60;status&#x60; value.  Returns all results if omitted&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACTIVE&lt;/strong&gt; - The upcoming maintenance is active.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - The upcoming maintenance has been cancelled.&lt;/li&gt;&lt;/ul&gt; (optional)
         * @return GetUpcomingMaintenancesListRequestBuilder
         */
        public GetUpcomingMaintenancesListRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set modifiedAtAfter
         * @param modifiedAtAfter Only include results with &#x60;modifiedAt&#x60; after the supplied date (optional)
         * @return GetUpcomingMaintenancesListRequestBuilder
         */
        public GetUpcomingMaintenancesListRequestBuilder modifiedAtAfter(String modifiedAtAfter) {
            this.modifiedAtAfter = modifiedAtAfter;
            return this;
        }
        
        /**
         * Set startsAtAfter
         * @param startsAtAfter Only include results with &#x60;startsAt&#x60; after the supplied date (optional)
         * @return GetUpcomingMaintenancesListRequestBuilder
         */
        public GetUpcomingMaintenancesListRequestBuilder startsAtAfter(String startsAtAfter) {
            this.startsAtAfter = startsAtAfter;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of results to return (optional, default to 100)
         * @return GetUpcomingMaintenancesListRequestBuilder
         */
        public GetUpcomingMaintenancesListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getUpcomingMaintenancesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUpcomingMaintenancesListCall(xRequestId, status, modifiedAtAfter, startsAtAfter, limit, _callback);
        }


        /**
         * Execute getUpcomingMaintenancesList request
         * @return Maintenance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public Maintenance execute() throws ApiException {
            ApiResponse<Maintenance> localVarResp = getUpcomingMaintenancesListWithHttpInfo(xRequestId, status, modifiedAtAfter, startsAtAfter, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUpcomingMaintenancesList request with HTTP info returned
         * @return ApiResponse&lt;Maintenance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Maintenance> executeWithHttpInfo() throws ApiException {
            return getUpcomingMaintenancesListWithHttpInfo(xRequestId, status, modifiedAtAfter, startsAtAfter, limit);
        }

        /**
         * Execute getUpcomingMaintenancesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Maintenance> _callback) throws ApiException {
            return getUpcomingMaintenancesListAsync(xRequestId, status, modifiedAtAfter, startsAtAfter, limit, _callback);
        }
    }

    /**
     * Retrieve a list of upcoming system Maintenances
     * 
     * @return GetUpcomingMaintenancesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetUpcomingMaintenancesListRequestBuilder getUpcomingMaintenancesList() throws IllegalArgumentException {
        return new GetUpcomingMaintenancesListRequestBuilder();
    }
    private okhttp3.Call initiateTransferOutCall(String customerId, String domain, String registrar, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferOut"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (registrar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registrar", registrar));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateTransferOutValidateBeforeCall(String customerId, String domain, String registrar, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling initiateTransferOut(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling initiateTransferOut(Async)");
        }

        // verify the required parameter 'registrar' is set
        if (registrar == null) {
            throw new ApiException("Missing the required parameter 'registrar' when calling initiateTransferOut(Async)");
        }

        return initiateTransferOutCall(customerId, domain, registrar, xRequestId, _callback);

    }


    private ApiResponse<Void> initiateTransferOutWithHttpInfo(String customerId, String domain, String registrar, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = initiateTransferOutValidateBeforeCall(customerId, domain, registrar, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call initiateTransferOutAsync(String customerId, String domain, String registrar, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateTransferOutValidateBeforeCall(customerId, domain, registrar, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class InitiateTransferOutRequestBuilder {
        private final String customerId;
        private final String domain;
        private final String registrar;
        private String xRequestId;

        private InitiateTransferOutRequestBuilder(String customerId, String domain, String registrar) {
            this.customerId = customerId;
            this.domain = domain;
            this.registrar = registrar;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return InitiateTransferOutRequestBuilder
         */
        public InitiateTransferOutRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for initiateTransferOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REQUESTED to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return initiateTransferOutCall(customerId, domain, registrar, xRequestId, _callback);
        }


        /**
         * Execute initiateTransferOut request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REQUESTED to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            initiateTransferOutWithHttpInfo(customerId, domain, registrar, xRequestId);
        }

        /**
         * Execute initiateTransferOut request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REQUESTED to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return initiateTransferOutWithHttpInfo(customerId, domain, registrar, xRequestId);
        }

        /**
         * Execute initiateTransferOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REQUESTED to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return initiateTransferOutAsync(customerId, domain, registrar, xRequestId, _callback);
        }
    }

    /**
     * Initiate transfer out to another registrar for a .uk domain.
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to initiate the transfer out for (required)
     * @param registrar Registrar tag to push transfer to (required)
     * @return InitiateTransferOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REQUESTED to poll status </td><td>  -  </td></tr>
     </table>
     */
    public InitiateTransferOutRequestBuilder initiateTransferOut(String customerId, String domain, String registrar) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (registrar == null) throw new IllegalArgumentException("\"registrar\" is required but got null");
            

        return new InitiateTransferOutRequestBuilder(customerId, domain, registrar);
    }
    private okhttp3.Call modifyForwardingInfoCall(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainForwardingCreate;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/forwards/{fqdn}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "fqdn" + "}", localVarApiClient.escapeString(fqdn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyForwardingInfoValidateBeforeCall(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling modifyForwardingInfo(Async)");
        }

        // verify the required parameter 'fqdn' is set
        if (fqdn == null) {
            throw new ApiException("Missing the required parameter 'fqdn' when calling modifyForwardingInfo(Async)");
        }

        // verify the required parameter 'domainForwardingCreate' is set
        if (domainForwardingCreate == null) {
            throw new ApiException("Missing the required parameter 'domainForwardingCreate' when calling modifyForwardingInfo(Async)");
        }

        return modifyForwardingInfoCall(customerId, fqdn, domainForwardingCreate, _callback);

    }


    private ApiResponse<Void> modifyForwardingInfoWithHttpInfo(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate) throws ApiException {
        okhttp3.Call localVarCall = modifyForwardingInfoValidateBeforeCall(customerId, fqdn, domainForwardingCreate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call modifyForwardingInfoAsync(String customerId, String fqdn, DomainForwardingCreate domainForwardingCreate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyForwardingInfoValidateBeforeCall(customerId, fqdn, domainForwardingCreate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ModifyForwardingInfoRequestBuilder {
        private final String type;
        private final String url;
        private final String customerId;
        private final String fqdn;
        private DomainForwardingMask mask;

        private ModifyForwardingInfoRequestBuilder(String type, String url, String customerId, String fqdn) {
            this.type = type;
            this.url = url;
            this.customerId = customerId;
            this.fqdn = fqdn;
        }

        /**
         * Set mask
         * @param mask  (optional)
         * @return ModifyForwardingInfoRequestBuilder
         */
        public ModifyForwardingInfoRequestBuilder mask(DomainForwardingMask mask) {
            this.mask = mask;
            return this;
        }
        
        /**
         * Build call for modifyForwardingInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            return modifyForwardingInfoCall(customerId, fqdn, domainForwardingCreate, _callback);
        }

        private DomainForwardingCreate buildBodyParams() {
            DomainForwardingCreate domainForwardingCreate = new DomainForwardingCreate();
            domainForwardingCreate.mask(this.mask);
            if (this.type != null)
            domainForwardingCreate.type(DomainForwardingCreate.TypeEnum.fromValue(this.type));
            domainForwardingCreate.url(this.url);
            return domainForwardingCreate;
        }

        /**
         * Execute modifyForwardingInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            modifyForwardingInfoWithHttpInfo(customerId, fqdn, domainForwardingCreate);
        }

        /**
         * Execute modifyForwardingInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            return modifyForwardingInfoWithHttpInfo(customerId, fqdn, domainForwardingCreate);
        }

        /**
         * Execute modifyForwardingInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainForwardingCreate domainForwardingCreate = buildBodyParams();
            return modifyForwardingInfoAsync(customerId, fqdn, domainForwardingCreate, _callback);
        }
    }

    /**
     * Modify the forwarding information for the given fqdn
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param fqdn The fully qualified domain name whose forwarding details are to be modified. (required)
     * @param domainForwardingCreate Domain forwarding rule to create or replace on the fqdn (required)
     * @return ModifyForwardingInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ModifyForwardingInfoRequestBuilder modifyForwardingInfo(String type, String url, String customerId, String fqdn) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (fqdn == null) throw new IllegalArgumentException("\"fqdn\" is required but got null");
            

        return new ModifyForwardingInfoRequestBuilder(type, url, customerId, fqdn);
    }
    private okhttp3.Call purchaseRegisterDomainCall(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainPurchaseV2;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/register"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseRegisterDomainValidateBeforeCall(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling purchaseRegisterDomain(Async)");
        }

        // verify the required parameter 'domainPurchaseV2' is set
        if (domainPurchaseV2 == null) {
            throw new ApiException("Missing the required parameter 'domainPurchaseV2' when calling purchaseRegisterDomain(Async)");
        }

        return purchaseRegisterDomainCall(customerId, domainPurchaseV2, xRequestId, _callback);

    }


    private ApiResponse<Void> purchaseRegisterDomainWithHttpInfo(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = purchaseRegisterDomainValidateBeforeCall(customerId, domainPurchaseV2, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call purchaseRegisterDomainAsync(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseRegisterDomainValidateBeforeCall(customerId, domainPurchaseV2, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PurchaseRegisterDomainRequestBuilder {
        private final ConsentV2 consent;
        private final String domain;
        private final String customerId;
        private DomainContactsCreateV2 contacts;
        private Object metadata;
        private List<String> nameServers;
        private Integer period;
        private Boolean privacy;
        private Boolean renewAuto;
        private String xRequestId;

        private PurchaseRegisterDomainRequestBuilder(ConsentV2 consent, String domain, String customerId) {
            this.consent = consent;
            this.domain = domain;
            this.customerId = customerId;
        }

        /**
         * Set contacts
         * @param contacts  (optional)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder contacts(DomainContactsCreateV2 contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata The domain eligibility data fields as specified by GET /v2/customers/{customerId}/domains/register/schema/{tld} (optional)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set nameServers
         * @param nameServers  (optional)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder nameServers(List<String> nameServers) {
            this.nameServers = nameServers;
            return this;
        }
        
        /**
         * Set period
         * @param period  (optional, default to 1)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional, default to false)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder privacy(Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto  (optional, default to true)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return PurchaseRegisterDomainRequestBuilder
         */
        public PurchaseRegisterDomainRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for purchaseRegisterDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REGISTER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            return purchaseRegisterDomainCall(customerId, domainPurchaseV2, xRequestId, _callback);
        }

        private DomainPurchaseV2 buildBodyParams() {
            DomainPurchaseV2 domainPurchaseV2 = new DomainPurchaseV2();
            domainPurchaseV2.consent(this.consent);
            domainPurchaseV2.contacts(this.contacts);
            domainPurchaseV2.domain(this.domain);
            domainPurchaseV2.metadata(this.metadata);
            domainPurchaseV2.nameServers(this.nameServers);
            domainPurchaseV2.period(this.period);
            domainPurchaseV2.privacy(this.privacy);
            domainPurchaseV2.renewAuto(this.renewAuto);
            return domainPurchaseV2;
        }

        /**
         * Execute purchaseRegisterDomain request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REGISTER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            purchaseRegisterDomainWithHttpInfo(customerId, domainPurchaseV2, xRequestId);
        }

        /**
         * Execute purchaseRegisterDomain request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REGISTER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            return purchaseRegisterDomainWithHttpInfo(customerId, domainPurchaseV2, xRequestId);
        }

        /**
         * Execute purchaseRegisterDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REGISTER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            return purchaseRegisterDomainAsync(customerId, domainPurchaseV2, xRequestId, _callback);
        }
    }

    /**
     * Purchase and register the specified Domain
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domainPurchaseV2 An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @return PurchaseRegisterDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REGISTER to poll status </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseRegisterDomainRequestBuilder purchaseRegisterDomain(ConsentV2 consent, String domain, String customerId) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new PurchaseRegisterDomainRequestBuilder(consent, domain, customerId);
    }
    private okhttp3.Call purchaseTransferProcessCall(String customerId, String domain, DomainTransferInV2 domainTransferInV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainTransferInV2;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transfer"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseTransferProcessValidateBeforeCall(String customerId, String domain, DomainTransferInV2 domainTransferInV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling purchaseTransferProcess(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling purchaseTransferProcess(Async)");
        }

        // verify the required parameter 'domainTransferInV2' is set
        if (domainTransferInV2 == null) {
            throw new ApiException("Missing the required parameter 'domainTransferInV2' when calling purchaseTransferProcess(Async)");
        }

        return purchaseTransferProcessCall(customerId, domain, domainTransferInV2, xRequestId, _callback);

    }


    private ApiResponse<Void> purchaseTransferProcessWithHttpInfo(String customerId, String domain, DomainTransferInV2 domainTransferInV2, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = purchaseTransferProcessValidateBeforeCall(customerId, domain, domainTransferInV2, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call purchaseTransferProcessAsync(String customerId, String domain, DomainTransferInV2 domainTransferInV2, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseTransferProcessValidateBeforeCall(customerId, domain, domainTransferInV2, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PurchaseTransferProcessRequestBuilder {
        private final String authCode;
        private final ConsentV2 consent;
        private final String customerId;
        private final String domain;
        private DomainContactsCreateV2 contacts;
        private String identityDocumentId;
        private Object metadata;
        private Integer period;
        private Boolean privacy;
        private Boolean renewAuto;
        private String xRequestId;

        private PurchaseTransferProcessRequestBuilder(String authCode, ConsentV2 consent, String customerId, String domain) {
            this.authCode = authCode;
            this.consent = consent;
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set contacts
         * @param contacts  (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder contacts(DomainContactsCreateV2 contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set identityDocumentId
         * @param identityDocumentId Unique identifier of the identify document that the user wants to associate with the domain being transferred in. This is required only if the gaining registry has a requirement for an approved identity document (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder identityDocumentId(String identityDocumentId) {
            this.identityDocumentId = identityDocumentId;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata The domain eligibility data fields as specified by GET /v2/customers/{customerId}/domains/register/schema/{tld} (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set period
         * @param period Can be more than 1 but no more than 10 years total including current registration length (optional, default to 1)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy Whether or not privacy has been requested (optional, default to false)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder privacy(Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto Whether or not the domain should be configured to automatically renew (optional, default to true)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for purchaseTransferProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainTransferInV2 domainTransferInV2 = buildBodyParams();
            return purchaseTransferProcessCall(customerId, domain, domainTransferInV2, xRequestId, _callback);
        }

        private DomainTransferInV2 buildBodyParams() {
            DomainTransferInV2 domainTransferInV2 = new DomainTransferInV2();
            domainTransferInV2.authCode(this.authCode);
            domainTransferInV2.consent(this.consent);
            domainTransferInV2.contacts(this.contacts);
            domainTransferInV2.identityDocumentId(this.identityDocumentId);
            domainTransferInV2.metadata(this.metadata);
            domainTransferInV2.period(this.period);
            domainTransferInV2.privacy(this.privacy);
            domainTransferInV2.renewAuto(this.renewAuto);
            return domainTransferInV2;
        }

        /**
         * Execute purchaseTransferProcess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainTransferInV2 domainTransferInV2 = buildBodyParams();
            purchaseTransferProcessWithHttpInfo(customerId, domain, domainTransferInV2, xRequestId);
        }

        /**
         * Execute purchaseTransferProcess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainTransferInV2 domainTransferInV2 = buildBodyParams();
            return purchaseTransferProcessWithHttpInfo(customerId, domain, domainTransferInV2, xRequestId);
        }

        /**
         * Execute purchaseTransferProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainTransferInV2 domainTransferInV2 = buildBodyParams();
            return purchaseTransferProcessAsync(customerId, domain, domainTransferInV2, xRequestId, _callback);
        }
    }

    /**
     * Purchase and start or restart transfer process
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to transfer in (required)
     * @param domainTransferInV2 Details for domain transfer purchase (required)
     * @return PurchaseTransferProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER to poll status </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseTransferProcessRequestBuilder purchaseTransferProcess(String authCode, ConsentV2 consent, String customerId, String domain) throws IllegalArgumentException {
        if (authCode == null) throw new IllegalArgumentException("\"authCode\" is required but got null");
            

        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new PurchaseTransferProcessRequestBuilder(authCode, consent, customerId, domain);
    }
    private okhttp3.Call redeemDomainRestoreCall(String customerId, String domain, String xRequestId, DomainRedeemV2 domainRedeemV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainRedeemV2;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/redeem"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemDomainRestoreValidateBeforeCall(String customerId, String domain, String xRequestId, DomainRedeemV2 domainRedeemV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling redeemDomainRestore(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling redeemDomainRestore(Async)");
        }

        return redeemDomainRestoreCall(customerId, domain, xRequestId, domainRedeemV2, _callback);

    }


    private ApiResponse<Void> redeemDomainRestoreWithHttpInfo(String customerId, String domain, String xRequestId, DomainRedeemV2 domainRedeemV2) throws ApiException {
        okhttp3.Call localVarCall = redeemDomainRestoreValidateBeforeCall(customerId, domain, xRequestId, domainRedeemV2, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call redeemDomainRestoreAsync(String customerId, String domain, String xRequestId, DomainRedeemV2 domainRedeemV2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemDomainRestoreValidateBeforeCall(customerId, domain, xRequestId, domainRedeemV2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RedeemDomainRestoreRequestBuilder {
        private final ConsentRedemption consent;
        private final String customerId;
        private final String domain;
        private String xRequestId;

        private RedeemDomainRestoreRequestBuilder(ConsentRedemption consent, String customerId, String domain) {
            this.consent = consent;
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return RedeemDomainRestoreRequestBuilder
         */
        public RedeemDomainRestoreRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for redeemDomainRestore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REDEEM to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainRedeemV2 domainRedeemV2 = buildBodyParams();
            return redeemDomainRestoreCall(customerId, domain, xRequestId, domainRedeemV2, _callback);
        }

        private DomainRedeemV2 buildBodyParams() {
            DomainRedeemV2 domainRedeemV2 = new DomainRedeemV2();
            domainRedeemV2.consent(this.consent);
            return domainRedeemV2;
        }

        /**
         * Execute redeemDomainRestore request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REDEEM to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainRedeemV2 domainRedeemV2 = buildBodyParams();
            redeemDomainRestoreWithHttpInfo(customerId, domain, xRequestId, domainRedeemV2);
        }

        /**
         * Execute redeemDomainRestore request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REDEEM to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainRedeemV2 domainRedeemV2 = buildBodyParams();
            return redeemDomainRestoreWithHttpInfo(customerId, domain, xRequestId, domainRedeemV2);
        }

        /**
         * Execute redeemDomainRestore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REDEEM to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainRedeemV2 domainRedeemV2 = buildBodyParams();
            return redeemDomainRestoreAsync(customerId, domain, xRequestId, domainRedeemV2, _callback);
        }
    }

    /**
     * Purchase a restore for the given domain to bring it out of redemption
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to request redeem for (required)
     * @return RedeemDomainRestoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/REDEEM to poll status </td><td>  -  </td></tr>
     </table>
     */
    public RedeemDomainRestoreRequestBuilder redeemDomainRestore(ConsentRedemption consent, String customerId, String domain) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new RedeemDomainRestoreRequestBuilder(consent, customerId, domain);
    }
    private okhttp3.Call rejectTransferOutCall(String customerId, String domain, String xRequestId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferOutReject"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectTransferOutValidateBeforeCall(String customerId, String domain, String xRequestId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling rejectTransferOut(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling rejectTransferOut(Async)");
        }

        return rejectTransferOutCall(customerId, domain, xRequestId, reason, _callback);

    }


    private ApiResponse<Void> rejectTransferOutWithHttpInfo(String customerId, String domain, String xRequestId, String reason) throws ApiException {
        okhttp3.Call localVarCall = rejectTransferOutValidateBeforeCall(customerId, domain, xRequestId, reason, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call rejectTransferOutAsync(String customerId, String domain, String xRequestId, String reason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectTransferOutValidateBeforeCall(customerId, domain, xRequestId, reason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RejectTransferOutRequestBuilder {
        private final String customerId;
        private final String domain;
        private String xRequestId;
        private String reason;

        private RejectTransferOutRequestBuilder(String customerId, String domain) {
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return RejectTransferOutRequestBuilder
         */
        public RejectTransferOutRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Set reason
         * @param reason Transfer out reject reason (optional)
         * @return RejectTransferOutRequestBuilder
         */
        public RejectTransferOutRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for rejectTransferOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REJECT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rejectTransferOutCall(customerId, domain, xRequestId, reason, _callback);
        }


        /**
         * Execute rejectTransferOut request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REJECT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            rejectTransferOutWithHttpInfo(customerId, domain, xRequestId, reason);
        }

        /**
         * Execute rejectTransferOut request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REJECT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return rejectTransferOutWithHttpInfo(customerId, domain, xRequestId, reason);
        }

        /**
         * Execute rejectTransferOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REJECT to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return rejectTransferOutAsync(customerId, domain, xRequestId, reason, _callback);
        }
    }

    /**
     * Reject transfer out
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to reject the transfer out for (required)
     * @return RejectTransferOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REJECT to poll status </td><td>  -  </td></tr>
     </table>
     */
    public RejectTransferOutRequestBuilder rejectTransferOut(String customerId, String domain) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new RejectTransferOutRequestBuilder(customerId, domain);
    }
    private okhttp3.Call renewDomainCall(String customerId, String domain, DomainRenewV2 domainRenewV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainRenewV2;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/renew"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewDomainValidateBeforeCall(String customerId, String domain, DomainRenewV2 domainRenewV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling renewDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling renewDomain(Async)");
        }

        // verify the required parameter 'domainRenewV2' is set
        if (domainRenewV2 == null) {
            throw new ApiException("Missing the required parameter 'domainRenewV2' when calling renewDomain(Async)");
        }

        return renewDomainCall(customerId, domain, domainRenewV2, xRequestId, _callback);

    }


    private ApiResponse<Void> renewDomainWithHttpInfo(String customerId, String domain, DomainRenewV2 domainRenewV2, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = renewDomainValidateBeforeCall(customerId, domain, domainRenewV2, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call renewDomainAsync(String customerId, String domain, DomainRenewV2 domainRenewV2, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewDomainValidateBeforeCall(customerId, domain, domainRenewV2, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RenewDomainRequestBuilder {
        private final ConsentRenew consent;
        private final String expires;
        private final String customerId;
        private final String domain;
        private Integer period;
        private String xRequestId;

        private RenewDomainRequestBuilder(ConsentRenew consent, String expires, String customerId, String domain) {
            this.consent = consent;
            this.expires = expires;
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set period
         * @param period Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to &#x60;period&#x60; specified during original purchase (optional)
         * @return RenewDomainRequestBuilder
         */
        public RenewDomainRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return RenewDomainRequestBuilder
         */
        public RenewDomainRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for renewDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/RENEW to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainRenewV2 domainRenewV2 = buildBodyParams();
            return renewDomainCall(customerId, domain, domainRenewV2, xRequestId, _callback);
        }

        private DomainRenewV2 buildBodyParams() {
            DomainRenewV2 domainRenewV2 = new DomainRenewV2();
            domainRenewV2.consent(this.consent);
            domainRenewV2.expires(this.expires);
            domainRenewV2.period(this.period);
            return domainRenewV2;
        }

        /**
         * Execute renewDomain request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/RENEW to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainRenewV2 domainRenewV2 = buildBodyParams();
            renewDomainWithHttpInfo(customerId, domain, domainRenewV2, xRequestId);
        }

        /**
         * Execute renewDomain request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/RENEW to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainRenewV2 domainRenewV2 = buildBodyParams();
            return renewDomainWithHttpInfo(customerId, domain, domainRenewV2, xRequestId);
        }

        /**
         * Execute renewDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/RENEW to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainRenewV2 domainRenewV2 = buildBodyParams();
            return renewDomainAsync(customerId, domain, domainRenewV2, xRequestId, _callback);
        }
    }

    /**
     * Renew the specified Domain
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to be renewed (required)
     * @param domainRenewV2 Options for renewing existing Domain (required)
     * @return RenewDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/RENEW to poll status </td><td>  -  </td></tr>
     </table>
     */
    public RenewDomainRequestBuilder renewDomain(ConsentRenew consent, String expires, String customerId, String domain) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (expires == null) throw new IllegalArgumentException("\"expires\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new RenewDomainRequestBuilder(consent, expires, customerId, domain);
    }
    private okhttp3.Call restartTransferInCall(String customerId, String domain, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferInRestart"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartTransferInValidateBeforeCall(String customerId, String domain, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling restartTransferIn(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling restartTransferIn(Async)");
        }

        return restartTransferInCall(customerId, domain, xRequestId, _callback);

    }


    private ApiResponse<Void> restartTransferInWithHttpInfo(String customerId, String domain, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = restartTransferInValidateBeforeCall(customerId, domain, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call restartTransferInAsync(String customerId, String domain, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartTransferInValidateBeforeCall(customerId, domain, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RestartTransferInRequestBuilder {
        private final String customerId;
        private final String domain;
        private String xRequestId;

        private RestartTransferInRequestBuilder(String customerId, String domain) {
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return RestartTransferInRequestBuilder
         */
        public RestartTransferInRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for restartTransferIn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RESTART to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restartTransferInCall(customerId, domain, xRequestId, _callback);
        }


        /**
         * Execute restartTransferIn request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RESTART to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            restartTransferInWithHttpInfo(customerId, domain, xRequestId);
        }

        /**
         * Execute restartTransferIn request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RESTART to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return restartTransferInWithHttpInfo(customerId, domain, xRequestId);
        }

        /**
         * Execute restartTransferIn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RESTART to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return restartTransferInAsync(customerId, domain, xRequestId, _callback);
        }
    }

    /**
     * Restarts transfer in request from the beginning
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to restart the transfer in (required)
     * @return RestartTransferInRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RESTART to poll status </td><td>  -  </td></tr>
     </table>
     */
    public RestartTransferInRequestBuilder restartTransferIn(String customerId, String domain) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new RestartTransferInRequestBuilder(customerId, domain);
    }
    private okhttp3.Call retryTransferInProcessCall(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainTransferAuthCode;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/{domain}/transferInRetry"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retryTransferInProcessValidateBeforeCall(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling retryTransferInProcess(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling retryTransferInProcess(Async)");
        }

        // verify the required parameter 'domainTransferAuthCode' is set
        if (domainTransferAuthCode == null) {
            throw new ApiException("Missing the required parameter 'domainTransferAuthCode' when calling retryTransferInProcess(Async)");
        }

        return retryTransferInProcessCall(customerId, domain, domainTransferAuthCode, xRequestId, _callback);

    }


    private ApiResponse<Void> retryTransferInProcessWithHttpInfo(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = retryTransferInProcessValidateBeforeCall(customerId, domain, domainTransferAuthCode, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call retryTransferInProcessAsync(String customerId, String domain, DomainTransferAuthCode domainTransferAuthCode, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retryTransferInProcessValidateBeforeCall(customerId, domain, domainTransferAuthCode, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RetryTransferInProcessRequestBuilder {
        private final String authCode;
        private final String customerId;
        private final String domain;
        private String xRequestId;

        private RetryTransferInProcessRequestBuilder(String authCode, String customerId, String domain) {
            this.authCode = authCode;
            this.customerId = customerId;
            this.domain = domain;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return RetryTransferInProcessRequestBuilder
         */
        public RetryTransferInProcessRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for retryTransferInProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RETRY to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            return retryTransferInProcessCall(customerId, domain, domainTransferAuthCode, xRequestId, _callback);
        }

        private DomainTransferAuthCode buildBodyParams() {
            DomainTransferAuthCode domainTransferAuthCode = new DomainTransferAuthCode();
            domainTransferAuthCode.authCode(this.authCode);
            return domainTransferAuthCode;
        }

        /**
         * Execute retryTransferInProcess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RETRY to poll status </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            retryTransferInProcessWithHttpInfo(customerId, domain, domainTransferAuthCode, xRequestId);
        }

        /**
         * Execute retryTransferInProcess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RETRY to poll status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            return retryTransferInProcessWithHttpInfo(customerId, domain, domainTransferAuthCode, xRequestId);
        }

        /**
         * Execute retryTransferInProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RETRY to poll status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainTransferAuthCode domainTransferAuthCode = buildBodyParams();
            return retryTransferInProcessAsync(customerId, domain, domainTransferAuthCode, xRequestId, _callback);
        }
    }

    /**
     * Retries the current transfer in request with supplied Authorization code
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domain Domain to retry the transfer in (required)
     * @param domainTransferAuthCode An Authorization code for transferring the Domain (required)
     * @return RetryTransferInProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. You may use GET /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RETRY to poll status </td><td>  -  </td></tr>
     </table>
     */
    public RetryTransferInProcessRequestBuilder retryTransferInProcess(String authCode, String customerId, String domain) throws IllegalArgumentException {
        if (authCode == null) throw new IllegalArgumentException("\"authCode\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new RetryTransferInProcessRequestBuilder(authCode, customerId, domain);
    }
    private okhttp3.Call validateDomainRegistrationCall(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainPurchaseV2;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/register/validate"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateDomainRegistrationValidateBeforeCall(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling validateDomainRegistration(Async)");
        }

        // verify the required parameter 'domainPurchaseV2' is set
        if (domainPurchaseV2 == null) {
            throw new ApiException("Missing the required parameter 'domainPurchaseV2' when calling validateDomainRegistration(Async)");
        }

        return validateDomainRegistrationCall(customerId, domainPurchaseV2, xRequestId, _callback);

    }


    private ApiResponse<Void> validateDomainRegistrationWithHttpInfo(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = validateDomainRegistrationValidateBeforeCall(customerId, domainPurchaseV2, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call validateDomainRegistrationAsync(String customerId, DomainPurchaseV2 domainPurchaseV2, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateDomainRegistrationValidateBeforeCall(customerId, domainPurchaseV2, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ValidateDomainRegistrationRequestBuilder {
        private final ConsentV2 consent;
        private final String domain;
        private final String customerId;
        private DomainContactsCreateV2 contacts;
        private Object metadata;
        private List<String> nameServers;
        private Integer period;
        private Boolean privacy;
        private Boolean renewAuto;
        private String xRequestId;

        private ValidateDomainRegistrationRequestBuilder(ConsentV2 consent, String domain, String customerId) {
            this.consent = consent;
            this.domain = domain;
            this.customerId = customerId;
        }

        /**
         * Set contacts
         * @param contacts  (optional)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder contacts(DomainContactsCreateV2 contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata The domain eligibility data fields as specified by GET /v2/customers/{customerId}/domains/register/schema/{tld} (optional)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set nameServers
         * @param nameServers  (optional)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder nameServers(List<String> nameServers) {
            this.nameServers = nameServers;
            return this;
        }
        
        /**
         * Set period
         * @param period  (optional, default to 1)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional, default to false)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder privacy(Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto  (optional, default to true)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return ValidateDomainRegistrationRequestBuilder
         */
        public ValidateDomainRegistrationRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for validateDomainRegistration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            return validateDomainRegistrationCall(customerId, domainPurchaseV2, xRequestId, _callback);
        }

        private DomainPurchaseV2 buildBodyParams() {
            DomainPurchaseV2 domainPurchaseV2 = new DomainPurchaseV2();
            domainPurchaseV2.consent(this.consent);
            domainPurchaseV2.contacts(this.contacts);
            domainPurchaseV2.domain(this.domain);
            domainPurchaseV2.metadata(this.metadata);
            domainPurchaseV2.nameServers(this.nameServers);
            domainPurchaseV2.period(this.period);
            domainPurchaseV2.privacy(this.privacy);
            domainPurchaseV2.renewAuto(this.renewAuto);
            return domainPurchaseV2;
        }

        /**
         * Execute validateDomainRegistration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            validateDomainRegistrationWithHttpInfo(customerId, domainPurchaseV2, xRequestId);
        }

        /**
         * Execute validateDomainRegistration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            return validateDomainRegistrationWithHttpInfo(customerId, domainPurchaseV2, xRequestId);
        }

        /**
         * Execute validateDomainRegistration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainPurchaseV2 domainPurchaseV2 = buildBodyParams();
            return validateDomainRegistrationAsync(customerId, domainPurchaseV2, xRequestId, _callback);
        }
    }

    /**
     * Validate the request body using the Domain Registration Schema for the specified TLD
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param domainPurchaseV2 An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @return ValidateDomainRegistrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ValidateDomainRegistrationRequestBuilder validateDomainRegistration(ConsentV2 consent, String domain, String customerId) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new ValidateDomainRegistrationRequestBuilder(consent, domain, customerId);
    }
}
