/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Consent;
import com.konfigthis.client.model.ConsentDomainUpdate;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.DNSRecord;
import com.konfigthis.client.model.DNSRecordCreateType;
import com.konfigthis.client.model.DNSRecordCreateTypeName;
import com.konfigthis.client.model.DomainAvailableBulk;
import com.konfigthis.client.model.DomainAvailableBulkMixed;
import com.konfigthis.client.model.DomainAvailableResponse;
import com.konfigthis.client.model.DomainContacts;
import com.konfigthis.client.model.DomainDetail;
import com.konfigthis.client.model.DomainPurchase;
import com.konfigthis.client.model.DomainPurchaseResponse;
import com.konfigthis.client.model.DomainRenew;
import com.konfigthis.client.model.DomainSuggestion;
import com.konfigthis.client.model.DomainSummary;
import com.konfigthis.client.model.DomainTransferIn;
import com.konfigthis.client.model.DomainUpdate;
import com.konfigthis.client.model.DomainsContactsBulk;
import com.konfigthis.client.model.JsonSchema;
import com.konfigthis.client.model.LegalAgreement;
import com.konfigthis.client.model.PrivacyPurchase;
import com.konfigthis.client.model.TldSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1ApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1ApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public V1ApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDnsRecordsToDomainCall(String domain, List<DNSRecord> dnSRecord, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnSRecord;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/records"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDnsRecordsToDomainValidateBeforeCall(String domain, List<DNSRecord> dnSRecord, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addDnsRecordsToDomain(Async)");
        }

        // verify the required parameter 'dnSRecord' is set
        if (dnSRecord == null) {
            throw new ApiException("Missing the required parameter 'dnSRecord' when calling addDnsRecordsToDomain(Async)");
        }

        return addDnsRecordsToDomainCall(domain, dnSRecord, xShopperId, _callback);

    }


    private ApiResponse<Void> addDnsRecordsToDomainWithHttpInfo(String domain, List<DNSRecord> dnSRecord, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = addDnsRecordsToDomainValidateBeforeCall(domain, dnSRecord, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addDnsRecordsToDomainAsync(String domain, List<DNSRecord> dnSRecord, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDnsRecordsToDomainValidateBeforeCall(domain, dnSRecord, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddDnsRecordsToDomainRequestBuilder {
        private final String domain;
        private String xShopperId;
        private List<DNSRecord> dnSRecord;

        private AddDnsRecordsToDomainRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set dnSRecord
         * @param dnSRecord DNS Records to add to whatever currently exists (optional)
         * @return AddDnsRecordsToDomainRequestBuilder
         */
        public AddDnsRecordsToDomainRequestBuilder dnSRecord(List<DNSRecord> dnSRecord) {
            this.dnSRecord = dnSRecord;
            return this;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return AddDnsRecordsToDomainRequestBuilder
         */
        public AddDnsRecordsToDomainRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for addDnsRecordsToDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            return addDnsRecordsToDomainCall(domain, dnSRecord, xShopperId, _callback);
        }

        private List<DNSRecord> buildBodyParams() {
            return this.dnSRecord;
        }

        /**
         * Execute addDnsRecordsToDomain request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            addDnsRecordsToDomainWithHttpInfo(domain, dnSRecord, xShopperId);
        }

        /**
         * Execute addDnsRecordsToDomain request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            return addDnsRecordsToDomainWithHttpInfo(domain, dnSRecord, xShopperId);
        }

        /**
         * Execute addDnsRecordsToDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            return addDnsRecordsToDomainAsync(domain, dnSRecord, xShopperId, _callback);
        }
    }

    /**
     * Add the specified DNS Records to the specified Domain
     * 
     * @param domain Domain whose DNS Records are to be augmented (required)
     * @param dnSRecord DNS Records to add to whatever currently exists (required)
     * @return AddDnsRecordsToDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public AddDnsRecordsToDomainRequestBuilder addDnsRecordsToDomain(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new AddDnsRecordsToDomainRequestBuilder(domain);
    }
    private okhttp3.Call cancelDomainPurchaseCall(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDomainPurchaseValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling cancelDomainPurchase(Async)");
        }

        return cancelDomainPurchaseCall(domain, _callback);

    }


    private ApiResponse<Void> cancelDomainPurchaseWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = cancelDomainPurchaseValidateBeforeCall(domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelDomainPurchaseAsync(String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDomainPurchaseValidateBeforeCall(domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelDomainPurchaseRequestBuilder {
        private final String domain;

        private CancelDomainPurchaseRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Build call for cancelDomainPurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelDomainPurchaseCall(domain, _callback);
        }


        /**
         * Execute cancelDomainPurchase request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelDomainPurchaseWithHttpInfo(domain);
        }

        /**
         * Execute cancelDomainPurchase request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelDomainPurchaseWithHttpInfo(domain);
        }

        /**
         * Execute cancelDomainPurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelDomainPurchaseAsync(domain, _callback);
        }
    }

    /**
     * Cancel a purchased domain
     * 
     * @param domain Domain to cancel (required)
     * @return CancelDomainPurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public CancelDomainPurchaseRequestBuilder cancelDomainPurchase(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CancelDomainPurchaseRequestBuilder(domain);
    }
    private okhttp3.Call cancelPrivacyRequestCall(String domain, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/privacy"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPrivacyRequestValidateBeforeCall(String domain, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling cancelPrivacyRequest(Async)");
        }

        return cancelPrivacyRequestCall(domain, xShopperId, _callback);

    }


    private ApiResponse<Void> cancelPrivacyRequestWithHttpInfo(String domain, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = cancelPrivacyRequestValidateBeforeCall(domain, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelPrivacyRequestAsync(String domain, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPrivacyRequestValidateBeforeCall(domain, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelPrivacyRequestRequestBuilder {
        private final String domain;
        private String xShopperId;

        private CancelPrivacyRequestRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID of the owner of the domain (optional)
         * @return CancelPrivacyRequestRequestBuilder
         */
        public CancelPrivacyRequestRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for cancelPrivacyRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelPrivacyRequestCall(domain, xShopperId, _callback);
        }


        /**
         * Execute cancelPrivacyRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelPrivacyRequestWithHttpInfo(domain, xShopperId);
        }

        /**
         * Execute cancelPrivacyRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelPrivacyRequestWithHttpInfo(domain, xShopperId);
        }

        /**
         * Execute cancelPrivacyRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelPrivacyRequestAsync(domain, xShopperId, _callback);
        }
    }

    /**
     * Submit a privacy cancellation request for the given domain
     * 
     * @param domain Domain whose privacy is to be cancelled (required)
     * @return CancelPrivacyRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public CancelPrivacyRequestRequestBuilder cancelPrivacyRequest(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CancelPrivacyRequestRequestBuilder(domain);
    }
    private okhttp3.Call checkDomainAvailabilityCall(String domain, String checkType, Boolean forTransfer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (checkType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkType", checkType));
        }

        if (forTransfer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forTransfer", forTransfer));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDomainAvailabilityValidateBeforeCall(String domain, String checkType, Boolean forTransfer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling checkDomainAvailability(Async)");
        }

        return checkDomainAvailabilityCall(domain, checkType, forTransfer, _callback);

    }


    private ApiResponse<DomainAvailableResponse> checkDomainAvailabilityWithHttpInfo(String domain, String checkType, Boolean forTransfer) throws ApiException {
        okhttp3.Call localVarCall = checkDomainAvailabilityValidateBeforeCall(domain, checkType, forTransfer, null);
        Type localVarReturnType = new TypeToken<DomainAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkDomainAvailabilityAsync(String domain, String checkType, Boolean forTransfer, final ApiCallback<DomainAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDomainAvailabilityValidateBeforeCall(domain, checkType, forTransfer, _callback);
        Type localVarReturnType = new TypeToken<DomainAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckDomainAvailabilityRequestBuilder {
        private final String domain;
        private String checkType;
        private Boolean forTransfer;

        private CheckDomainAvailabilityRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set checkType
         * @param checkType Optimize for time (&#39;FAST&#39;) or accuracy (&#39;FULL&#39;) (optional, default to FAST)
         * @return CheckDomainAvailabilityRequestBuilder
         */
        public CheckDomainAvailabilityRequestBuilder checkType(String checkType) {
            this.checkType = checkType;
            return this;
        }
        
        /**
         * Set forTransfer
         * @param forTransfer Whether or not to include domains available for transfer. If set to True, checkType is ignored (optional, default to false)
         * @return CheckDomainAvailabilityRequestBuilder
         */
        public CheckDomainAvailabilityRequestBuilder forTransfer(Boolean forTransfer) {
            this.forTransfer = forTransfer;
            return this;
        }
        
        /**
         * Build call for checkDomainAvailability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkDomainAvailabilityCall(domain, checkType, forTransfer, _callback);
        }


        /**
         * Execute checkDomainAvailability request
         * @return DomainAvailableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainAvailableResponse execute() throws ApiException {
            ApiResponse<DomainAvailableResponse> localVarResp = checkDomainAvailabilityWithHttpInfo(domain, checkType, forTransfer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkDomainAvailability request with HTTP info returned
         * @return ApiResponse&lt;DomainAvailableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainAvailableResponse> executeWithHttpInfo() throws ApiException {
            return checkDomainAvailabilityWithHttpInfo(domain, checkType, forTransfer);
        }

        /**
         * Execute checkDomainAvailability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainAvailableResponse> _callback) throws ApiException {
            return checkDomainAvailabilityAsync(domain, checkType, forTransfer, _callback);
        }
    }

    /**
     * Determine whether or not the specified domain is available for purchase
     * 
     * @param domain Domain name whose availability is to be checked (required)
     * @return CheckDomainAvailabilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public CheckDomainAvailabilityRequestBuilder checkDomainAvailability(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CheckDomainAvailabilityRequestBuilder(domain);
    }
    private okhttp3.Call checkDomainAvailabilityPostCall(List<String> requestBody, String checkType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/domains/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkType", checkType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDomainAvailabilityPostValidateBeforeCall(List<String> requestBody, String checkType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling checkDomainAvailabilityPost(Async)");
        }

        return checkDomainAvailabilityPostCall(requestBody, checkType, _callback);

    }


    private ApiResponse<DomainAvailableBulk> checkDomainAvailabilityPostWithHttpInfo(List<String> requestBody, String checkType) throws ApiException {
        okhttp3.Call localVarCall = checkDomainAvailabilityPostValidateBeforeCall(requestBody, checkType, null);
        Type localVarReturnType = new TypeToken<DomainAvailableBulk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkDomainAvailabilityPostAsync(List<String> requestBody, String checkType, final ApiCallback<DomainAvailableBulk> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDomainAvailabilityPostValidateBeforeCall(requestBody, checkType, _callback);
        Type localVarReturnType = new TypeToken<DomainAvailableBulk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckDomainAvailabilityPostRequestBuilder {
        private String checkType;
        private List<String> requestBody;

        private CheckDomainAvailabilityPostRequestBuilder() {
        }

        /**
         * Set requestBody
         * @param requestBody Domain names for which to check availability (optional)
         * @return CheckDomainAvailabilityPostRequestBuilder
         */
        public CheckDomainAvailabilityPostRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Set checkType
         * @param checkType Optimize for time (&#39;FAST&#39;) or accuracy (&#39;FULL&#39;) (optional, default to FAST)
         * @return CheckDomainAvailabilityPostRequestBuilder
         */
        public CheckDomainAvailabilityPostRequestBuilder checkType(String checkType) {
            this.checkType = checkType;
            return this;
        }
        
        /**
         * Build call for checkDomainAvailabilityPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return checkDomainAvailabilityPostCall(requestBody, checkType, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute checkDomainAvailabilityPost request
         * @return DomainAvailableBulk
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainAvailableBulk execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<DomainAvailableBulk> localVarResp = checkDomainAvailabilityPostWithHttpInfo(requestBody, checkType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkDomainAvailabilityPost request with HTTP info returned
         * @return ApiResponse&lt;DomainAvailableBulk&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainAvailableBulk> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return checkDomainAvailabilityPostWithHttpInfo(requestBody, checkType);
        }

        /**
         * Execute checkDomainAvailabilityPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainAvailableBulk> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return checkDomainAvailabilityPostAsync(requestBody, checkType, _callback);
        }
    }

    /**
     * Determine whether or not the specified domains are available for purchase
     * 
     * @param requestBody Domain names for which to check availability (required)
     * @return CheckDomainAvailabilityPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 203 </td><td> Request was partially successful </td><td>  -  </td></tr>
     </table>
     */
    public CheckDomainAvailabilityPostRequestBuilder checkDomainAvailabilityPost() throws IllegalArgumentException {
        return new CheckDomainAvailabilityPostRequestBuilder();
    }
    private okhttp3.Call createDomainPurchaseCall(DomainPurchase domainPurchase, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainPurchase;

        // create path and map variables
        String localVarPath = "/v1/domains/purchase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDomainPurchaseValidateBeforeCall(DomainPurchase domainPurchase, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainPurchase' is set
        if (domainPurchase == null) {
            throw new ApiException("Missing the required parameter 'domainPurchase' when calling createDomainPurchase(Async)");
        }

        return createDomainPurchaseCall(domainPurchase, xShopperId, _callback);

    }


    private ApiResponse<DomainPurchaseResponse> createDomainPurchaseWithHttpInfo(DomainPurchase domainPurchase, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = createDomainPurchaseValidateBeforeCall(domainPurchase, xShopperId, null);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDomainPurchaseAsync(DomainPurchase domainPurchase, String xShopperId, final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDomainPurchaseValidateBeforeCall(domainPurchase, xShopperId, _callback);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDomainPurchaseRequestBuilder {
        private final Consent consent;
        private final String domain;
        private Contact contactAdmin;
        private Contact contactBilling;
        private Contact contactRegistrant;
        private Contact contactTech;
        private List<String> nameServers;
        private Integer period;
        private Boolean privacy;
        private Boolean renewAuto;
        private String xShopperId;

        private CreateDomainPurchaseRequestBuilder(Consent consent, String domain) {
            this.consent = consent;
            this.domain = domain;
        }

        /**
         * Set contactAdmin
         * @param contactAdmin  (optional)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder contactAdmin(Contact contactAdmin) {
            this.contactAdmin = contactAdmin;
            return this;
        }
        
        /**
         * Set contactBilling
         * @param contactBilling  (optional)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder contactBilling(Contact contactBilling) {
            this.contactBilling = contactBilling;
            return this;
        }
        
        /**
         * Set contactRegistrant
         * @param contactRegistrant  (optional)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder contactRegistrant(Contact contactRegistrant) {
            this.contactRegistrant = contactRegistrant;
            return this;
        }
        
        /**
         * Set contactTech
         * @param contactTech  (optional)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder contactTech(Contact contactTech) {
            this.contactTech = contactTech;
            return this;
        }
        
        /**
         * Set nameServers
         * @param nameServers  (optional)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder nameServers(List<String> nameServers) {
            this.nameServers = nameServers;
            return this;
        }
        
        /**
         * Set period
         * @param period  (optional, default to 1)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional, default to false)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder privacy(Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto  (optional, default to true)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Set xShopperId
         * @param xShopperId The Shopper for whom the domain should be purchased (optional)
         * @return CreateDomainPurchaseRequestBuilder
         */
        public CreateDomainPurchaseRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for createDomainPurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            return createDomainPurchaseCall(domainPurchase, xShopperId, _callback);
        }

        private DomainPurchase buildBodyParams() {
            DomainPurchase domainPurchase = new DomainPurchase();
            domainPurchase.consent(this.consent);
            domainPurchase.contactAdmin(this.contactAdmin);
            domainPurchase.contactBilling(this.contactBilling);
            domainPurchase.contactRegistrant(this.contactRegistrant);
            domainPurchase.contactTech(this.contactTech);
            domainPurchase.domain(this.domain);
            domainPurchase.nameServers(this.nameServers);
            domainPurchase.period(this.period);
            domainPurchase.privacy(this.privacy);
            domainPurchase.renewAuto(this.renewAuto);
            return domainPurchase;
        }

        /**
         * Execute createDomainPurchase request
         * @return DomainPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainPurchaseResponse execute() throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            ApiResponse<DomainPurchaseResponse> localVarResp = createDomainPurchaseWithHttpInfo(domainPurchase, xShopperId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDomainPurchase request with HTTP info returned
         * @return ApiResponse&lt;DomainPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainPurchaseResponse> executeWithHttpInfo() throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            return createDomainPurchaseWithHttpInfo(domainPurchase, xShopperId);
        }

        /**
         * Execute createDomainPurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            return createDomainPurchaseAsync(domainPurchase, xShopperId, _callback);
        }
    }

    /**
     * Purchase and register the specified Domain
     * 
     * @param domainPurchase An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @return CreateDomainPurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public CreateDomainPurchaseRequestBuilder createDomainPurchase(Consent consent, String domain) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new CreateDomainPurchaseRequestBuilder(consent, domain);
    }
    private okhttp3.Call deleteAllDnsRecordsCall(String domain, String type, String name, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/records/{type}/{name}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllDnsRecordsValidateBeforeCall(String domain, String type, String name, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteAllDnsRecords(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteAllDnsRecords(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAllDnsRecords(Async)");
        }

        return deleteAllDnsRecordsCall(domain, type, name, xShopperId, _callback);

    }


    private ApiResponse<Void> deleteAllDnsRecordsWithHttpInfo(String domain, String type, String name, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = deleteAllDnsRecordsValidateBeforeCall(domain, type, name, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllDnsRecordsAsync(String domain, String type, String name, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllDnsRecordsValidateBeforeCall(domain, type, name, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAllDnsRecordsRequestBuilder {
        private final String domain;
        private final String type;
        private final String name;
        private String xShopperId;

        private DeleteAllDnsRecordsRequestBuilder(String domain, String type, String name) {
            this.domain = domain;
            this.type = type;
            this.name = name;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return DeleteAllDnsRecordsRequestBuilder
         */
        public DeleteAllDnsRecordsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for deleteAllDnsRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllDnsRecordsCall(domain, type, name, xShopperId, _callback);
        }


        /**
         * Execute deleteAllDnsRecords request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllDnsRecordsWithHttpInfo(domain, type, name, xShopperId);
        }

        /**
         * Execute deleteAllDnsRecords request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllDnsRecordsWithHttpInfo(domain, type, name, xShopperId);
        }

        /**
         * Execute deleteAllDnsRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllDnsRecordsAsync(domain, type, name, xShopperId, _callback);
        }
    }

    /**
     * Delete all DNS Records for the specified Domain with the specified Type and Name
     * 
     * @param domain Domain whose DNS Records are to be deleted (required)
     * @param type DNS Record Type for which DNS Records are to be deleted (required)
     * @param name DNS Record Name for which DNS Records are to be deleted (required)
     * @return DeleteAllDnsRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAllDnsRecordsRequestBuilder deleteAllDnsRecords(String domain, String type, String name) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new DeleteAllDnsRecordsRequestBuilder(domain, type, name);
    }
    private okhttp3.Call getDnsRecordsCall(String domain, String type, String name, String xShopperId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/records/{type}/{name}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDnsRecordsValidateBeforeCall(String domain, String type, String name, String xShopperId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDnsRecords(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getDnsRecords(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDnsRecords(Async)");
        }

        return getDnsRecordsCall(domain, type, name, xShopperId, offset, limit, _callback);

    }


    private ApiResponse<List<DNSRecord>> getDnsRecordsWithHttpInfo(String domain, String type, String name, String xShopperId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getDnsRecordsValidateBeforeCall(domain, type, name, xShopperId, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<DNSRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDnsRecordsAsync(String domain, String type, String name, String xShopperId, Integer offset, Integer limit, final ApiCallback<List<DNSRecord>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDnsRecordsValidateBeforeCall(domain, type, name, xShopperId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<DNSRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDnsRecordsRequestBuilder {
        private final String domain;
        private final String type;
        private final String name;
        private String xShopperId;
        private Integer offset;
        private Integer limit;

        private GetDnsRecordsRequestBuilder(String domain, String type, String name) {
            this.domain = domain;
            this.type = type;
            this.name = name;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return GetDnsRecordsRequestBuilder
         */
        public GetDnsRecordsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Number of results to skip for pagination (optional)
         * @return GetDnsRecordsRequestBuilder
         */
        public GetDnsRecordsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of items to return (optional)
         * @return GetDnsRecordsRequestBuilder
         */
        public GetDnsRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getDnsRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDnsRecordsCall(domain, type, name, xShopperId, offset, limit, _callback);
        }


        /**
         * Execute getDnsRecords request
         * @return List&lt;DNSRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DNSRecord> execute() throws ApiException {
            ApiResponse<List<DNSRecord>> localVarResp = getDnsRecordsWithHttpInfo(domain, type, name, xShopperId, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDnsRecords request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DNSRecord&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DNSRecord>> executeWithHttpInfo() throws ApiException {
            return getDnsRecordsWithHttpInfo(domain, type, name, xShopperId, offset, limit);
        }

        /**
         * Execute getDnsRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DNSRecord>> _callback) throws ApiException {
            return getDnsRecordsAsync(domain, type, name, xShopperId, offset, limit, _callback);
        }
    }

    /**
     * Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name
     * 
     * @param domain Domain whose DNS Records are to be retrieved (required)
     * @param type DNS Record Type for which DNS Records are to be retrieved (required)
     * @param name DNS Record Name for which DNS Records are to be retrieved (required)
     * @return GetDnsRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetDnsRecordsRequestBuilder getDnsRecords(String domain, String type, String name) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new GetDnsRecordsRequestBuilder(domain, type, name);
    }
    private okhttp3.Call getDomainDetailsCall(String domain, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainDetailsValidateBeforeCall(String domain, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainDetails(Async)");
        }

        return getDomainDetailsCall(domain, xShopperId, _callback);

    }


    private ApiResponse<DomainDetail> getDomainDetailsWithHttpInfo(String domain, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = getDomainDetailsValidateBeforeCall(domain, xShopperId, null);
        Type localVarReturnType = new TypeToken<DomainDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainDetailsAsync(String domain, String xShopperId, final ApiCallback<DomainDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainDetailsValidateBeforeCall(domain, xShopperId, _callback);
        Type localVarReturnType = new TypeToken<DomainDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDomainDetailsRequestBuilder {
        private final String domain;
        private String xShopperId;

        private GetDomainDetailsRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID expected to own the specified domain (optional)
         * @return GetDomainDetailsRequestBuilder
         */
        public GetDomainDetailsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for getDomainDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, see verifications.status for further detail </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainDetailsCall(domain, xShopperId, _callback);
        }


        /**
         * Execute getDomainDetails request
         * @return DomainDetail
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, see verifications.status for further detail </td><td>  -  </td></tr>
         </table>
         */
        public DomainDetail execute() throws ApiException {
            ApiResponse<DomainDetail> localVarResp = getDomainDetailsWithHttpInfo(domain, xShopperId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDomainDetails request with HTTP info returned
         * @return ApiResponse&lt;DomainDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, see verifications.status for further detail </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainDetail> executeWithHttpInfo() throws ApiException {
            return getDomainDetailsWithHttpInfo(domain, xShopperId);
        }

        /**
         * Execute getDomainDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
            <tr><td> 203 </td><td> Request was partially successful, see verifications.status for further detail </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainDetail> _callback) throws ApiException {
            return getDomainDetailsAsync(domain, xShopperId, _callback);
        }
    }

    /**
     * Retrieve details for the specified Domain
     * 
     * @param domain Domain name whose details are to be retrieved (required)
     * @return GetDomainDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
        <tr><td> 203 </td><td> Request was partially successful, see verifications.status for further detail </td><td>  -  </td></tr>
     </table>
     */
    public GetDomainDetailsRequestBuilder getDomainDetails(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new GetDomainDetailsRequestBuilder(domain);
    }
    private okhttp3.Call getDomainSchemaCall(String tld, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/purchase/schema/{tld}"
            .replace("{" + "tld" + "}", localVarApiClient.escapeString(tld.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainSchemaValidateBeforeCall(String tld, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tld' is set
        if (tld == null) {
            throw new ApiException("Missing the required parameter 'tld' when calling getDomainSchema(Async)");
        }

        return getDomainSchemaCall(tld, _callback);

    }


    private ApiResponse<JsonSchema> getDomainSchemaWithHttpInfo(String tld) throws ApiException {
        okhttp3.Call localVarCall = getDomainSchemaValidateBeforeCall(tld, null);
        Type localVarReturnType = new TypeToken<JsonSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainSchemaAsync(String tld, final ApiCallback<JsonSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainSchemaValidateBeforeCall(tld, _callback);
        Type localVarReturnType = new TypeToken<JsonSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDomainSchemaRequestBuilder {
        private final String tld;

        private GetDomainSchemaRequestBuilder(String tld) {
            this.tld = tld;
        }

        /**
         * Build call for getDomainSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainSchemaCall(tld, _callback);
        }


        /**
         * Execute getDomainSchema request
         * @return JsonSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public JsonSchema execute() throws ApiException {
            ApiResponse<JsonSchema> localVarResp = getDomainSchemaWithHttpInfo(tld);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDomainSchema request with HTTP info returned
         * @return ApiResponse&lt;JsonSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonSchema> executeWithHttpInfo() throws ApiException {
            return getDomainSchemaWithHttpInfo(tld);
        }

        /**
         * Execute getDomainSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonSchema> _callback) throws ApiException {
            return getDomainSchemaAsync(tld, _callback);
        }
    }

    /**
     * Retrieve the schema to be submitted when registering a Domain for the specified TLD
     * 
     * @param tld The Top-Level Domain whose schema should be retrieved (required)
     * @return GetDomainSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetDomainSchemaRequestBuilder getDomainSchema(String tld) throws IllegalArgumentException {
        if (tld == null) throw new IllegalArgumentException("\"tld\" is required but got null");
            

        return new GetDomainSchemaRequestBuilder(tld);
    }
    private okhttp3.Call getDomainsListCall(String xShopperId, List<String> statuses, List<String> statusGroups, Integer limit, String marker, List<String> includes, String modifiedDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "statuses", statuses));
        }

        if (statusGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "statusGroups", statusGroups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (includes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includes", includes));
        }

        if (modifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedDate", modifiedDate));
        }

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainsListValidateBeforeCall(String xShopperId, List<String> statuses, List<String> statusGroups, Integer limit, String marker, List<String> includes, String modifiedDate, final ApiCallback _callback) throws ApiException {
        return getDomainsListCall(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate, _callback);

    }


    private ApiResponse<List<DomainSummary>> getDomainsListWithHttpInfo(String xShopperId, List<String> statuses, List<String> statusGroups, Integer limit, String marker, List<String> includes, String modifiedDate) throws ApiException {
        okhttp3.Call localVarCall = getDomainsListValidateBeforeCall(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate, null);
        Type localVarReturnType = new TypeToken<List<DomainSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainsListAsync(String xShopperId, List<String> statuses, List<String> statusGroups, Integer limit, String marker, List<String> includes, String modifiedDate, final ApiCallback<List<DomainSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainsListValidateBeforeCall(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate, _callback);
        Type localVarReturnType = new TypeToken<List<DomainSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDomainsListRequestBuilder {
        private String xShopperId;
        private List<String> statuses;
        private List<String> statusGroups;
        private Integer limit;
        private String marker;
        private List<String> includes;
        private String modifiedDate;

        private GetDomainsListRequestBuilder() {
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID whose domains are to be retrieved (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Only include results with &#x60;status&#x60; value in the specified set (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder statuses(List<String> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set statusGroups
         * @param statusGroups Only include results with &#x60;status&#x60; value in any of the specified groups (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder statusGroups(List<String> statusGroups) {
            this.statusGroups = statusGroups;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of domains to return (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Marker Domain to use as the offset in results (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set includes
         * @param includes Optional details to be included in the response (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder includes(List<String> includes) {
            this.includes = includes;
            return this;
        }
        
        /**
         * Set modifiedDate
         * @param modifiedDate Only include results that have been modified since the specified date (optional)
         * @return GetDomainsListRequestBuilder
         */
        public GetDomainsListRequestBuilder modifiedDate(String modifiedDate) {
            this.modifiedDate = modifiedDate;
            return this;
        }
        
        /**
         * Build call for getDomainsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainsListCall(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate, _callback);
        }


        /**
         * Execute getDomainsList request
         * @return List&lt;DomainSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DomainSummary> execute() throws ApiException {
            ApiResponse<List<DomainSummary>> localVarResp = getDomainsListWithHttpInfo(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDomainsList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DomainSummary&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DomainSummary>> executeWithHttpInfo() throws ApiException {
            return getDomainsListWithHttpInfo(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate);
        }

        /**
         * Execute getDomainsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DomainSummary>> _callback) throws ApiException {
            return getDomainsListAsync(xShopperId, statuses, statusGroups, limit, marker, includes, modifiedDate, _callback);
        }
    }

    /**
     * Retrieve a list of Domains for the specified Shopper
     * 
     * @return GetDomainsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetDomainsListRequestBuilder getDomainsList() throws IllegalArgumentException {
        return new GetDomainsListRequestBuilder();
    }
    private okhttp3.Call getLegalAgreementsCall(List<String> tlds, Boolean privacy, String xMarketId, Boolean forTransfer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tlds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tlds", tlds));
        }

        if (privacy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privacy", privacy));
        }

        if (forTransfer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forTransfer", forTransfer));
        }

        if (xMarketId != null) {
            localVarHeaderParams.put("X-Market-Id", localVarApiClient.parameterToString(xMarketId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegalAgreementsValidateBeforeCall(List<String> tlds, Boolean privacy, String xMarketId, Boolean forTransfer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tlds' is set
        if (tlds == null) {
            throw new ApiException("Missing the required parameter 'tlds' when calling getLegalAgreements(Async)");
        }

        // verify the required parameter 'privacy' is set
        if (privacy == null) {
            throw new ApiException("Missing the required parameter 'privacy' when calling getLegalAgreements(Async)");
        }

        return getLegalAgreementsCall(tlds, privacy, xMarketId, forTransfer, _callback);

    }


    private ApiResponse<List<LegalAgreement>> getLegalAgreementsWithHttpInfo(List<String> tlds, Boolean privacy, String xMarketId, Boolean forTransfer) throws ApiException {
        okhttp3.Call localVarCall = getLegalAgreementsValidateBeforeCall(tlds, privacy, xMarketId, forTransfer, null);
        Type localVarReturnType = new TypeToken<List<LegalAgreement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegalAgreementsAsync(List<String> tlds, Boolean privacy, String xMarketId, Boolean forTransfer, final ApiCallback<List<LegalAgreement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegalAgreementsValidateBeforeCall(tlds, privacy, xMarketId, forTransfer, _callback);
        Type localVarReturnType = new TypeToken<List<LegalAgreement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegalAgreementsRequestBuilder {
        private final List<String> tlds;
        private final Boolean privacy;
        private String xMarketId;
        private Boolean forTransfer;

        private GetLegalAgreementsRequestBuilder(List<String> tlds, Boolean privacy) {
            this.tlds = tlds;
            this.privacy = privacy;
        }

        /**
         * Set xMarketId
         * @param xMarketId Unique identifier of the Market used to retrieve/translate Legal Agreements (optional, default to en-US)
         * @return GetLegalAgreementsRequestBuilder
         */
        public GetLegalAgreementsRequestBuilder xMarketId(String xMarketId) {
            this.xMarketId = xMarketId;
            return this;
        }
        
        /**
         * Set forTransfer
         * @param forTransfer Whether or not domain tranfer has been requested (optional)
         * @return GetLegalAgreementsRequestBuilder
         */
        public GetLegalAgreementsRequestBuilder forTransfer(Boolean forTransfer) {
            this.forTransfer = forTransfer;
            return this;
        }
        
        /**
         * Build call for getLegalAgreements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegalAgreementsCall(tlds, privacy, xMarketId, forTransfer, _callback);
        }


        /**
         * Execute getLegalAgreements request
         * @return List&lt;LegalAgreement&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<LegalAgreement> execute() throws ApiException {
            ApiResponse<List<LegalAgreement>> localVarResp = getLegalAgreementsWithHttpInfo(tlds, privacy, xMarketId, forTransfer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegalAgreements request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LegalAgreement&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LegalAgreement>> executeWithHttpInfo() throws ApiException {
            return getLegalAgreementsWithHttpInfo(tlds, privacy, xMarketId, forTransfer);
        }

        /**
         * Execute getLegalAgreements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LegalAgreement>> _callback) throws ApiException {
            return getLegalAgreementsAsync(tlds, privacy, xMarketId, forTransfer, _callback);
        }
    }

    /**
     * Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons
     * 
     * @param tlds list of TLDs whose legal agreements are to be retrieved (required)
     * @param privacy Whether or not privacy has been requested (required)
     * @return GetLegalAgreementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetLegalAgreementsRequestBuilder getLegalAgreements(List<String> tlds, Boolean privacy) throws IllegalArgumentException {
        if (tlds == null) throw new IllegalArgumentException("\"tlds\" is required but got null");
        if (privacy == null) throw new IllegalArgumentException("\"privacy\" is required but got null");
        return new GetLegalAgreementsRequestBuilder(tlds, privacy);
    }
    private okhttp3.Call getTldsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/tlds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTldsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTldsListCall(_callback);

    }


    private ApiResponse<List<TldSummary>> getTldsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTldsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TldSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTldsListAsync(final ApiCallback<List<TldSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTldsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TldSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTldsListRequestBuilder {

        private GetTldsListRequestBuilder() {
        }

        /**
         * Build call for getTldsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTldsListCall(_callback);
        }


        /**
         * Execute getTldsList request
         * @return List&lt;TldSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<TldSummary> execute() throws ApiException {
            ApiResponse<List<TldSummary>> localVarResp = getTldsListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTldsList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TldSummary&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TldSummary>> executeWithHttpInfo() throws ApiException {
            return getTldsListWithHttpInfo();
        }

        /**
         * Execute getTldsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TldSummary>> _callback) throws ApiException {
            return getTldsListAsync(_callback);
        }
    }

    /**
     * Retrieves a list of TLDs supported and enabled for sale
     * 
     * @return GetTldsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetTldsListRequestBuilder getTldsList() throws IllegalArgumentException {
        return new GetTldsListRequestBuilder();
    }
    private okhttp3.Call purchasePrivacyForDomainCall(String domain, PrivacyPurchase privacyPurchase, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = privacyPurchase;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/privacy/purchase"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasePrivacyForDomainValidateBeforeCall(String domain, PrivacyPurchase privacyPurchase, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling purchasePrivacyForDomain(Async)");
        }

        // verify the required parameter 'privacyPurchase' is set
        if (privacyPurchase == null) {
            throw new ApiException("Missing the required parameter 'privacyPurchase' when calling purchasePrivacyForDomain(Async)");
        }

        return purchasePrivacyForDomainCall(domain, privacyPurchase, xShopperId, _callback);

    }


    private ApiResponse<DomainPurchaseResponse> purchasePrivacyForDomainWithHttpInfo(String domain, PrivacyPurchase privacyPurchase, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = purchasePrivacyForDomainValidateBeforeCall(domain, privacyPurchase, xShopperId, null);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchasePrivacyForDomainAsync(String domain, PrivacyPurchase privacyPurchase, String xShopperId, final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasePrivacyForDomainValidateBeforeCall(domain, privacyPurchase, xShopperId, _callback);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchasePrivacyForDomainRequestBuilder {
        private final Consent consent;
        private final String domain;
        private String xShopperId;

        private PurchasePrivacyForDomainRequestBuilder(Consent consent, String domain) {
            this.consent = consent;
            this.domain = domain;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID of the owner of the domain (optional)
         * @return PurchasePrivacyForDomainRequestBuilder
         */
        public PurchasePrivacyForDomainRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for purchasePrivacyForDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrivacyPurchase privacyPurchase = buildBodyParams();
            return purchasePrivacyForDomainCall(domain, privacyPurchase, xShopperId, _callback);
        }

        private PrivacyPurchase buildBodyParams() {
            PrivacyPurchase privacyPurchase = new PrivacyPurchase();
            privacyPurchase.consent(this.consent);
            return privacyPurchase;
        }

        /**
         * Execute purchasePrivacyForDomain request
         * @return DomainPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainPurchaseResponse execute() throws ApiException {
            PrivacyPurchase privacyPurchase = buildBodyParams();
            ApiResponse<DomainPurchaseResponse> localVarResp = purchasePrivacyForDomainWithHttpInfo(domain, privacyPurchase, xShopperId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchasePrivacyForDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainPurchaseResponse> executeWithHttpInfo() throws ApiException {
            PrivacyPurchase privacyPurchase = buildBodyParams();
            return purchasePrivacyForDomainWithHttpInfo(domain, privacyPurchase, xShopperId);
        }

        /**
         * Execute purchasePrivacyForDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {
            PrivacyPurchase privacyPurchase = buildBodyParams();
            return purchasePrivacyForDomainAsync(domain, privacyPurchase, xShopperId, _callback);
        }
    }

    /**
     * Purchase privacy for a specified domain
     * 
     * @param domain Domain for which to purchase privacy (required)
     * @param privacyPurchase Options for purchasing privacy (required)
     * @return PurchasePrivacyForDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public PurchasePrivacyForDomainRequestBuilder purchasePrivacyForDomain(Consent consent, String domain) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new PurchasePrivacyForDomainRequestBuilder(consent, domain);
    }
    private okhttp3.Call purchaseTransferProcessCall(String domain, DomainTransferIn domainTransferIn, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainTransferIn;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/transfer"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseTransferProcessValidateBeforeCall(String domain, DomainTransferIn domainTransferIn, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling purchaseTransferProcess(Async)");
        }

        // verify the required parameter 'domainTransferIn' is set
        if (domainTransferIn == null) {
            throw new ApiException("Missing the required parameter 'domainTransferIn' when calling purchaseTransferProcess(Async)");
        }

        return purchaseTransferProcessCall(domain, domainTransferIn, xShopperId, _callback);

    }


    private ApiResponse<DomainPurchaseResponse> purchaseTransferProcessWithHttpInfo(String domain, DomainTransferIn domainTransferIn, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = purchaseTransferProcessValidateBeforeCall(domain, domainTransferIn, xShopperId, null);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseTransferProcessAsync(String domain, DomainTransferIn domainTransferIn, String xShopperId, final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseTransferProcessValidateBeforeCall(domain, domainTransferIn, xShopperId, _callback);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseTransferProcessRequestBuilder {
        private final String authCode;
        private final Consent consent;
        private final String domain;
        private Contact contactAdmin;
        private Contact contactBilling;
        private Contact contactRegistrant;
        private Contact contactTech;
        private Integer period;
        private Boolean privacy;
        private Boolean renewAuto;
        private String xShopperId;

        private PurchaseTransferProcessRequestBuilder(String authCode, Consent consent, String domain) {
            this.authCode = authCode;
            this.consent = consent;
            this.domain = domain;
        }

        /**
         * Set contactAdmin
         * @param contactAdmin  (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder contactAdmin(Contact contactAdmin) {
            this.contactAdmin = contactAdmin;
            return this;
        }
        
        /**
         * Set contactBilling
         * @param contactBilling  (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder contactBilling(Contact contactBilling) {
            this.contactBilling = contactBilling;
            return this;
        }
        
        /**
         * Set contactRegistrant
         * @param contactRegistrant  (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder contactRegistrant(Contact contactRegistrant) {
            this.contactRegistrant = contactRegistrant;
            return this;
        }
        
        /**
         * Set contactTech
         * @param contactTech  (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder contactTech(Contact contactTech) {
            this.contactTech = contactTech;
            return this;
        }
        
        /**
         * Set period
         * @param period Can be more than 1 but no more than 10 years total including current registration length (optional, default to 1)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy Whether or not privacy has been requested (optional, default to false)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder privacy(Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto Whether or not the domain should be configured to automatically renew (optional, default to true)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Set xShopperId
         * @param xShopperId The Shopper to whom the domain should be transfered (optional)
         * @return PurchaseTransferProcessRequestBuilder
         */
        public PurchaseTransferProcessRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for purchaseTransferProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainTransferIn domainTransferIn = buildBodyParams();
            return purchaseTransferProcessCall(domain, domainTransferIn, xShopperId, _callback);
        }

        private DomainTransferIn buildBodyParams() {
            DomainTransferIn domainTransferIn = new DomainTransferIn();
            domainTransferIn.authCode(this.authCode);
            domainTransferIn.consent(this.consent);
            domainTransferIn.contactAdmin(this.contactAdmin);
            domainTransferIn.contactBilling(this.contactBilling);
            domainTransferIn.contactRegistrant(this.contactRegistrant);
            domainTransferIn.contactTech(this.contactTech);
            domainTransferIn.period(this.period);
            domainTransferIn.privacy(this.privacy);
            domainTransferIn.renewAuto(this.renewAuto);
            return domainTransferIn;
        }

        /**
         * Execute purchaseTransferProcess request
         * @return DomainPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainPurchaseResponse execute() throws ApiException {
            DomainTransferIn domainTransferIn = buildBodyParams();
            ApiResponse<DomainPurchaseResponse> localVarResp = purchaseTransferProcessWithHttpInfo(domain, domainTransferIn, xShopperId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseTransferProcess request with HTTP info returned
         * @return ApiResponse&lt;DomainPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainPurchaseResponse> executeWithHttpInfo() throws ApiException {
            DomainTransferIn domainTransferIn = buildBodyParams();
            return purchaseTransferProcessWithHttpInfo(domain, domainTransferIn, xShopperId);
        }

        /**
         * Execute purchaseTransferProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {
            DomainTransferIn domainTransferIn = buildBodyParams();
            return purchaseTransferProcessAsync(domain, domainTransferIn, xShopperId, _callback);
        }
    }

    /**
     * Purchase and start or restart transfer process
     * 
     * @param domain Domain to transfer in (required)
     * @param domainTransferIn Details for domain transfer purchase (required)
     * @return PurchaseTransferProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseTransferProcessRequestBuilder purchaseTransferProcess(String authCode, Consent consent, String domain) throws IllegalArgumentException {
        if (authCode == null) throw new IllegalArgumentException("\"authCode\" is required but got null");
            

        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new PurchaseTransferProcessRequestBuilder(authCode, consent, domain);
    }
    private okhttp3.Call renewDomainCall(String domain, String xShopperId, DomainRenew domainRenew, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainRenew;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/renew"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewDomainValidateBeforeCall(String domain, String xShopperId, DomainRenew domainRenew, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling renewDomain(Async)");
        }

        return renewDomainCall(domain, xShopperId, domainRenew, _callback);

    }


    private ApiResponse<DomainPurchaseResponse> renewDomainWithHttpInfo(String domain, String xShopperId, DomainRenew domainRenew) throws ApiException {
        okhttp3.Call localVarCall = renewDomainValidateBeforeCall(domain, xShopperId, domainRenew, null);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renewDomainAsync(String domain, String xShopperId, DomainRenew domainRenew, final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewDomainValidateBeforeCall(domain, xShopperId, domainRenew, _callback);
        Type localVarReturnType = new TypeToken<DomainPurchaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenewDomainRequestBuilder {
        private final String domain;
        private Integer period;
        private String xShopperId;

        private RenewDomainRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set period
         * @param period Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to &#x60;period&#x60; specified during original purchase (optional)
         * @return RenewDomainRequestBuilder
         */
        public RenewDomainRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set xShopperId
         * @param xShopperId Shopper for whom Domain is to be renewed. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return RenewDomainRequestBuilder
         */
        public RenewDomainRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for renewDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainRenew domainRenew = buildBodyParams();
            return renewDomainCall(domain, xShopperId, domainRenew, _callback);
        }

        private DomainRenew buildBodyParams() {
            DomainRenew domainRenew = new DomainRenew();
            domainRenew.period(this.period);
            return domainRenew;
        }

        /**
         * Execute renewDomain request
         * @return DomainPurchaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainPurchaseResponse execute() throws ApiException {
            DomainRenew domainRenew = buildBodyParams();
            ApiResponse<DomainPurchaseResponse> localVarResp = renewDomainWithHttpInfo(domain, xShopperId, domainRenew);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renewDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainPurchaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainPurchaseResponse> executeWithHttpInfo() throws ApiException {
            DomainRenew domainRenew = buildBodyParams();
            return renewDomainWithHttpInfo(domain, xShopperId, domainRenew);
        }

        /**
         * Execute renewDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainPurchaseResponse> _callback) throws ApiException {
            DomainRenew domainRenew = buildBodyParams();
            return renewDomainAsync(domain, xShopperId, domainRenew, _callback);
        }
    }

    /**
     * Renew the specified Domain
     * 
     * @param domain Domain to renew (required)
     * @return RenewDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public RenewDomainRequestBuilder renewDomain(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new RenewDomainRequestBuilder(domain);
    }
    private okhttp3.Call replaceDnsRecordsCall(String domain, List<DNSRecord> dnSRecord, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnSRecord;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/records"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDnsRecordsValidateBeforeCall(String domain, List<DNSRecord> dnSRecord, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling replaceDnsRecords(Async)");
        }

        // verify the required parameter 'dnSRecord' is set
        if (dnSRecord == null) {
            throw new ApiException("Missing the required parameter 'dnSRecord' when calling replaceDnsRecords(Async)");
        }

        return replaceDnsRecordsCall(domain, dnSRecord, xShopperId, _callback);

    }


    private ApiResponse<Void> replaceDnsRecordsWithHttpInfo(String domain, List<DNSRecord> dnSRecord, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = replaceDnsRecordsValidateBeforeCall(domain, dnSRecord, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceDnsRecordsAsync(String domain, List<DNSRecord> dnSRecord, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDnsRecordsValidateBeforeCall(domain, dnSRecord, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceDnsRecordsRequestBuilder {
        private final String domain;
        private String xShopperId;
        private List<DNSRecord> dnSRecord;

        private ReplaceDnsRecordsRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set dnSRecord
         * @param dnSRecord DNS Records to replace whatever currently exists (optional)
         * @return ReplaceDnsRecordsRequestBuilder
         */
        public ReplaceDnsRecordsRequestBuilder dnSRecord(List<DNSRecord> dnSRecord) {
            this.dnSRecord = dnSRecord;
            return this;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return ReplaceDnsRecordsRequestBuilder
         */
        public ReplaceDnsRecordsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for replaceDnsRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            return replaceDnsRecordsCall(domain, dnSRecord, xShopperId, _callback);
        }

        private List<DNSRecord> buildBodyParams() {
            return this.dnSRecord;
        }

        /**
         * Execute replaceDnsRecords request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            replaceDnsRecordsWithHttpInfo(domain, dnSRecord, xShopperId);
        }

        /**
         * Execute replaceDnsRecords request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            return replaceDnsRecordsWithHttpInfo(domain, dnSRecord, xShopperId);
        }

        /**
         * Execute replaceDnsRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<DNSRecord> dnSRecord = buildBodyParams();
            return replaceDnsRecordsAsync(domain, dnSRecord, xShopperId, _callback);
        }
    }

    /**
     * Replace all DNS Records for the specified Domain
     * 
     * @param domain Domain whose DNS Records are to be replaced (required)
     * @param dnSRecord DNS Records to replace whatever currently exists (required)
     * @return ReplaceDnsRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceDnsRecordsRequestBuilder replaceDnsRecords(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new ReplaceDnsRecordsRequestBuilder(domain);
    }
    private okhttp3.Call replaceDnsRecordsTypeCall(String domain, String type, List<DNSRecordCreateType> dnSRecordCreateType, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnSRecordCreateType;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/records/{type}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDnsRecordsTypeValidateBeforeCall(String domain, String type, List<DNSRecordCreateType> dnSRecordCreateType, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling replaceDnsRecordsType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling replaceDnsRecordsType(Async)");
        }

        // verify the required parameter 'dnSRecordCreateType' is set
        if (dnSRecordCreateType == null) {
            throw new ApiException("Missing the required parameter 'dnSRecordCreateType' when calling replaceDnsRecordsType(Async)");
        }

        return replaceDnsRecordsTypeCall(domain, type, dnSRecordCreateType, xShopperId, _callback);

    }


    private ApiResponse<Void> replaceDnsRecordsTypeWithHttpInfo(String domain, String type, List<DNSRecordCreateType> dnSRecordCreateType, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = replaceDnsRecordsTypeValidateBeforeCall(domain, type, dnSRecordCreateType, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceDnsRecordsTypeAsync(String domain, String type, List<DNSRecordCreateType> dnSRecordCreateType, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDnsRecordsTypeValidateBeforeCall(domain, type, dnSRecordCreateType, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceDnsRecordsTypeRequestBuilder {
        private final String domain;
        private final String type;
        private String xShopperId;
        private List<DNSRecordCreateType> dnSRecordCreateType;

        private ReplaceDnsRecordsTypeRequestBuilder(String domain, String type) {
            this.domain = domain;
            this.type = type;
        }

        /**
         * Set dnSRecordCreateType
         * @param dnSRecordCreateType DNS Records to replace whatever currently exists (optional)
         * @return ReplaceDnsRecordsTypeRequestBuilder
         */
        public ReplaceDnsRecordsTypeRequestBuilder dnSRecordCreateType(List<DNSRecordCreateType> dnSRecordCreateType) {
            this.dnSRecordCreateType = dnSRecordCreateType;
            return this;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return ReplaceDnsRecordsTypeRequestBuilder
         */
        public ReplaceDnsRecordsTypeRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for replaceDnsRecordsType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<DNSRecordCreateType> dnSRecordCreateType = buildBodyParams();
            return replaceDnsRecordsTypeCall(domain, type, dnSRecordCreateType, xShopperId, _callback);
        }

        private List<DNSRecordCreateType> buildBodyParams() {
            return this.dnSRecordCreateType;
        }

        /**
         * Execute replaceDnsRecordsType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<DNSRecordCreateType> dnSRecordCreateType = buildBodyParams();
            replaceDnsRecordsTypeWithHttpInfo(domain, type, dnSRecordCreateType, xShopperId);
        }

        /**
         * Execute replaceDnsRecordsType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<DNSRecordCreateType> dnSRecordCreateType = buildBodyParams();
            return replaceDnsRecordsTypeWithHttpInfo(domain, type, dnSRecordCreateType, xShopperId);
        }

        /**
         * Execute replaceDnsRecordsType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<DNSRecordCreateType> dnSRecordCreateType = buildBodyParams();
            return replaceDnsRecordsTypeAsync(domain, type, dnSRecordCreateType, xShopperId, _callback);
        }
    }

    /**
     * Replace all DNS Records for the specified Domain with the specified Type
     * 
     * @param domain Domain whose DNS Records are to be replaced (required)
     * @param type DNS Record Type for which DNS Records are to be replaced (required)
     * @param dnSRecordCreateType DNS Records to replace whatever currently exists (required)
     * @return ReplaceDnsRecordsTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceDnsRecordsTypeRequestBuilder replaceDnsRecordsType(String domain, String type) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new ReplaceDnsRecordsTypeRequestBuilder(domain, type);
    }
    private okhttp3.Call replaceDnsRecordsType_0Call(String domain, String type, String name, List<DNSRecordCreateTypeName> dnSRecordCreateTypeName, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnSRecordCreateTypeName;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/records/{type}/{name}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceDnsRecordsType_0ValidateBeforeCall(String domain, String type, String name, List<DNSRecordCreateTypeName> dnSRecordCreateTypeName, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling replaceDnsRecordsType_0(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling replaceDnsRecordsType_0(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling replaceDnsRecordsType_0(Async)");
        }

        // verify the required parameter 'dnSRecordCreateTypeName' is set
        if (dnSRecordCreateTypeName == null) {
            throw new ApiException("Missing the required parameter 'dnSRecordCreateTypeName' when calling replaceDnsRecordsType_0(Async)");
        }

        return replaceDnsRecordsType_0Call(domain, type, name, dnSRecordCreateTypeName, xShopperId, _callback);

    }


    private ApiResponse<Void> replaceDnsRecordsType_0WithHttpInfo(String domain, String type, String name, List<DNSRecordCreateTypeName> dnSRecordCreateTypeName, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = replaceDnsRecordsType_0ValidateBeforeCall(domain, type, name, dnSRecordCreateTypeName, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceDnsRecordsType_0Async(String domain, String type, String name, List<DNSRecordCreateTypeName> dnSRecordCreateTypeName, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceDnsRecordsType_0ValidateBeforeCall(domain, type, name, dnSRecordCreateTypeName, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceDnsRecordsType0RequestBuilder {
        private final String domain;
        private final String type;
        private final String name;
        private String xShopperId;
        private List<DNSRecordCreateTypeName> dnSRecordCreateTypeName;

        private ReplaceDnsRecordsType0RequestBuilder(String domain, String type, String name) {
            this.domain = domain;
            this.type = type;
            this.name = name;
        }

        /**
         * Set dnSRecordCreateTypeName
         * @param dnSRecordCreateTypeName DNS Records to replace whatever currently exists (optional)
         * @return ReplaceDnsRecordsType0RequestBuilder
         */
        public ReplaceDnsRecordsType0RequestBuilder dnSRecordCreateTypeName(List<DNSRecordCreateTypeName> dnSRecordCreateTypeName) {
            this.dnSRecordCreateTypeName = dnSRecordCreateTypeName;
            return this;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return ReplaceDnsRecordsType0RequestBuilder
         */
        public ReplaceDnsRecordsType0RequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for replaceDnsRecordsType_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<DNSRecordCreateTypeName> dnSRecordCreateTypeName = buildBodyParams();
            return replaceDnsRecordsType_0Call(domain, type, name, dnSRecordCreateTypeName, xShopperId, _callback);
        }

        private List<DNSRecordCreateTypeName> buildBodyParams() {
            return this.dnSRecordCreateTypeName;
        }

        /**
         * Execute replaceDnsRecordsType_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<DNSRecordCreateTypeName> dnSRecordCreateTypeName = buildBodyParams();
            replaceDnsRecordsType_0WithHttpInfo(domain, type, name, dnSRecordCreateTypeName, xShopperId);
        }

        /**
         * Execute replaceDnsRecordsType_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<DNSRecordCreateTypeName> dnSRecordCreateTypeName = buildBodyParams();
            return replaceDnsRecordsType_0WithHttpInfo(domain, type, name, dnSRecordCreateTypeName, xShopperId);
        }

        /**
         * Execute replaceDnsRecordsType_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<DNSRecordCreateTypeName> dnSRecordCreateTypeName = buildBodyParams();
            return replaceDnsRecordsType_0Async(domain, type, name, dnSRecordCreateTypeName, xShopperId, _callback);
        }
    }

    /**
     * Replace all DNS Records for the specified Domain with the specified Type and Name
     * 
     * @param domain Domain whose DNS Records are to be replaced (required)
     * @param type DNS Record Type for which DNS Records are to be replaced (required)
     * @param name DNS Record Name for which DNS Records are to be replaced (required)
     * @param dnSRecordCreateTypeName DNS Records to replace whatever currently exists (required)
     * @return ReplaceDnsRecordsType0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceDnsRecordsType0RequestBuilder replaceDnsRecordsType_0(String domain, String type, String name) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new ReplaceDnsRecordsType0RequestBuilder(domain, type, name);
    }
    private okhttp3.Call resendContactEmailVerificationCall(String domain, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/verifyRegistrantEmail"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendContactEmailVerificationValidateBeforeCall(String domain, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling resendContactEmailVerification(Async)");
        }

        return resendContactEmailVerificationCall(domain, xShopperId, _callback);

    }


    private ApiResponse<Void> resendContactEmailVerificationWithHttpInfo(String domain, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = resendContactEmailVerificationValidateBeforeCall(domain, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resendContactEmailVerificationAsync(String domain, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendContactEmailVerificationValidateBeforeCall(domain, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResendContactEmailVerificationRequestBuilder {
        private final String domain;
        private String xShopperId;

        private ResendContactEmailVerificationRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper for whom domain contact e-mail should be verified. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return ResendContactEmailVerificationRequestBuilder
         */
        public ResendContactEmailVerificationRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for resendContactEmailVerification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resendContactEmailVerificationCall(domain, xShopperId, _callback);
        }


        /**
         * Execute resendContactEmailVerification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resendContactEmailVerificationWithHttpInfo(domain, xShopperId);
        }

        /**
         * Execute resendContactEmailVerification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resendContactEmailVerificationWithHttpInfo(domain, xShopperId);
        }

        /**
         * Execute resendContactEmailVerification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resendContactEmailVerificationAsync(domain, xShopperId, _callback);
        }
    }

    /**
     * Re-send Contact E-mail Verification for specified Domain
     * 
     * @param domain Domain whose Contact E-mail should be verified. (required)
     * @return ResendContactEmailVerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ResendContactEmailVerificationRequestBuilder resendContactEmailVerification(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new ResendContactEmailVerificationRequestBuilder(domain);
    }
    private okhttp3.Call suggestAlternateDomainsCall(String xShopperId, String query, String country, String city, List<String> sources, List<String> tlds, Integer lengthMax, Integer lengthMin, Integer limit, Integer waitMs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/domains/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (sources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sources", sources));
        }

        if (tlds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tlds", tlds));
        }

        if (lengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lengthMax", lengthMax));
        }

        if (lengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lengthMin", lengthMin));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (waitMs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waitMs", waitMs));
        }

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestAlternateDomainsValidateBeforeCall(String xShopperId, String query, String country, String city, List<String> sources, List<String> tlds, Integer lengthMax, Integer lengthMin, Integer limit, Integer waitMs, final ApiCallback _callback) throws ApiException {
        return suggestAlternateDomainsCall(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs, _callback);

    }


    private ApiResponse<List<DomainSuggestion>> suggestAlternateDomainsWithHttpInfo(String xShopperId, String query, String country, String city, List<String> sources, List<String> tlds, Integer lengthMax, Integer lengthMin, Integer limit, Integer waitMs) throws ApiException {
        okhttp3.Call localVarCall = suggestAlternateDomainsValidateBeforeCall(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs, null);
        Type localVarReturnType = new TypeToken<List<DomainSuggestion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call suggestAlternateDomainsAsync(String xShopperId, String query, String country, String city, List<String> sources, List<String> tlds, Integer lengthMax, Integer lengthMin, Integer limit, Integer waitMs, final ApiCallback<List<DomainSuggestion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestAlternateDomainsValidateBeforeCall(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs, _callback);
        Type localVarReturnType = new TypeToken<List<DomainSuggestion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SuggestAlternateDomainsRequestBuilder {
        private String xShopperId;
        private String query;
        private String country;
        private String city;
        private List<String> sources;
        private List<String> tlds;
        private Integer lengthMax;
        private Integer lengthMin;
        private Integer limit;
        private Integer waitMs;

        private SuggestAlternateDomainsRequestBuilder() {
        }

        /**
         * Set xShopperId
         * @param xShopperId Shopper ID for which the suggestions are being generated (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Set query
         * @param query Domain name or set of keywords for which alternative domain names will be suggested (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set country
         * @param country Two-letter ISO country code to be used as a hint for target region&lt;br/&gt;&lt;br/&gt; NOTE: These are sample values, there are many &lt;a href&#x3D;\&quot;http://www.iso.org/iso/country_codes.htm\&quot;&gt;more&lt;/a&gt; (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set city
         * @param city Name of city to be used as a hint for target region (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set sources
         * @param sources Sources to be queried&lt;br/&gt;&lt;br/&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;CC_TLD&lt;/strong&gt; - Varies the TLD using Country Codes&lt;/li&gt; &lt;li&gt;&lt;strong&gt;EXTENSION&lt;/strong&gt; - Varies the TLD&lt;/li&gt; &lt;li&gt;&lt;strong&gt;KEYWORD_SPIN&lt;/strong&gt; - Identifies keywords and then rotates each one&lt;/li&gt; &lt;li&gt;&lt;strong&gt;PREMIUM&lt;/strong&gt; - Includes variations with premium prices&lt;/li&gt;&lt;/ul&gt; (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder sources(List<String> sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Set tlds
         * @param tlds Top-level domains to be included in suggestions&lt;br/&gt;&lt;br/&gt; NOTE: These are sample values, there are many &lt;a href&#x3D;\&quot;http://www.godaddy.com/tlds/gtld.aspx#domain_search_form\&quot;&gt;more&lt;/a&gt; (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder tlds(List<String> tlds) {
            this.tlds = tlds;
            return this;
        }
        
        /**
         * Set lengthMax
         * @param lengthMax Maximum length of second-level domain (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder lengthMax(Integer lengthMax) {
            this.lengthMax = lengthMax;
            return this;
        }
        
        /**
         * Set lengthMin
         * @param lengthMin Minimum length of second-level domain (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder lengthMin(Integer lengthMin) {
            this.lengthMin = lengthMin;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of suggestions to return (optional)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set waitMs
         * @param waitMs Maximum amount of time, in milliseconds, to wait for responses If elapses, return the results compiled up to that point (optional, default to 1000)
         * @return SuggestAlternateDomainsRequestBuilder
         */
        public SuggestAlternateDomainsRequestBuilder waitMs(Integer waitMs) {
            this.waitMs = waitMs;
            return this;
        }
        
        /**
         * Build call for suggestAlternateDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return suggestAlternateDomainsCall(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs, _callback);
        }


        /**
         * Execute suggestAlternateDomains request
         * @return List&lt;DomainSuggestion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DomainSuggestion> execute() throws ApiException {
            ApiResponse<List<DomainSuggestion>> localVarResp = suggestAlternateDomainsWithHttpInfo(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute suggestAlternateDomains request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DomainSuggestion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DomainSuggestion>> executeWithHttpInfo() throws ApiException {
            return suggestAlternateDomainsWithHttpInfo(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs);
        }

        /**
         * Execute suggestAlternateDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DomainSuggestion>> _callback) throws ApiException {
            return suggestAlternateDomainsAsync(xShopperId, query, country, city, sources, tlds, lengthMax, lengthMin, limit, waitMs, _callback);
        }
    }

    /**
     * Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper&#39;s purchase history
     * 
     * @return SuggestAlternateDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public SuggestAlternateDomainsRequestBuilder suggestAlternateDomains() throws IllegalArgumentException {
        return new SuggestAlternateDomainsRequestBuilder();
    }
    private okhttp3.Call updateDomainContactsCall(String domain, DomainContacts domainContacts, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainContacts;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}/contacts"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainContactsValidateBeforeCall(String domain, DomainContacts domainContacts, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateDomainContacts(Async)");
        }

        // verify the required parameter 'domainContacts' is set
        if (domainContacts == null) {
            throw new ApiException("Missing the required parameter 'domainContacts' when calling updateDomainContacts(Async)");
        }

        return updateDomainContactsCall(domain, domainContacts, xShopperId, _callback);

    }


    private ApiResponse<Void> updateDomainContactsWithHttpInfo(String domain, DomainContacts domainContacts, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = updateDomainContactsValidateBeforeCall(domain, domainContacts, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDomainContactsAsync(String domain, DomainContacts domainContacts, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainContactsValidateBeforeCall(domain, domainContacts, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDomainContactsRequestBuilder {
        private final Contact contactRegistrant;
        private final String domain;
        private Contact contactAdmin;
        private Contact contactBilling;
        private Contact contactTech;
        private String xShopperId;

        private UpdateDomainContactsRequestBuilder(Contact contactRegistrant, String domain) {
            this.contactRegistrant = contactRegistrant;
            this.domain = domain;
        }

        /**
         * Set contactAdmin
         * @param contactAdmin  (optional)
         * @return UpdateDomainContactsRequestBuilder
         */
        public UpdateDomainContactsRequestBuilder contactAdmin(Contact contactAdmin) {
            this.contactAdmin = contactAdmin;
            return this;
        }
        
        /**
         * Set contactBilling
         * @param contactBilling  (optional)
         * @return UpdateDomainContactsRequestBuilder
         */
        public UpdateDomainContactsRequestBuilder contactBilling(Contact contactBilling) {
            this.contactBilling = contactBilling;
            return this;
        }
        
        /**
         * Set contactTech
         * @param contactTech  (optional)
         * @return UpdateDomainContactsRequestBuilder
         */
        public UpdateDomainContactsRequestBuilder contactTech(Contact contactTech) {
            this.contactTech = contactTech;
            return this;
        }
        
        /**
         * Set xShopperId
         * @param xShopperId Shopper for whom domain contacts are to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return UpdateDomainContactsRequestBuilder
         */
        public UpdateDomainContactsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for updateDomainContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainContacts domainContacts = buildBodyParams();
            return updateDomainContactsCall(domain, domainContacts, xShopperId, _callback);
        }

        private DomainContacts buildBodyParams() {
            DomainContacts domainContacts = new DomainContacts();
            domainContacts.contactAdmin(this.contactAdmin);
            domainContacts.contactBilling(this.contactBilling);
            domainContacts.contactRegistrant(this.contactRegistrant);
            domainContacts.contactTech(this.contactTech);
            return domainContacts;
        }

        /**
         * Execute updateDomainContacts request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainContacts domainContacts = buildBodyParams();
            updateDomainContactsWithHttpInfo(domain, domainContacts, xShopperId);
        }

        /**
         * Execute updateDomainContacts request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainContacts domainContacts = buildBodyParams();
            return updateDomainContactsWithHttpInfo(domain, domainContacts, xShopperId);
        }

        /**
         * Execute updateDomainContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainContacts domainContacts = buildBodyParams();
            return updateDomainContactsAsync(domain, domainContacts, xShopperId, _callback);
        }
    }

    /**
     * Update domain
     * 
     * @param domain Domain whose Contacts are to be updated. (required)
     * @param domainContacts Changes to apply to existing Contacts (required)
     * @return UpdateDomainContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDomainContactsRequestBuilder updateDomainContacts(Contact contactRegistrant, String domain) throws IllegalArgumentException {
        if (contactRegistrant == null) throw new IllegalArgumentException("\"contactRegistrant\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new UpdateDomainContactsRequestBuilder(contactRegistrant, domain);
    }
    private okhttp3.Call updateDomainDetailsCall(String domain, DomainUpdate domainUpdate, String xShopperId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainUpdate;

        // create path and map variables
        String localVarPath = "/v1/domains/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xShopperId != null) {
            localVarHeaderParams.put("X-Shopper-Id", localVarApiClient.parameterToString(xShopperId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainDetailsValidateBeforeCall(String domain, DomainUpdate domainUpdate, String xShopperId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateDomainDetails(Async)");
        }

        // verify the required parameter 'domainUpdate' is set
        if (domainUpdate == null) {
            throw new ApiException("Missing the required parameter 'domainUpdate' when calling updateDomainDetails(Async)");
        }

        return updateDomainDetailsCall(domain, domainUpdate, xShopperId, _callback);

    }


    private ApiResponse<Void> updateDomainDetailsWithHttpInfo(String domain, DomainUpdate domainUpdate, String xShopperId) throws ApiException {
        okhttp3.Call localVarCall = updateDomainDetailsValidateBeforeCall(domain, domainUpdate, xShopperId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDomainDetailsAsync(String domain, DomainUpdate domainUpdate, String xShopperId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainDetailsValidateBeforeCall(domain, domainUpdate, xShopperId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDomainDetailsRequestBuilder {
        private final String domain;
        private ConsentDomainUpdate consent;
        private Boolean exposeWhois;
        private Boolean locked;
        private List<Object> nameServers;
        private Boolean renewAuto;
        private String subaccountId;
        private String xShopperId;

        private UpdateDomainDetailsRequestBuilder(String domain) {
            this.domain = domain;
        }

        /**
         * Set consent
         * @param consent  (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder consent(ConsentDomainUpdate consent) {
            this.consent = consent;
            return this;
        }
        
        /**
         * Set exposeWhois
         * @param exposeWhois Whether or not the domain contact details should be shown in the WHOIS (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder exposeWhois(Boolean exposeWhois) {
            this.exposeWhois = exposeWhois;
            return this;
        }
        
        /**
         * Set locked
         * @param locked Whether or not the domain should be locked to prevent transfers (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder locked(Boolean locked) {
            this.locked = locked;
            return this;
        }
        
        /**
         * Set nameServers
         * @param nameServers Fully-qualified domain names for Name Servers to associate with the domain (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder nameServers(List<Object> nameServers) {
            this.nameServers = nameServers;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto Whether or not the domain should be configured to automatically renew (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Set subaccountId
         * @param subaccountId Reseller subaccount shopperid who can manage the domain (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder subaccountId(String subaccountId) {
            this.subaccountId = subaccountId;
            return this;
        }
        
        /**
         * Set xShopperId
         * @param xShopperId Shopper for whom Domain is to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
         * @return UpdateDomainDetailsRequestBuilder
         */
        public UpdateDomainDetailsRequestBuilder xShopperId(String xShopperId) {
            this.xShopperId = xShopperId;
            return this;
        }
        
        /**
         * Build call for updateDomainDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainUpdate domainUpdate = buildBodyParams();
            return updateDomainDetailsCall(domain, domainUpdate, xShopperId, _callback);
        }

        private DomainUpdate buildBodyParams() {
            DomainUpdate domainUpdate = new DomainUpdate();
            domainUpdate.consent(this.consent);
            domainUpdate.exposeWhois(this.exposeWhois);
            domainUpdate.locked(this.locked);
            domainUpdate.nameServers(this.nameServers);
            domainUpdate.renewAuto(this.renewAuto);
            domainUpdate.subaccountId(this.subaccountId);
            return domainUpdate;
        }

        /**
         * Execute updateDomainDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainUpdate domainUpdate = buildBodyParams();
            updateDomainDetailsWithHttpInfo(domain, domainUpdate, xShopperId);
        }

        /**
         * Execute updateDomainDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainUpdate domainUpdate = buildBodyParams();
            return updateDomainDetailsWithHttpInfo(domain, domainUpdate, xShopperId);
        }

        /**
         * Execute updateDomainDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainUpdate domainUpdate = buildBodyParams();
            return updateDomainDetailsAsync(domain, domainUpdate, xShopperId, _callback);
        }
    }

    /**
     * Update details for the specified Domain
     * 
     * @param domain Domain whose details are to be updated (required)
     * @param domainUpdate Changes to apply to existing Domain (required)
     * @return UpdateDomainDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDomainDetailsRequestBuilder updateDomainDetails(String domain) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new UpdateDomainDetailsRequestBuilder(domain);
    }
    private okhttp3.Call validateDomainContactsCall(DomainsContactsBulk domainsContactsBulk, Integer xPrivateLabelId, String marketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainsContactsBulk;

        // create path and map variables
        String localVarPath = "/v1/domains/contacts/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketId", marketId));
        }

        if (xPrivateLabelId != null) {
            localVarHeaderParams.put("X-Private-Label-Id", localVarApiClient.parameterToString(xPrivateLabelId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateDomainContactsValidateBeforeCall(DomainsContactsBulk domainsContactsBulk, Integer xPrivateLabelId, String marketId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainsContactsBulk' is set
        if (domainsContactsBulk == null) {
            throw new ApiException("Missing the required parameter 'domainsContactsBulk' when calling validateDomainContacts(Async)");
        }

        return validateDomainContactsCall(domainsContactsBulk, xPrivateLabelId, marketId, _callback);

    }


    private ApiResponse<Void> validateDomainContactsWithHttpInfo(DomainsContactsBulk domainsContactsBulk, Integer xPrivateLabelId, String marketId) throws ApiException {
        okhttp3.Call localVarCall = validateDomainContactsValidateBeforeCall(domainsContactsBulk, xPrivateLabelId, marketId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call validateDomainContactsAsync(DomainsContactsBulk domainsContactsBulk, Integer xPrivateLabelId, String marketId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateDomainContactsValidateBeforeCall(domainsContactsBulk, xPrivateLabelId, marketId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ValidateDomainContactsRequestBuilder {
        private final List<String> domains;
        private Contact contactAdmin;
        private Contact contactBilling;
        private Contact contactPresence;
        private Contact contactRegistrant;
        private Contact contactTech;
        private String entityType;
        private Integer xPrivateLabelId;
        private String marketId;

        private ValidateDomainContactsRequestBuilder(List<String> domains) {
            this.domains = domains;
        }

        /**
         * Set contactAdmin
         * @param contactAdmin  (optional)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder contactAdmin(Contact contactAdmin) {
            this.contactAdmin = contactAdmin;
            return this;
        }
        
        /**
         * Set contactBilling
         * @param contactBilling  (optional)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder contactBilling(Contact contactBilling) {
            this.contactBilling = contactBilling;
            return this;
        }
        
        /**
         * Set contactPresence
         * @param contactPresence  (optional)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder contactPresence(Contact contactPresence) {
            this.contactPresence = contactPresence;
            return this;
        }
        
        /**
         * Set contactRegistrant
         * @param contactRegistrant  (optional)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder contactRegistrant(Contact contactRegistrant) {
            this.contactRegistrant = contactRegistrant;
            return this;
        }
        
        /**
         * Set contactTech
         * @param contactTech  (optional)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder contactTech(Contact contactTech) {
            this.contactTech = contactTech;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType Canadian Presence Requirement (CA) (optional)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set xPrivateLabelId
         * @param xPrivateLabelId PrivateLabelId to operate as, if different from JWT (optional, default to 1)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder xPrivateLabelId(Integer xPrivateLabelId) {
            this.xPrivateLabelId = xPrivateLabelId;
            return this;
        }
        
        /**
         * Set marketId
         * @param marketId MarketId in which the request is being made, and for which responses should be localized (optional, default to en-US)
         * @return ValidateDomainContactsRequestBuilder
         */
        public ValidateDomainContactsRequestBuilder marketId(String marketId) {
            this.marketId = marketId;
            return this;
        }
        
        /**
         * Build call for validateDomainContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainsContactsBulk domainsContactsBulk = buildBodyParams();
            return validateDomainContactsCall(domainsContactsBulk, xPrivateLabelId, marketId, _callback);
        }

        private DomainsContactsBulk buildBodyParams() {
            DomainsContactsBulk domainsContactsBulk = new DomainsContactsBulk();
            domainsContactsBulk.contactAdmin(this.contactAdmin);
            domainsContactsBulk.contactBilling(this.contactBilling);
            domainsContactsBulk.contactPresence(this.contactPresence);
            domainsContactsBulk.contactRegistrant(this.contactRegistrant);
            domainsContactsBulk.contactTech(this.contactTech);
            domainsContactsBulk.domains(this.domains);
            if (this.entityType != null)
            domainsContactsBulk.entityType(DomainsContactsBulk.EntityTypeEnum.fromValue(this.entityType));
            return domainsContactsBulk;
        }

        /**
         * Execute validateDomainContacts request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainsContactsBulk domainsContactsBulk = buildBodyParams();
            validateDomainContactsWithHttpInfo(domainsContactsBulk, xPrivateLabelId, marketId);
        }

        /**
         * Execute validateDomainContacts request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainsContactsBulk domainsContactsBulk = buildBodyParams();
            return validateDomainContactsWithHttpInfo(domainsContactsBulk, xPrivateLabelId, marketId);
        }

        /**
         * Execute validateDomainContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainsContactsBulk domainsContactsBulk = buildBodyParams();
            return validateDomainContactsAsync(domainsContactsBulk, xPrivateLabelId, marketId, _callback);
        }
    }

    /**
     * Validate the request body using the Domain Contact Validation Schema for specified domains.
     * All contacts specified in request will be validated against all domains specifed in \&quot;domains\&quot;. As an alternative, you can also pass in tlds, with the exception of &#x60;uk&#x60;, which requires full domain names
     * @param domainsContactsBulk An instance document expected for domains contacts validation (required)
     * @return ValidateDomainContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ValidateDomainContactsRequestBuilder validateDomainContacts(List<String> domains) throws IllegalArgumentException {
        if (domains == null) throw new IllegalArgumentException("\"domains\" is required but got null");
        return new ValidateDomainContactsRequestBuilder(domains);
    }
    private okhttp3.Call validateDomainPurchaseCall(DomainPurchase domainPurchase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainPurchase;

        // create path and map variables
        String localVarPath = "/v1/domains/purchase/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/javascript",
            "application/xml",
            "text/javascript",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateDomainPurchaseValidateBeforeCall(DomainPurchase domainPurchase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainPurchase' is set
        if (domainPurchase == null) {
            throw new ApiException("Missing the required parameter 'domainPurchase' when calling validateDomainPurchase(Async)");
        }

        return validateDomainPurchaseCall(domainPurchase, _callback);

    }


    private ApiResponse<Void> validateDomainPurchaseWithHttpInfo(DomainPurchase domainPurchase) throws ApiException {
        okhttp3.Call localVarCall = validateDomainPurchaseValidateBeforeCall(domainPurchase, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call validateDomainPurchaseAsync(DomainPurchase domainPurchase, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateDomainPurchaseValidateBeforeCall(domainPurchase, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ValidateDomainPurchaseRequestBuilder {
        private final Consent consent;
        private final String domain;
        private Contact contactAdmin;
        private Contact contactBilling;
        private Contact contactRegistrant;
        private Contact contactTech;
        private List<String> nameServers;
        private Integer period;
        private Boolean privacy;
        private Boolean renewAuto;

        private ValidateDomainPurchaseRequestBuilder(Consent consent, String domain) {
            this.consent = consent;
            this.domain = domain;
        }

        /**
         * Set contactAdmin
         * @param contactAdmin  (optional)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder contactAdmin(Contact contactAdmin) {
            this.contactAdmin = contactAdmin;
            return this;
        }
        
        /**
         * Set contactBilling
         * @param contactBilling  (optional)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder contactBilling(Contact contactBilling) {
            this.contactBilling = contactBilling;
            return this;
        }
        
        /**
         * Set contactRegistrant
         * @param contactRegistrant  (optional)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder contactRegistrant(Contact contactRegistrant) {
            this.contactRegistrant = contactRegistrant;
            return this;
        }
        
        /**
         * Set contactTech
         * @param contactTech  (optional)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder contactTech(Contact contactTech) {
            this.contactTech = contactTech;
            return this;
        }
        
        /**
         * Set nameServers
         * @param nameServers  (optional)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder nameServers(List<String> nameServers) {
            this.nameServers = nameServers;
            return this;
        }
        
        /**
         * Set period
         * @param period  (optional, default to 1)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder period(Integer period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional, default to false)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder privacy(Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set renewAuto
         * @param renewAuto  (optional, default to true)
         * @return ValidateDomainPurchaseRequestBuilder
         */
        public ValidateDomainPurchaseRequestBuilder renewAuto(Boolean renewAuto) {
            this.renewAuto = renewAuto;
            return this;
        }
        
        /**
         * Build call for validateDomainPurchase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            return validateDomainPurchaseCall(domainPurchase, _callback);
        }

        private DomainPurchase buildBodyParams() {
            DomainPurchase domainPurchase = new DomainPurchase();
            domainPurchase.consent(this.consent);
            domainPurchase.contactAdmin(this.contactAdmin);
            domainPurchase.contactBilling(this.contactBilling);
            domainPurchase.contactRegistrant(this.contactRegistrant);
            domainPurchase.contactTech(this.contactTech);
            domainPurchase.domain(this.domain);
            domainPurchase.nameServers(this.nameServers);
            domainPurchase.period(this.period);
            domainPurchase.privacy(this.privacy);
            domainPurchase.renewAuto(this.renewAuto);
            return domainPurchase;
        }

        /**
         * Execute validateDomainPurchase request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            validateDomainPurchaseWithHttpInfo(domainPurchase);
        }

        /**
         * Execute validateDomainPurchase request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            return validateDomainPurchaseWithHttpInfo(domainPurchase);
        }

        /**
         * Execute validateDomainPurchase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DomainPurchase domainPurchase = buildBodyParams();
            return validateDomainPurchaseAsync(domainPurchase, _callback);
        }
    }

    /**
     * Validate the request body using the Domain Purchase Schema for the specified TLD
     * 
     * @param domainPurchase An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @return ValidateDomainPurchaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ValidateDomainPurchaseRequestBuilder validateDomainPurchase(Consent consent, String domain) throws IllegalArgumentException {
        if (consent == null) throw new IllegalArgumentException("\"consent\" is required but got null");
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        return new ValidateDomainPurchaseRequestBuilder(consent, domain);
    }
}
