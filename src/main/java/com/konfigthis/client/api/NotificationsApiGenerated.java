/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DomainNotification;
import com.konfigthis.client.model.JsonSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NotificationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acknowledgeDomainNotificationCall(String customerId, String notificationId, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/notifications/{notificationId}/acknowledge"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acknowledgeDomainNotificationValidateBeforeCall(String customerId, String notificationId, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling acknowledgeDomainNotification(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling acknowledgeDomainNotification(Async)");
        }

        return acknowledgeDomainNotificationCall(customerId, notificationId, xRequestId, _callback);

    }


    private ApiResponse<Void> acknowledgeDomainNotificationWithHttpInfo(String customerId, String notificationId, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = acknowledgeDomainNotificationValidateBeforeCall(customerId, notificationId, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call acknowledgeDomainNotificationAsync(String customerId, String notificationId, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acknowledgeDomainNotificationValidateBeforeCall(customerId, notificationId, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AcknowledgeDomainNotificationRequestBuilder {
        private final String customerId;
        private final String notificationId;
        private String xRequestId;

        private AcknowledgeDomainNotificationRequestBuilder(String customerId, String notificationId) {
            this.customerId = customerId;
            this.notificationId = notificationId;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return AcknowledgeDomainNotificationRequestBuilder
         */
        public AcknowledgeDomainNotificationRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for acknowledgeDomainNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Message acknowledged </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return acknowledgeDomainNotificationCall(customerId, notificationId, xRequestId, _callback);
        }


        /**
         * Execute acknowledgeDomainNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Message acknowledged </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            acknowledgeDomainNotificationWithHttpInfo(customerId, notificationId, xRequestId);
        }

        /**
         * Execute acknowledgeDomainNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Message acknowledged </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return acknowledgeDomainNotificationWithHttpInfo(customerId, notificationId, xRequestId);
        }

        /**
         * Execute acknowledgeDomainNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Message acknowledged </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return acknowledgeDomainNotificationAsync(customerId, notificationId, xRequestId, _callback);
        }
    }

    /**
     * Acknowledge a domain notification
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param notificationId The notification ID to acknowledge (required)
     * @return AcknowledgeDomainNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Message acknowledged </td><td>  -  </td></tr>
     </table>
     */
    public AcknowledgeDomainNotificationRequestBuilder acknowledgeDomainNotification(String customerId, String notificationId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (notificationId == null) throw new IllegalArgumentException("\"notificationId\" is required but got null");
            

        return new AcknowledgeDomainNotificationRequestBuilder(customerId, notificationId);
    }
    private okhttp3.Call getNextDomainCall(String customerId, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/notifications"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextDomainValidateBeforeCall(String customerId, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getNextDomain(Async)");
        }

        return getNextDomainCall(customerId, xRequestId, _callback);

    }


    private ApiResponse<DomainNotification> getNextDomainWithHttpInfo(String customerId, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = getNextDomainValidateBeforeCall(customerId, xRequestId, null);
        Type localVarReturnType = new TypeToken<DomainNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNextDomainAsync(String customerId, String xRequestId, final ApiCallback<DomainNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextDomainValidateBeforeCall(customerId, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<DomainNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNextDomainRequestBuilder {
        private final String customerId;
        private String xRequestId;

        private GetNextDomainRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return GetNextDomainRequestBuilder
         */
        public GetNextDomainRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for getNextDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNextDomainCall(customerId, xRequestId, _callback);
        }


        /**
         * Execute getNextDomain request
         * @return DomainNotification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public DomainNotification execute() throws ApiException {
            ApiResponse<DomainNotification> localVarResp = getNextDomainWithHttpInfo(customerId, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNextDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainNotification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainNotification> executeWithHttpInfo() throws ApiException {
            return getNextDomainWithHttpInfo(customerId, xRequestId);
        }

        /**
         * Execute getNextDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainNotification> _callback) throws ApiException {
            return getNextDomainAsync(customerId, xRequestId, _callback);
        }
    }

    /**
     * Retrieve the next domain notification
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @return GetNextDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetNextDomainRequestBuilder getNextDomain(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetNextDomainRequestBuilder(customerId);
    }
    private okhttp3.Call getSchemaCall(String customerId, String type, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/notifications/schemas/{type}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaValidateBeforeCall(String customerId, String type, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSchema(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getSchema(Async)");
        }

        return getSchemaCall(customerId, type, xRequestId, _callback);

    }


    private ApiResponse<JsonSchema> getSchemaWithHttpInfo(String customerId, String type, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(customerId, type, xRequestId, null);
        Type localVarReturnType = new TypeToken<JsonSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemaAsync(String customerId, String type, String xRequestId, final ApiCallback<JsonSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(customerId, type, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<JsonSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchemaRequestBuilder {
        private final String customerId;
        private final String type;
        private String xRequestId;

        private GetSchemaRequestBuilder(String customerId, String type) {
            this.customerId = customerId;
            this.type = type;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return GetSchemaRequestBuilder
         */
        public GetSchemaRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for getSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemaCall(customerId, type, xRequestId, _callback);
        }


        /**
         * Execute getSchema request
         * @return JsonSchema
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public JsonSchema execute() throws ApiException {
            ApiResponse<JsonSchema> localVarResp = getSchemaWithHttpInfo(customerId, type, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSchema request with HTTP info returned
         * @return ApiResponse&lt;JsonSchema&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonSchema> executeWithHttpInfo() throws ApiException {
            return getSchemaWithHttpInfo(customerId, type, xRequestId);
        }

        /**
         * Execute getSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonSchema> _callback) throws ApiException {
            return getSchemaAsync(customerId, type, xRequestId, _callback);
        }
    }

    /**
     * Retrieve the schema for the notification data for the specified notification type
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param type The notification type whose schema should be retrieved (required)
     * @return GetSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemaRequestBuilder getSchema(String customerId, String type) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetSchemaRequestBuilder(customerId, type);
    }
    private okhttp3.Call listOptedInTypesCall(String customerId, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/notifications/optIn"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOptedInTypesValidateBeforeCall(String customerId, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling listOptedInTypes(Async)");
        }

        return listOptedInTypesCall(customerId, xRequestId, _callback);

    }


    private ApiResponse<List<DomainNotification>> listOptedInTypesWithHttpInfo(String customerId, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = listOptedInTypesValidateBeforeCall(customerId, xRequestId, null);
        Type localVarReturnType = new TypeToken<List<DomainNotification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOptedInTypesAsync(String customerId, String xRequestId, final ApiCallback<List<DomainNotification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOptedInTypesValidateBeforeCall(customerId, xRequestId, _callback);
        Type localVarReturnType = new TypeToken<List<DomainNotification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOptedInTypesRequestBuilder {
        private final String customerId;
        private String xRequestId;

        private ListOptedInTypesRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return ListOptedInTypesRequestBuilder
         */
        public ListOptedInTypesRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for listOptedInTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOptedInTypesCall(customerId, xRequestId, _callback);
        }


        /**
         * Execute listOptedInTypes request
         * @return List&lt;DomainNotification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public List<DomainNotification> execute() throws ApiException {
            ApiResponse<List<DomainNotification>> localVarResp = listOptedInTypesWithHttpInfo(customerId, xRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOptedInTypes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DomainNotification&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DomainNotification>> executeWithHttpInfo() throws ApiException {
            return listOptedInTypesWithHttpInfo(customerId, xRequestId);
        }

        /**
         * Execute listOptedInTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DomainNotification>> _callback) throws ApiException {
            return listOptedInTypesAsync(customerId, xRequestId, _callback);
        }
    }

    /**
     * Retrieve a list of notification types that are opted in
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @return ListOptedInTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful </td><td>  -  </td></tr>
     </table>
     */
    public ListOptedInTypesRequestBuilder listOptedInTypes(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new ListOptedInTypesRequestBuilder(customerId);
    }
    private okhttp3.Call optInNotificationsCall(String customerId, List<String> types, String xRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customers/{customerId}/domains/notifications/optIn"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "types", types));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSecret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optInNotificationsValidateBeforeCall(String customerId, List<String> types, String xRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling optInNotifications(Async)");
        }

        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling optInNotifications(Async)");
        }

        return optInNotificationsCall(customerId, types, xRequestId, _callback);

    }


    private ApiResponse<Void> optInNotificationsWithHttpInfo(String customerId, List<String> types, String xRequestId) throws ApiException {
        okhttp3.Call localVarCall = optInNotificationsValidateBeforeCall(customerId, types, xRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call optInNotificationsAsync(String customerId, List<String> types, String xRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optInNotificationsValidateBeforeCall(customerId, types, xRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class OptInNotificationsRequestBuilder {
        private final String customerId;
        private final List<String> types;
        private String xRequestId;

        private OptInNotificationsRequestBuilder(String customerId, List<String> types) {
            this.customerId = customerId;
            this.types = types;
        }

        /**
         * Set xRequestId
         * @param xRequestId A client provided identifier for tracking this request. (optional)
         * @return OptInNotificationsRequestBuilder
         */
        public OptInNotificationsRequestBuilder xRequestId(String xRequestId) {
            this.xRequestId = xRequestId;
            return this;
        }
        
        /**
         * Build call for optInNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return optInNotificationsCall(customerId, types, xRequestId, _callback);
        }


        /**
         * Execute optInNotifications request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command successful </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            optInNotificationsWithHttpInfo(customerId, types, xRequestId);
        }

        /**
         * Execute optInNotifications request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return optInNotificationsWithHttpInfo(customerId, types, xRequestId);
        }

        /**
         * Execute optInNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Command successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return optInNotificationsAsync(customerId, types, xRequestId, _callback);
        }
    }

    /**
     * Opt in to recieve notifications for the submitted notification types
     * 
     * @param customerId The Customer identifier&lt;br/&gt; Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you&#39;re operating on behalf of; otherwise use your shopper id. (required)
     * @param types The notification types that should be opted in (required)
     * @return OptInNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Command successful </td><td>  -  </td></tr>
     </table>
     */
    public OptInNotificationsRequestBuilder optInNotifications(String customerId, List<String> types) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (types == null) throw new IllegalArgumentException("\"types\" is required but got null");
        return new OptInNotificationsRequestBuilder(customerId, types);
    }
}
