/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MaintenanceSystem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MaintenanceDetail
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MaintenanceDetail {
  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ENDS_AT = "endsAt";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private String endsAt;

  /**
   * The environment on which the maintenance will be performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;OTE&lt;/strong&gt; - The Operational Testing Environment.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PRODUCTION&lt;/strong&gt; - The Live Production Environment.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(EnvironmentEnum.Adapter.class)
 public enum EnvironmentEnum {
    OTE("OTE"),
    
    PRODUCTION("PRODUCTION");

    private String value;

    EnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentEnum fromValue(String value) {
      for (EnvironmentEnum b : EnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private EnvironmentEnum environment;

  public static final String SERIALIZED_NAME_MAINTENANCE_ID = "maintenanceId";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_ID)
  private String maintenanceId;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  /**
   * The reason for the maintenance being performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EMERGENCY&lt;/strong&gt; - Unexpected Emergency maintenance.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PLANNED&lt;/strong&gt; - Planned system maintenance.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
 public enum ReasonEnum {
    EMERGENCY("EMERGENCY"),
    
    PLANNED("PLANNED");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public static final String SERIALIZED_NAME_STARTS_AT = "startsAt";
  @SerializedName(SERIALIZED_NAME_STARTS_AT)
  private String startsAt;

  /**
   * The status of maintenance&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACTIVE&lt;/strong&gt; - The upcoming maintenance is active.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - The upcoming maintenance has been cancelled.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SYSTEMS = "systems";
  @SerializedName(SERIALIZED_NAME_SYSTEMS)
  private List<MaintenanceSystem> systems = null;

  public static final String SERIALIZED_NAME_TLDS = "tlds";
  @SerializedName(SERIALIZED_NAME_TLDS)
  private List<String> tlds = null;

  /**
   * The type of maintenance being performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;API&lt;/strong&gt; - Programmatic Api components.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REGISTRY&lt;/strong&gt; - The underlying Registry providing the tld(s).&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UI&lt;/strong&gt; - User Interface components.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    API("API"),
    
    REGISTRY("REGISTRY"),
    
    UI("UI");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public MaintenanceDetail() {
  }

  public MaintenanceDetail summary(String summary) {
    
    
    
    
    this.summary = summary;
    return this;
  }

   /**
   * A brief description of what is being performed
   * @return summary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A brief description of what is being performed")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    
    
    
    this.summary = summary;
  }


  public MaintenanceDetail createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date and time (UTC) when this maintenance was created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time (UTC) when this maintenance was created")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public MaintenanceDetail endsAt(String endsAt) {
    
    
    
    
    this.endsAt = endsAt;
    return this;
  }

   /**
   * Date and time (UTC) when this maintenance will complete
   * @return endsAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time (UTC) when this maintenance will complete")

  public String getEndsAt() {
    return endsAt;
  }


  public void setEndsAt(String endsAt) {
    
    
    
    this.endsAt = endsAt;
  }


  public MaintenanceDetail environment(EnvironmentEnum environment) {
    
    
    
    
    this.environment = environment;
    return this;
  }

   /**
   * The environment on which the maintenance will be performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;OTE&lt;/strong&gt; - The Operational Testing Environment.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PRODUCTION&lt;/strong&gt; - The Live Production Environment.&lt;/li&gt;&lt;/ul&gt;
   * @return environment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The environment on which the maintenance will be performed<br/><ul><li><strong style='margin-left: 12px;'>OTE</strong> - The Operational Testing Environment.</li><li><strong style='margin-left: 12px;'>PRODUCTION</strong> - The Live Production Environment.</li></ul>")

  public EnvironmentEnum getEnvironment() {
    return environment;
  }


  public void setEnvironment(EnvironmentEnum environment) {
    
    
    
    this.environment = environment;
  }


  public MaintenanceDetail maintenanceId(String maintenanceId) {
    
    
    
    
    this.maintenanceId = maintenanceId;
    return this;
  }

   /**
   * The identifier for the system maintenance
   * @return maintenanceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The identifier for the system maintenance")

  public String getMaintenanceId() {
    return maintenanceId;
  }


  public void setMaintenanceId(String maintenanceId) {
    
    
    
    this.maintenanceId = maintenanceId;
  }


  public MaintenanceDetail modifiedAt(String modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Date and time (UTC) when this maintenance was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time (UTC) when this maintenance was last modified")

  public String getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(String modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public MaintenanceDetail reason(ReasonEnum reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * The reason for the maintenance being performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EMERGENCY&lt;/strong&gt; - Unexpected Emergency maintenance.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PLANNED&lt;/strong&gt; - Planned system maintenance.&lt;/li&gt;&lt;/ul&gt;
   * @return reason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason for the maintenance being performed<br/><ul><li><strong style='margin-left: 12px;'>EMERGENCY</strong> - Unexpected Emergency maintenance.</li><li><strong style='margin-left: 12px;'>PLANNED</strong> - Planned system maintenance.</li></ul>")

  public ReasonEnum getReason() {
    return reason;
  }


  public void setReason(ReasonEnum reason) {
    
    
    
    this.reason = reason;
  }


  public MaintenanceDetail startsAt(String startsAt) {
    
    
    
    
    this.startsAt = startsAt;
    return this;
  }

   /**
   * Date and time (UTC) when this maintenance will start
   * @return startsAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time (UTC) when this maintenance will start")

  public String getStartsAt() {
    return startsAt;
  }


  public void setStartsAt(String startsAt) {
    
    
    
    this.startsAt = startsAt;
  }


  public MaintenanceDetail status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of maintenance&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACTIVE&lt;/strong&gt; - The upcoming maintenance is active.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - The upcoming maintenance has been cancelled.&lt;/li&gt;&lt;/ul&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of maintenance<br/><ul><li><strong style='margin-left: 12px;'>ACTIVE</strong> - The upcoming maintenance is active.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - The upcoming maintenance has been cancelled.</li></ul>")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public MaintenanceDetail systems(List<MaintenanceSystem> systems) {
    
    
    
    
    this.systems = systems;
    return this;
  }

  public MaintenanceDetail addSystemsItem(MaintenanceSystem systemsItem) {
    if (this.systems == null) {
      this.systems = new ArrayList<>();
    }
    this.systems.add(systemsItem);
    return this;
  }

   /**
   * List of systems that are impacted by the maintenance.
   * @return systems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of systems that are impacted by the maintenance.")

  public List<MaintenanceSystem> getSystems() {
    return systems;
  }


  public void setSystems(List<MaintenanceSystem> systems) {
    
    
    
    this.systems = systems;
  }


  public MaintenanceDetail tlds(List<String> tlds) {
    
    
    
    
    this.tlds = tlds;
    return this;
  }

  public MaintenanceDetail addTldsItem(String tldsItem) {
    if (this.tlds == null) {
      this.tlds = new ArrayList<>();
    }
    this.tlds.add(tldsItem);
    return this;
  }

   /**
   * List of tlds that are in maintenance.  Generally only applies when &#x60;type&#x60; is REGISTRY
   * @return tlds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tlds that are in maintenance.  Generally only applies when `type` is REGISTRY")

  public List<String> getTlds() {
    return tlds;
  }


  public void setTlds(List<String> tlds) {
    
    
    
    this.tlds = tlds;
  }


  public MaintenanceDetail type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of maintenance being performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;API&lt;/strong&gt; - Programmatic Api components.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REGISTRY&lt;/strong&gt; - The underlying Registry providing the tld(s).&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UI&lt;/strong&gt; - User Interface components.&lt;/li&gt;&lt;/ul&gt;
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of maintenance being performed<br/><ul><li><strong style='margin-left: 12px;'>API</strong> - Programmatic Api components.</li><li><strong style='margin-left: 12px;'>REGISTRY</strong> - The underlying Registry providing the tld(s).</li><li><strong style='margin-left: 12px;'>UI</strong> - User Interface components.</li></ul>")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceDetail maintenanceDetail = (MaintenanceDetail) o;
    return Objects.equals(this.summary, maintenanceDetail.summary) &&
        Objects.equals(this.createdAt, maintenanceDetail.createdAt) &&
        Objects.equals(this.endsAt, maintenanceDetail.endsAt) &&
        Objects.equals(this.environment, maintenanceDetail.environment) &&
        Objects.equals(this.maintenanceId, maintenanceDetail.maintenanceId) &&
        Objects.equals(this.modifiedAt, maintenanceDetail.modifiedAt) &&
        Objects.equals(this.reason, maintenanceDetail.reason) &&
        Objects.equals(this.startsAt, maintenanceDetail.startsAt) &&
        Objects.equals(this.status, maintenanceDetail.status) &&
        Objects.equals(this.systems, maintenanceDetail.systems) &&
        Objects.equals(this.tlds, maintenanceDetail.tlds) &&
        Objects.equals(this.type, maintenanceDetail.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summary, createdAt, endsAt, environment, maintenanceId, modifiedAt, reason, startsAt, status, systems, tlds, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceDetail {\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    maintenanceId: ").append(toIndentedString(maintenanceId)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    startsAt: ").append(toIndentedString(startsAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    systems: ").append(toIndentedString(systems)).append("\n");
    sb.append("    tlds: ").append(toIndentedString(tlds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("summary");
    openapiFields.add("createdAt");
    openapiFields.add("endsAt");
    openapiFields.add("environment");
    openapiFields.add("maintenanceId");
    openapiFields.add("modifiedAt");
    openapiFields.add("reason");
    openapiFields.add("startsAt");
    openapiFields.add("status");
    openapiFields.add("systems");
    openapiFields.add("tlds");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("endsAt");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("maintenanceId");
    openapiRequiredFields.add("modifiedAt");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("startsAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MaintenanceDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MaintenanceDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaintenanceDetail is not found in the empty JSON string", MaintenanceDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MaintenanceDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaintenanceDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaintenanceDetail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("endsAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endsAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endsAt").toString()));
      }
      if (!jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if (!jsonObj.get("maintenanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintenanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintenanceId").toString()));
      }
      if (!jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("startsAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startsAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startsAt").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("systems") != null && !jsonObj.get("systems").isJsonNull()) {
        JsonArray jsonArraysystems = jsonObj.getAsJsonArray("systems");
        if (jsonArraysystems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systems` to be an array in the JSON string but got `%s`", jsonObj.get("systems").toString()));
          }

          // validate the optional field `systems` (array)
          for (int i = 0; i < jsonArraysystems.size(); i++) {
            MaintenanceSystem.validateJsonObject(jsonArraysystems.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tlds") != null && !jsonObj.get("tlds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlds` to be an array in the JSON string but got `%s`", jsonObj.get("tlds").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaintenanceDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaintenanceDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaintenanceDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaintenanceDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<MaintenanceDetail>() {
           @Override
           public void write(JsonWriter out, MaintenanceDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaintenanceDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaintenanceDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaintenanceDetail
  * @throws IOException if the JSON string is invalid with respect to MaintenanceDetail
  */
  public static MaintenanceDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaintenanceDetail.class);
  }

 /**
  * Convert an instance of MaintenanceDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

