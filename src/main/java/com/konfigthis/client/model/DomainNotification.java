/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainNotification
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainNotification {
  public static final String SERIALIZED_NAME_ADDED_AT = "addedAt";
  @SerializedName(SERIALIZED_NAME_ADDED_AT)
  private String addedAt = "";

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notificationId";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
  private String notificationId = "";

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource = "";

  /**
   * The type of resource the notification relates to
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
 public enum ResourceTypeEnum {
    CONTACT("CONTACT"),
    
    DOMAIN("DOMAIN"),
    
    HOST("HOST");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  /**
   * The resulting status of the action.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    AWAITING("AWAITING"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED"),
    
    PENDING("PENDING"),
    
    SUCCESS("SUCCESS");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The type of action the notification relates to
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    AUTH_CODE_PURCHASE("AUTH_CODE_PURCHASE"),
    
    AUTH_CODE_REGENERATE("AUTH_CODE_REGENERATE"),
    
    AUTO_RENEWAL("AUTO_RENEWAL"),
    
    BACKORDER("BACKORDER"),
    
    BACKORDER_PURCHASE("BACKORDER_PURCHASE"),
    
    BACKORDER_DELETE("BACKORDER_DELETE"),
    
    BACKORDER_UPDATE("BACKORDER_UPDATE"),
    
    CONTACT_CREATE("CONTACT_CREATE"),
    
    CONTACT_DELETE("CONTACT_DELETE"),
    
    CONTACT_UPDATE("CONTACT_UPDATE"),
    
    DNS_VERIFICATION("DNS_VERIFICATION"),
    
    DNSSEC_CREATE("DNSSEC_CREATE"),
    
    DNSSEC_DELETE("DNSSEC_DELETE"),
    
    DOMAIN_DELETE("DOMAIN_DELETE"),
    
    DOMAIN_UPDATE("DOMAIN_UPDATE"),
    
    DOMAIN_UPDATE_CONTACTS("DOMAIN_UPDATE_CONTACTS"),
    
    DOMAIN_UPDATE_NAME_SERVERS("DOMAIN_UPDATE_NAME_SERVERS"),
    
    EXPIRY("EXPIRY"),
    
    HOST_CREATE("HOST_CREATE"),
    
    HOST_DELETE("HOST_DELETE"),
    
    ICANN_VERIFICATION("ICANN_VERIFICATION"),
    
    MIGRATE("MIGRATE"),
    
    MIGRATE_IN("MIGRATE_IN"),
    
    PREMIUM("PREMIUM"),
    
    PRIVACY_PURCHASE("PRIVACY_PURCHASE"),
    
    PRIVACY_DELETE("PRIVACY_DELETE"),
    
    REDEEM("REDEEM"),
    
    REGISTER("REGISTER"),
    
    RENEW("RENEW"),
    
    RENEW_UNDO("RENEW_UNDO"),
    
    TRADE("TRADE"),
    
    TRADE_CANCEL("TRADE_CANCEL"),
    
    TRADE_PURCHASE("TRADE_PURCHASE"),
    
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE("TRADE_PURCHASE_AUTH_TEXT_MESSAGE"),
    
    TRADE_RESEND_AUTH_EMAIL("TRADE_RESEND_AUTH_EMAIL"),
    
    TRANSFER("TRANSFER"),
    
    TRANSFER_IN("TRANSFER_IN"),
    
    TRANSFER_IN_ACCEPT("TRANSFER_IN_ACCEPT"),
    
    TRANSFER_IN_CANCEL("TRANSFER_IN_CANCEL"),
    
    TRANSFER_IN_RESTART("TRANSFER_IN_RESTART"),
    
    TRANSFER_IN_RETRY("TRANSFER_IN_RETRY"),
    
    TRANSFER_OUT("TRANSFER_OUT"),
    
    TRANSFER_OUT_ACCEPT("TRANSFER_OUT_ACCEPT"),
    
    TRANSFER_OUT_REJECT("TRANSFER_OUT_REJECT"),
    
    TRANSFER_OUT_REQUESTED("TRANSFER_OUT_REQUESTED"),
    
    TRANSIT("TRANSIT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DomainNotification() {
  }

  public DomainNotification addedAt(String addedAt) {
    
    
    
    
    this.addedAt = addedAt;
    return this;
  }

   /**
   * The date the notification was added
   * @return addedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The date the notification was added")

  public String getAddedAt() {
    return addedAt;
  }


  public void setAddedAt(String addedAt) {
    
    
    
    this.addedAt = addedAt;
  }


  public DomainNotification metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * The notification data for the given type as specifed by GET /v2/customers/{customerId}/domains/notifications/schema
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "The notification data for the given type as specifed by GET /v2/customers/{customerId}/domains/notifications/schema")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public DomainNotification notificationId(String notificationId) {
    
    
    
    
    this.notificationId = notificationId;
    return this;
  }

   /**
   * The notification ID to be used in POST /v2/customers/{customerId}/domains/notifications to acknowledge the notification
   * @return notificationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The notification ID to be used in POST /v2/customers/{customerId}/domains/notifications to acknowledge the notification")

  public String getNotificationId() {
    return notificationId;
  }


  public void setNotificationId(String notificationId) {
    
    
    
    this.notificationId = notificationId;
  }


  public DomainNotification requestId(String requestId) {
    
    
    
    
    this.requestId = requestId;
    return this;
  }

   /**
   * A client provided identifier (via X-Request-Id header) indicating the request this notification is for
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A client provided identifier (via X-Request-Id header) indicating the request this notification is for")

  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    
    
    
    this.requestId = requestId;
  }


  public DomainNotification resource(String resource) {
    
    
    
    
    this.resource = resource;
    return this;
  }

   /**
   * The resource the notification pertains to.
   * @return resource
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "The resource the notification pertains to.")

  public String getResource() {
    return resource;
  }


  public void setResource(String resource) {
    
    
    
    this.resource = resource;
  }


  public DomainNotification resourceType(ResourceTypeEnum resourceType) {
    
    
    
    
    this.resourceType = resourceType;
    return this;
  }

   /**
   * The type of resource the notification relates to
   * @return resourceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of resource the notification relates to")

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }


  public void setResourceType(ResourceTypeEnum resourceType) {
    
    
    
    this.resourceType = resourceType;
  }


  public DomainNotification status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The resulting status of the action.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The resulting status of the action.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public DomainNotification type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of action the notification relates to
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of action the notification relates to")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DomainNotification instance itself
   */
  public DomainNotification putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainNotification domainNotification = (DomainNotification) o;
    return Objects.equals(this.addedAt, domainNotification.addedAt) &&
        Objects.equals(this.metadata, domainNotification.metadata) &&
        Objects.equals(this.notificationId, domainNotification.notificationId) &&
        Objects.equals(this.requestId, domainNotification.requestId) &&
        Objects.equals(this.resource, domainNotification.resource) &&
        Objects.equals(this.resourceType, domainNotification.resourceType) &&
        Objects.equals(this.status, domainNotification.status) &&
        Objects.equals(this.type, domainNotification.type)&&
        Objects.equals(this.additionalProperties, domainNotification.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedAt, metadata, notificationId, requestId, resource, resourceType, status, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainNotification {\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addedAt");
    openapiFields.add("metadata");
    openapiFields.add("notificationId");
    openapiFields.add("requestId");
    openapiFields.add("resource");
    openapiFields.add("resourceType");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addedAt");
    openapiRequiredFields.add("notificationId");
    openapiRequiredFields.add("resource");
    openapiRequiredFields.add("resourceType");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainNotification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainNotification is not found in the empty JSON string", DomainNotification.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainNotification.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("addedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addedAt").toString()));
      }
      if (!jsonObj.get("notificationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationId").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if (!jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainNotification>() {
           @Override
           public void write(JsonWriter out, DomainNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainNotification read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DomainNotification instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainNotification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainNotification
  * @throws IOException if the JSON string is invalid with respect to DomainNotification
  */
  public static DomainNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainNotification.class);
  }

 /**
  * Convert an instance of DomainNotification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

