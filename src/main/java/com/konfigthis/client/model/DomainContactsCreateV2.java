/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContactDomainCreate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainContactsCreateV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainContactsCreateV2 {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private ContactDomainCreate admin;

  public static final String SERIALIZED_NAME_ADMIN_ID = "adminId";
  @SerializedName(SERIALIZED_NAME_ADMIN_ID)
  private String adminId;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private ContactDomainCreate billing;

  public static final String SERIALIZED_NAME_BILLING_ID = "billingId";
  @SerializedName(SERIALIZED_NAME_BILLING_ID)
  private String billingId;

  public static final String SERIALIZED_NAME_REGISTRANT = "registrant";
  @SerializedName(SERIALIZED_NAME_REGISTRANT)
  private ContactDomainCreate registrant;

  public static final String SERIALIZED_NAME_REGISTRANT_ID = "registrantId";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_ID)
  private String registrantId;

  public static final String SERIALIZED_NAME_TECH = "tech";
  @SerializedName(SERIALIZED_NAME_TECH)
  private ContactDomainCreate tech;

  public static final String SERIALIZED_NAME_TECH_ID = "techId";
  @SerializedName(SERIALIZED_NAME_TECH_ID)
  private String techId;

  public DomainContactsCreateV2() {
  }

  public DomainContactsCreateV2 admin(ContactDomainCreate admin) {
    
    
    
    
    this.admin = admin;
    return this;
  }

   /**
   * Get admin
   * @return admin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomainCreate getAdmin() {
    return admin;
  }


  public void setAdmin(ContactDomainCreate admin) {
    
    
    
    this.admin = admin;
  }


  public DomainContactsCreateV2 adminId(String adminId) {
    
    
    
    
    this.adminId = adminId;
    return this;
  }

   /**
   * Unique identifier of the contact that the user wants to use for the domain admin contact. This can be specified instead of the &#x60;admin&#x60; property. 
   * @return adminId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the contact that the user wants to use for the domain admin contact. This can be specified instead of the `admin` property. ")

  public String getAdminId() {
    return adminId;
  }


  public void setAdminId(String adminId) {
    
    
    
    this.adminId = adminId;
  }


  public DomainContactsCreateV2 billing(ContactDomainCreate billing) {
    
    
    
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomainCreate getBilling() {
    return billing;
  }


  public void setBilling(ContactDomainCreate billing) {
    
    
    
    this.billing = billing;
  }


  public DomainContactsCreateV2 billingId(String billingId) {
    
    
    
    
    this.billingId = billingId;
    return this;
  }

   /**
   * Unique identifier of the contact that the user wants to use for the domain billing contact. This can be specified instead of the &#x60;billing&#x60; property. 
   * @return billingId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the contact that the user wants to use for the domain billing contact. This can be specified instead of the `billing` property. ")

  public String getBillingId() {
    return billingId;
  }


  public void setBillingId(String billingId) {
    
    
    
    this.billingId = billingId;
  }


  public DomainContactsCreateV2 registrant(ContactDomainCreate registrant) {
    
    
    
    
    this.registrant = registrant;
    return this;
  }

   /**
   * Get registrant
   * @return registrant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomainCreate getRegistrant() {
    return registrant;
  }


  public void setRegistrant(ContactDomainCreate registrant) {
    
    
    
    this.registrant = registrant;
  }


  public DomainContactsCreateV2 registrantId(String registrantId) {
    
    
    
    
    this.registrantId = registrantId;
    return this;
  }

   /**
   * Unique identifier of the contact that the user wants to use for the domain registrant contact. This can be specified instead of the &#x60;registrant&#x60; property. 
   * @return registrantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the contact that the user wants to use for the domain registrant contact. This can be specified instead of the `registrant` property. ")

  public String getRegistrantId() {
    return registrantId;
  }


  public void setRegistrantId(String registrantId) {
    
    
    
    this.registrantId = registrantId;
  }


  public DomainContactsCreateV2 tech(ContactDomainCreate tech) {
    
    
    
    
    this.tech = tech;
    return this;
  }

   /**
   * Get tech
   * @return tech
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomainCreate getTech() {
    return tech;
  }


  public void setTech(ContactDomainCreate tech) {
    
    
    
    this.tech = tech;
  }


  public DomainContactsCreateV2 techId(String techId) {
    
    
    
    
    this.techId = techId;
    return this;
  }

   /**
   * Unique identifier of the contact that the user wants to use for the domain tech contact. This can be specified instead of the &#x60;tech&#x60; property. 
   * @return techId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the contact that the user wants to use for the domain tech contact. This can be specified instead of the `tech` property. ")

  public String getTechId() {
    return techId;
  }


  public void setTechId(String techId) {
    
    
    
    this.techId = techId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DomainContactsCreateV2 instance itself
   */
  public DomainContactsCreateV2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainContactsCreateV2 domainContactsCreateV2 = (DomainContactsCreateV2) o;
    return Objects.equals(this.admin, domainContactsCreateV2.admin) &&
        Objects.equals(this.adminId, domainContactsCreateV2.adminId) &&
        Objects.equals(this.billing, domainContactsCreateV2.billing) &&
        Objects.equals(this.billingId, domainContactsCreateV2.billingId) &&
        Objects.equals(this.registrant, domainContactsCreateV2.registrant) &&
        Objects.equals(this.registrantId, domainContactsCreateV2.registrantId) &&
        Objects.equals(this.tech, domainContactsCreateV2.tech) &&
        Objects.equals(this.techId, domainContactsCreateV2.techId)&&
        Objects.equals(this.additionalProperties, domainContactsCreateV2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, adminId, billing, billingId, registrant, registrantId, tech, techId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainContactsCreateV2 {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    adminId: ").append(toIndentedString(adminId)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    billingId: ").append(toIndentedString(billingId)).append("\n");
    sb.append("    registrant: ").append(toIndentedString(registrant)).append("\n");
    sb.append("    registrantId: ").append(toIndentedString(registrantId)).append("\n");
    sb.append("    tech: ").append(toIndentedString(tech)).append("\n");
    sb.append("    techId: ").append(toIndentedString(techId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("adminId");
    openapiFields.add("billing");
    openapiFields.add("billingId");
    openapiFields.add("registrant");
    openapiFields.add("registrantId");
    openapiFields.add("tech");
    openapiFields.add("techId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainContactsCreateV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainContactsCreateV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainContactsCreateV2 is not found in the empty JSON string", DomainContactsCreateV2.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `admin`
      if (jsonObj.get("admin") != null && !jsonObj.get("admin").isJsonNull()) {
        ContactDomainCreate.validateJsonObject(jsonObj.getAsJsonObject("admin"));
      }
      if ((jsonObj.get("adminId") != null && !jsonObj.get("adminId").isJsonNull()) && !jsonObj.get("adminId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminId").toString()));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        ContactDomainCreate.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      if ((jsonObj.get("billingId") != null && !jsonObj.get("billingId").isJsonNull()) && !jsonObj.get("billingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingId").toString()));
      }
      // validate the optional field `registrant`
      if (jsonObj.get("registrant") != null && !jsonObj.get("registrant").isJsonNull()) {
        ContactDomainCreate.validateJsonObject(jsonObj.getAsJsonObject("registrant"));
      }
      if ((jsonObj.get("registrantId") != null && !jsonObj.get("registrantId").isJsonNull()) && !jsonObj.get("registrantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrantId").toString()));
      }
      // validate the optional field `tech`
      if (jsonObj.get("tech") != null && !jsonObj.get("tech").isJsonNull()) {
        ContactDomainCreate.validateJsonObject(jsonObj.getAsJsonObject("tech"));
      }
      if ((jsonObj.get("techId") != null && !jsonObj.get("techId").isJsonNull()) && !jsonObj.get("techId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `techId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("techId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainContactsCreateV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainContactsCreateV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainContactsCreateV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainContactsCreateV2.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainContactsCreateV2>() {
           @Override
           public void write(JsonWriter out, DomainContactsCreateV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainContactsCreateV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DomainContactsCreateV2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainContactsCreateV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainContactsCreateV2
  * @throws IOException if the JSON string is invalid with respect to DomainContactsCreateV2
  */
  public static DomainContactsCreateV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainContactsCreateV2.class);
  }

 /**
  * Convert an instance of DomainContactsCreateV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

