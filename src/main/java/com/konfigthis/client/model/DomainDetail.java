/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.VerificationsDomain;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainDetail
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainDetail {
  public static final String SERIALIZED_NAME_AUTH_CODE = "authCode";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_CONTACT_ADMIN = "contactAdmin";
  @SerializedName(SERIALIZED_NAME_CONTACT_ADMIN)
  private Contact contactAdmin;

  public static final String SERIALIZED_NAME_CONTACT_BILLING = "contactBilling";
  @SerializedName(SERIALIZED_NAME_CONTACT_BILLING)
  private Contact contactBilling;

  public static final String SERIALIZED_NAME_CONTACT_REGISTRANT = "contactRegistrant";
  @SerializedName(SERIALIZED_NAME_CONTACT_REGISTRANT)
  private Contact contactRegistrant;

  public static final String SERIALIZED_NAME_CONTACT_TECH = "contactTech";
  @SerializedName(SERIALIZED_NAME_CONTACT_TECH)
  private Contact contactTech;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private Double domainId;

  public static final String SERIALIZED_NAME_EXPIRATION_PROTECTED = "expirationProtected";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_PROTECTED)
  private Boolean expirationProtected;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_EXPOSE_WHOIS = "exposeWhois";
  @SerializedName(SERIALIZED_NAME_EXPOSE_WHOIS)
  private Boolean exposeWhois;

  public static final String SERIALIZED_NAME_HOLD_REGISTRAR = "holdRegistrar";
  @SerializedName(SERIALIZED_NAME_HOLD_REGISTRAR)
  private Boolean holdRegistrar;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_NAME_SERVERS = "nameServers";
  @SerializedName(SERIALIZED_NAME_NAME_SERVERS)
  private List<String> nameServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private Boolean privacy;

  public static final String SERIALIZED_NAME_REGISTRAR_CREATED_AT = "registrarCreatedAt";
  @SerializedName(SERIALIZED_NAME_REGISTRAR_CREATED_AT)
  private String registrarCreatedAt;

  public static final String SERIALIZED_NAME_RENEW_AUTO = "renewAuto";
  @SerializedName(SERIALIZED_NAME_RENEW_AUTO)
  private Boolean renewAuto;

  public static final String SERIALIZED_NAME_RENEW_DEADLINE = "renewDeadline";
  @SerializedName(SERIALIZED_NAME_RENEW_DEADLINE)
  private OffsetDateTime renewDeadline;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_TRANSFER_AWAY_ELIGIBLE_AT = "transferAwayEligibleAt";
  @SerializedName(SERIALIZED_NAME_TRANSFER_AWAY_ELIGIBLE_AT)
  private OffsetDateTime transferAwayEligibleAt;

  public static final String SERIALIZED_NAME_TRANSFER_PROTECTED = "transferProtected";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROTECTED)
  private Boolean transferProtected;

  public static final String SERIALIZED_NAME_VERIFICATIONS = "verifications";
  @SerializedName(SERIALIZED_NAME_VERIFICATIONS)
  private VerificationsDomain verifications;

  public DomainDetail() {
  }

  public DomainDetail authCode(String authCode) {
    
    
    
    
    this.authCode = authCode;
    return this;
  }

   /**
   * Authorization code for transferring the Domain
   * @return authCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Authorization code for transferring the Domain")

  public String getAuthCode() {
    return authCode;
  }


  public void setAuthCode(String authCode) {
    
    
    
    this.authCode = authCode;
  }


  public DomainDetail contactAdmin(Contact contactAdmin) {
    
    
    
    
    this.contactAdmin = contactAdmin;
    return this;
  }

   /**
   * Get contactAdmin
   * @return contactAdmin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContactAdmin() {
    return contactAdmin;
  }


  public void setContactAdmin(Contact contactAdmin) {
    
    
    
    this.contactAdmin = contactAdmin;
  }


  public DomainDetail contactBilling(Contact contactBilling) {
    
    
    
    
    this.contactBilling = contactBilling;
    return this;
  }

   /**
   * Get contactBilling
   * @return contactBilling
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContactBilling() {
    return contactBilling;
  }


  public void setContactBilling(Contact contactBilling) {
    
    
    
    this.contactBilling = contactBilling;
  }


  public DomainDetail contactRegistrant(Contact contactRegistrant) {
    
    
    
    
    this.contactRegistrant = contactRegistrant;
    return this;
  }

   /**
   * Get contactRegistrant
   * @return contactRegistrant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContactRegistrant() {
    return contactRegistrant;
  }


  public void setContactRegistrant(Contact contactRegistrant) {
    
    
    
    this.contactRegistrant = contactRegistrant;
  }


  public DomainDetail contactTech(Contact contactTech) {
    
    
    
    
    this.contactTech = contactTech;
    return this;
  }

   /**
   * Get contactTech
   * @return contactTech
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContactTech() {
    return contactTech;
  }


  public void setContactTech(Contact contactTech) {
    
    
    
    this.contactTech = contactTech;
  }


  public DomainDetail createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date and time when this domain was created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time when this domain was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public DomainDetail deletedAt(OffsetDateTime deletedAt) {
    
    
    
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Date and time when this domain was deleted
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain was deleted")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(OffsetDateTime deletedAt) {
    
    
    
    this.deletedAt = deletedAt;
  }


  public DomainDetail domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * Name of the domain
   * @return domain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the domain")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


  public DomainDetail domainId(Double domainId) {
    
    
    
    
    this.domainId = domainId;
    return this;
  }

   /**
   * Unique identifier for this Domain
   * @return domainId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier for this Domain")

  public Double getDomainId() {
    return domainId;
  }


  public void setDomainId(Double domainId) {
    
    
    
    this.domainId = domainId;
  }


  public DomainDetail expirationProtected(Boolean expirationProtected) {
    
    
    
    
    this.expirationProtected = expirationProtected;
    return this;
  }

   /**
   * Whether or not the domain is protected from expiration
   * @return expirationProtected
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is protected from expiration")

  public Boolean getExpirationProtected() {
    return expirationProtected;
  }


  public void setExpirationProtected(Boolean expirationProtected) {
    
    
    
    this.expirationProtected = expirationProtected;
  }


  public DomainDetail expires(OffsetDateTime expires) {
    
    
    
    
    this.expires = expires;
    return this;
  }

   /**
   * Date and time when this domain will expire
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain will expire")

  public OffsetDateTime getExpires() {
    return expires;
  }


  public void setExpires(OffsetDateTime expires) {
    
    
    
    this.expires = expires;
  }


  public DomainDetail exposeWhois(Boolean exposeWhois) {
    
    
    
    
    this.exposeWhois = exposeWhois;
    return this;
  }

   /**
   * Whether or not the domain contact details should be shown in the WHOIS
   * @return exposeWhois
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the domain contact details should be shown in the WHOIS")

  public Boolean getExposeWhois() {
    return exposeWhois;
  }


  public void setExposeWhois(Boolean exposeWhois) {
    
    
    
    this.exposeWhois = exposeWhois;
  }


  public DomainDetail holdRegistrar(Boolean holdRegistrar) {
    
    
    
    
    this.holdRegistrar = holdRegistrar;
    return this;
  }

   /**
   * Whether or not the domain is on-hold by the registrar
   * @return holdRegistrar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is on-hold by the registrar")

  public Boolean getHoldRegistrar() {
    return holdRegistrar;
  }


  public void setHoldRegistrar(Boolean holdRegistrar) {
    
    
    
    this.holdRegistrar = holdRegistrar;
  }


  public DomainDetail locked(Boolean locked) {
    
    
    
    
    this.locked = locked;
    return this;
  }

   /**
   * Whether or not the domain is locked to prevent transfers
   * @return locked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is locked to prevent transfers")

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    
    
    
    this.locked = locked;
  }


  public DomainDetail nameServers(List<String> nameServers) {
    
    
    
    
    this.nameServers = nameServers;
    return this;
  }

  public DomainDetail addNameServersItem(String nameServersItem) {
    this.nameServers.add(nameServersItem);
    return this;
  }

   /**
   * Fully-qualified domain names for DNS servers
   * @return nameServers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Fully-qualified domain names for DNS servers")

  public List<String> getNameServers() {
    return nameServers;
  }


  public void setNameServers(List<String> nameServers) {
    
    
    
    this.nameServers = nameServers;
  }


  public DomainDetail privacy(Boolean privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Whether or not the domain has privacy protection
   * @return privacy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain has privacy protection")

  public Boolean getPrivacy() {
    return privacy;
  }


  public void setPrivacy(Boolean privacy) {
    
    
    
    this.privacy = privacy;
  }


  public DomainDetail registrarCreatedAt(String registrarCreatedAt) {
    
    
    
    
    this.registrarCreatedAt = registrarCreatedAt;
    return this;
  }

   /**
   * Date and time when this domain was created by the registrar
   * @return registrarCreatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain was created by the registrar")

  public String getRegistrarCreatedAt() {
    return registrarCreatedAt;
  }


  public void setRegistrarCreatedAt(String registrarCreatedAt) {
    
    
    
    this.registrarCreatedAt = registrarCreatedAt;
  }


  public DomainDetail renewAuto(Boolean renewAuto) {
    
    
    
    
    this.renewAuto = renewAuto;
    return this;
  }

   /**
   * Whether or not the domain is configured to automatically renew
   * @return renewAuto
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is configured to automatically renew")

  public Boolean getRenewAuto() {
    return renewAuto;
  }


  public void setRenewAuto(Boolean renewAuto) {
    
    
    
    this.renewAuto = renewAuto;
  }


  public DomainDetail renewDeadline(OffsetDateTime renewDeadline) {
    
    
    
    
    this.renewDeadline = renewDeadline;
    return this;
  }

   /**
   * Date the domain must renew on
   * @return renewDeadline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date the domain must renew on")

  public OffsetDateTime getRenewDeadline() {
    return renewDeadline;
  }


  public void setRenewDeadline(OffsetDateTime renewDeadline) {
    
    
    
    this.renewDeadline = renewDeadline;
  }


  public DomainDetail status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Processing status of the domain&lt;br/&gt;&lt;ul&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACTIVE&lt;/strong&gt; - All is well&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AWAITING*&lt;/strong&gt; - System is waiting for the end-user to complete an action&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED*&lt;/strong&gt; - Domain has been cancelled, and may or may not be reclaimable&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONFISCATED&lt;/strong&gt; - Domain has been confiscated, usually for abuse, chargeback, or fraud&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DISABLED*&lt;/strong&gt; - Domain has been disabled&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EXCLUDED*&lt;/strong&gt; - Domain has been excluded from Firehose registration&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EXPIRED*&lt;/strong&gt; - Domain has expired&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;FAILED*&lt;/strong&gt; - Domain has failed a required action, and the system is no longer retrying&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HELD*&lt;/strong&gt; - Domain has been placed on hold, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;LOCKED*&lt;/strong&gt; - Domain has been locked, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PARKED*&lt;/strong&gt; - Domain has been parked, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING*&lt;/strong&gt; - Domain is working its way through an automated workflow&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;RESERVED*&lt;/strong&gt; - Domain is reserved, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REVERTED&lt;/strong&gt; - Domain has been reverted, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SUSPENDED*&lt;/strong&gt; - Domain has been suspended, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFERRED*&lt;/strong&gt; - Domain has been transferred out&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNKNOWN&lt;/strong&gt; - Domain is in an unknown state&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNLOCKED*&lt;/strong&gt; - Domain has been unlocked, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNPARKED*&lt;/strong&gt; - Domain has been unparked, and likely requires intervention from Support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UPDATED*&lt;/strong&gt; - Domain ownership has been transferred to another account&lt;/li&gt; &lt;/ul&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Processing status of the domain<br/><ul> <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li> <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li> <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li> <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li> <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li> <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li> <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li> <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li> <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li> <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li> <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li> <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li> </ul>")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public DomainDetail subaccountId(String subaccountId) {
    
    
    
    
    this.subaccountId = subaccountId;
    return this;
  }

   /**
   * Reseller subaccount shopperid who can manage the domain
   * @return subaccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reseller subaccount shopperid who can manage the domain")

  public String getSubaccountId() {
    return subaccountId;
  }


  public void setSubaccountId(String subaccountId) {
    
    
    
    this.subaccountId = subaccountId;
  }


  public DomainDetail transferAwayEligibleAt(OffsetDateTime transferAwayEligibleAt) {
    
    
    
    
    this.transferAwayEligibleAt = transferAwayEligibleAt;
    return this;
  }

   /**
   * Date and time when this domain is eligible to transfer
   * @return transferAwayEligibleAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain is eligible to transfer")

  public OffsetDateTime getTransferAwayEligibleAt() {
    return transferAwayEligibleAt;
  }


  public void setTransferAwayEligibleAt(OffsetDateTime transferAwayEligibleAt) {
    
    
    
    this.transferAwayEligibleAt = transferAwayEligibleAt;
  }


  public DomainDetail transferProtected(Boolean transferProtected) {
    
    
    
    
    this.transferProtected = transferProtected;
    return this;
  }

   /**
   * Whether or not the domain is protected from transfer
   * @return transferProtected
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is protected from transfer")

  public Boolean getTransferProtected() {
    return transferProtected;
  }


  public void setTransferProtected(Boolean transferProtected) {
    
    
    
    this.transferProtected = transferProtected;
  }


  public DomainDetail verifications(VerificationsDomain verifications) {
    
    
    
    
    this.verifications = verifications;
    return this;
  }

   /**
   * Get verifications
   * @return verifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VerificationsDomain getVerifications() {
    return verifications;
  }


  public void setVerifications(VerificationsDomain verifications) {
    
    
    
    this.verifications = verifications;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DomainDetail instance itself
   */
  public DomainDetail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainDetail domainDetail = (DomainDetail) o;
    return Objects.equals(this.authCode, domainDetail.authCode) &&
        Objects.equals(this.contactAdmin, domainDetail.contactAdmin) &&
        Objects.equals(this.contactBilling, domainDetail.contactBilling) &&
        Objects.equals(this.contactRegistrant, domainDetail.contactRegistrant) &&
        Objects.equals(this.contactTech, domainDetail.contactTech) &&
        Objects.equals(this.createdAt, domainDetail.createdAt) &&
        Objects.equals(this.deletedAt, domainDetail.deletedAt) &&
        Objects.equals(this.domain, domainDetail.domain) &&
        Objects.equals(this.domainId, domainDetail.domainId) &&
        Objects.equals(this.expirationProtected, domainDetail.expirationProtected) &&
        Objects.equals(this.expires, domainDetail.expires) &&
        Objects.equals(this.exposeWhois, domainDetail.exposeWhois) &&
        Objects.equals(this.holdRegistrar, domainDetail.holdRegistrar) &&
        Objects.equals(this.locked, domainDetail.locked) &&
        Objects.equals(this.nameServers, domainDetail.nameServers) &&
        Objects.equals(this.privacy, domainDetail.privacy) &&
        Objects.equals(this.registrarCreatedAt, domainDetail.registrarCreatedAt) &&
        Objects.equals(this.renewAuto, domainDetail.renewAuto) &&
        Objects.equals(this.renewDeadline, domainDetail.renewDeadline) &&
        Objects.equals(this.status, domainDetail.status) &&
        Objects.equals(this.subaccountId, domainDetail.subaccountId) &&
        Objects.equals(this.transferAwayEligibleAt, domainDetail.transferAwayEligibleAt) &&
        Objects.equals(this.transferProtected, domainDetail.transferProtected) &&
        Objects.equals(this.verifications, domainDetail.verifications)&&
        Objects.equals(this.additionalProperties, domainDetail.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authCode, contactAdmin, contactBilling, contactRegistrant, contactTech, createdAt, deletedAt, domain, domainId, expirationProtected, expires, exposeWhois, holdRegistrar, locked, nameServers, privacy, registrarCreatedAt, renewAuto, renewDeadline, status, subaccountId, transferAwayEligibleAt, transferProtected, verifications, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainDetail {\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    contactAdmin: ").append(toIndentedString(contactAdmin)).append("\n");
    sb.append("    contactBilling: ").append(toIndentedString(contactBilling)).append("\n");
    sb.append("    contactRegistrant: ").append(toIndentedString(contactRegistrant)).append("\n");
    sb.append("    contactTech: ").append(toIndentedString(contactTech)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    expirationProtected: ").append(toIndentedString(expirationProtected)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    exposeWhois: ").append(toIndentedString(exposeWhois)).append("\n");
    sb.append("    holdRegistrar: ").append(toIndentedString(holdRegistrar)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    nameServers: ").append(toIndentedString(nameServers)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    registrarCreatedAt: ").append(toIndentedString(registrarCreatedAt)).append("\n");
    sb.append("    renewAuto: ").append(toIndentedString(renewAuto)).append("\n");
    sb.append("    renewDeadline: ").append(toIndentedString(renewDeadline)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    transferAwayEligibleAt: ").append(toIndentedString(transferAwayEligibleAt)).append("\n");
    sb.append("    transferProtected: ").append(toIndentedString(transferProtected)).append("\n");
    sb.append("    verifications: ").append(toIndentedString(verifications)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authCode");
    openapiFields.add("contactAdmin");
    openapiFields.add("contactBilling");
    openapiFields.add("contactRegistrant");
    openapiFields.add("contactTech");
    openapiFields.add("createdAt");
    openapiFields.add("deletedAt");
    openapiFields.add("domain");
    openapiFields.add("domainId");
    openapiFields.add("expirationProtected");
    openapiFields.add("expires");
    openapiFields.add("exposeWhois");
    openapiFields.add("holdRegistrar");
    openapiFields.add("locked");
    openapiFields.add("nameServers");
    openapiFields.add("privacy");
    openapiFields.add("registrarCreatedAt");
    openapiFields.add("renewAuto");
    openapiFields.add("renewDeadline");
    openapiFields.add("status");
    openapiFields.add("subaccountId");
    openapiFields.add("transferAwayEligibleAt");
    openapiFields.add("transferProtected");
    openapiFields.add("verifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authCode");
    openapiRequiredFields.add("contactAdmin");
    openapiRequiredFields.add("contactBilling");
    openapiRequiredFields.add("contactRegistrant");
    openapiRequiredFields.add("contactTech");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("domainId");
    openapiRequiredFields.add("expirationProtected");
    openapiRequiredFields.add("holdRegistrar");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("nameServers");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("renewAuto");
    openapiRequiredFields.add("renewDeadline");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("transferProtected");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainDetail is not found in the empty JSON string", DomainDetail.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainDetail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authCode").toString()));
      }
      // validate the required field `contactAdmin`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contactAdmin"));
      // validate the required field `contactBilling`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contactBilling"));
      // validate the required field `contactRegistrant`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contactRegistrant"));
      // validate the required field `contactTech`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contactTech"));
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("nameServers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("nameServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameServers` to be an array in the JSON string but got `%s`", jsonObj.get("nameServers").toString()));
      }
      if ((jsonObj.get("registrarCreatedAt") != null && !jsonObj.get("registrarCreatedAt").isJsonNull()) && !jsonObj.get("registrarCreatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrarCreatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrarCreatedAt").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      // validate the optional field `verifications`
      if (jsonObj.get("verifications") != null && !jsonObj.get("verifications").isJsonNull()) {
        VerificationsDomain.validateJsonObject(jsonObj.getAsJsonObject("verifications"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainDetail>() {
           @Override
           public void write(JsonWriter out, DomainDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DomainDetail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainDetail
  * @throws IOException if the JSON string is invalid with respect to DomainDetail
  */
  public static DomainDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainDetail.class);
  }

 /**
  * Convert an instance of DomainDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

