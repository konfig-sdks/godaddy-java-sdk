/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ActionReason;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Action
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Action {
  public static final String SERIALIZED_NAME_COMPLETED_AT = "completedAt";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private String completedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  /**
   * The origination of the action&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;USER&lt;/strong&gt; - These are user requests.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SYSTEM&lt;/strong&gt; - These are system processing actions.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(OriginationEnum.Adapter.class)
 public enum OriginationEnum {
    USER("USER"),
    
    SYSTEM("SYSTEM");

    private String value;

    OriginationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginationEnum fromValue(String value) {
      for (OriginationEnum b : OriginationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORIGINATION = "origination";
  @SerializedName(SERIALIZED_NAME_ORIGINATION)
  private OriginationEnum origination;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ActionReason reason;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private String startedAt;

  /**
   * The current status of the action&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACCEPTED&lt;/strong&gt; - The action has been queued, processing has not started.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AWAITING&lt;/strong&gt; - The action is waiting on a user input.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - The action has been cancelled by the user.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;FAILED&lt;/strong&gt; - An error occurred while the action was processing, no more processing will be performed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - The action is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SUCCESS&lt;/strong&gt; - The action has completed, no additional processing is required.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACCEPTED("ACCEPTED"),
    
    AWAITING("AWAITING"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED"),
    
    PENDING("PENDING"),
    
    SUCCESS("SUCCESS");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status = StatusEnum.ACCEPTED;

  /**
   * The type of action being performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTH_CODE_PURCHASE&lt;/strong&gt; - Request for an auth code for a .de domain via POST /v2/customers/{customerId}/domains/{domain}/purchaseAuthCode.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTH_CODE_REGENERATE&lt;/strong&gt; - Request to regenerate the authCode for a domain via POST /v2/customers/{customerId}/domains/{domain}/regenerateAuthCode&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTO_RENEWAL&lt;/strong&gt; - A Domain Auto Renew is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;BACKORDER_PURCHASE&lt;/strong&gt; - Request to purchase a domain backorder via POST /v2/customers/{customerId}/domains/backorders/purchase.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;BACKORDER_DELETE&lt;/strong&gt; - Request to cancel the current domain backorder via DELETE /v2/customers/{customerId}/domains/backorders/{domain}.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;BACKORDER_UPDATE&lt;/strong&gt; - Request update the current domain backorder via PATCH /v2/customers/{customerId}/domains/backorders/{domain}.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONTACT_CREATE&lt;/strong&gt; - Request to create a contact via POST /v2/customers/{customerId}/domains/contacts.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONTACT_DELETE&lt;/strong&gt; - Request to delete a contact via DELETE /v2/customers/{customerId}/domains/contacts/{contactId}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONTACT_UPDATE&lt;/strong&gt; - Request to update a contact via PATCH /v2/customers/{customerId}/domains/contacts/{contactId}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DNS_VERIFICATION&lt;/strong&gt; - Domain requires zone file setup.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DNSSEC_CREATE&lt;/strong&gt; - Request to create DNSSEC record for the domain via PATCH /v2/customers/{customerId}/domains/{domain}/dnssecRecords.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DNSSEC_DELETE&lt;/strong&gt; - Request to delete DNSSEC record for the domain via DELETE /v2/customers/{customerId}/domains/{domain}/dnssecRecords.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_DELETE&lt;/strong&gt; - Request to delete the domain via DELETE /v2/customers/{customerId}/domains/{domain}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_UPDATE&lt;/strong&gt; - Request to update the domain via PATCH /v2/customers/{customerId}/domains/{domain}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_UPDATE_CONTACTS&lt;/strong&gt; -Request to update the domain contacts via PATCH /v2/customers/{customerId}/domains/{domain}/contacts&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_UPDATE_NAME_SERVERS&lt;/strong&gt; - Request to update the domain name servers via PUT /v2/customers/{customerId}/domains/{domain}/nameServers&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EXPIRY&lt;/strong&gt; - A Domain Expiration is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HOST_CREATE&lt;/strong&gt; - Request to create a hostname via PUT /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HOST_DELETE&lt;/strong&gt; - Request to delete a hostname via DELETE /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ICANN_VERIFICATION&lt;/strong&gt; - Domain requires registrant verification for Icann.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PREMIUM&lt;/strong&gt; - Premium Domain domain sale is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PRIVACY_PURCHASE&lt;/strong&gt; - Request to purchase privacy for a domain via POST /v2/customers/{customerId}/domains/{domain}/privacy/purchase&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PRIVACY_DELETE&lt;/strong&gt; - Request to remove privacy from a domain via DELETE /v2/customers/{customerId}/domains/{domain}/privacy&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REDEEM&lt;/strong&gt; - Request to redeem a domain via POST /v2/customers/{customerId}/domains/{domain}/redeem&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REGISTER&lt;/strong&gt; - Request to register a domain via POST /v2/customers/{customerId}/domains/{domain}/register&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;RENEW&lt;/strong&gt; - Request to renew a domain via POST /v2/customers/{customerId}/domains/{domain}/renew&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;RENEW_UNDO&lt;/strong&gt; - Request to undo a renewal for a uk domain via POST /v2/customers/{customerId}/domains/{domain}/undoRenew&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE&lt;/strong&gt; - A domain trade request is in progress&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_CANCEL&lt;/strong&gt; - Request to cancel a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeCancel&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_PURCHASE&lt;/strong&gt; - Request to purchase a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchase&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_PURCHASE_AUTH_TEXT_MESSAGE&lt;/strong&gt; - Request for a trade purchase text message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchaseAuthorizationTextMessage&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_RESEND_AUTH_EMAIL&lt;/strong&gt; - Request to resend the trade auth email message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeResendAuthorizationEmail&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER&lt;/strong&gt; - Request to transfer a domain via POST /v2/customers/{customerId}/domains/{domain}/transfer&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN&lt;/strong&gt; - A domain transfer in request is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_ACCEPT&lt;/strong&gt; - Request to accept a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInAccept&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_CANCEL&lt;/strong&gt; - Request to cancel a domain transfer via POST /v2/customers/{customerId}/domains/{domain}/transferInCancel&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_RESTART&lt;/strong&gt; - Request to restart a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInRestart&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_RETRY&lt;/strong&gt; - Request to retry a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInRetry&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT&lt;/strong&gt; - A domain transfer out request is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT_ACCEPT&lt;/strong&gt; - Request to accept a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutAccept&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT_REJECT&lt;/strong&gt; - Request to reject a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutReject&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT_REQUESTED&lt;/strong&gt; - Request to transfer out for a domain (.de) via POST /v2/customers/{customerId}/domains/{domain}/transferOut&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSIT&lt;/strong&gt; - Request to transit a de or at domain at the registry via POST /v2/customers/{customerId}/domains/{domain}/transit&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    AUTH_CODE_PURCHASE("AUTH_CODE_PURCHASE"),
    
    AUTH_CODE_REGENERATE("AUTH_CODE_REGENERATE"),
    
    AUTO_RENEWAL("AUTO_RENEWAL"),
    
    BACKORDER_PURCHASE("BACKORDER_PURCHASE"),
    
    BACKORDER_DELETE("BACKORDER_DELETE"),
    
    BACKORDER_UPDATE("BACKORDER_UPDATE"),
    
    CONTACT_CREATE("CONTACT_CREATE"),
    
    CONTACT_DELETE("CONTACT_DELETE"),
    
    CONTACT_UPDATE("CONTACT_UPDATE"),
    
    DNS_VERIFICATION("DNS_VERIFICATION"),
    
    DNSSEC_CREATE("DNSSEC_CREATE"),
    
    DNSSEC_DELETE("DNSSEC_DELETE"),
    
    DOMAIN_DELETE("DOMAIN_DELETE"),
    
    DOMAIN_UPDATE("DOMAIN_UPDATE"),
    
    DOMAIN_UPDATE_CONTACTS("DOMAIN_UPDATE_CONTACTS"),
    
    DOMAIN_UPDATE_NAME_SERVERS("DOMAIN_UPDATE_NAME_SERVERS"),
    
    EXPIRY("EXPIRY"),
    
    HOST_CREATE("HOST_CREATE"),
    
    HOST_DELETE("HOST_DELETE"),
    
    ICANN_VERIFICATION("ICANN_VERIFICATION"),
    
    MIGRATE("MIGRATE"),
    
    MIGRATE_IN("MIGRATE_IN"),
    
    PREMIUM("PREMIUM"),
    
    PRIVACY_PURCHASE("PRIVACY_PURCHASE"),
    
    PRIVACY_DELETE("PRIVACY_DELETE"),
    
    REDEEM("REDEEM"),
    
    REGISTER("REGISTER"),
    
    RENEW("RENEW"),
    
    RENEW_UNDO("RENEW_UNDO"),
    
    TRADE("TRADE"),
    
    TRADE_CANCEL("TRADE_CANCEL"),
    
    TRADE_PURCHASE("TRADE_PURCHASE"),
    
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE("TRADE_PURCHASE_AUTH_TEXT_MESSAGE"),
    
    TRADE_RESEND_AUTH_EMAIL("TRADE_RESEND_AUTH_EMAIL"),
    
    TRANSFER("TRANSFER"),
    
    TRANSFER_IN("TRANSFER_IN"),
    
    TRANSFER_IN_ACCEPT("TRANSFER_IN_ACCEPT"),
    
    TRANSFER_IN_CANCEL("TRANSFER_IN_CANCEL"),
    
    TRANSFER_IN_RESTART("TRANSFER_IN_RESTART"),
    
    TRANSFER_IN_RETRY("TRANSFER_IN_RETRY"),
    
    TRANSFER_OUT("TRANSFER_OUT"),
    
    TRANSFER_OUT_ACCEPT("TRANSFER_OUT_ACCEPT"),
    
    TRANSFER_OUT_REJECT("TRANSFER_OUT_REJECT"),
    
    TRANSFER_OUT_REQUESTED("TRANSFER_OUT_REQUESTED"),
    
    TRANSIT("TRANSIT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Action() {
  }

  public Action completedAt(String completedAt) {
    
    
    
    
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Timestamp indicating when the action was completed
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp indicating when the action was completed")

  public String getCompletedAt() {
    return completedAt;
  }


  public void setCompletedAt(String completedAt) {
    
    
    
    this.completedAt = completedAt;
  }


  public Action createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp indicating when the action was created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Timestamp indicating when the action was created")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Action modifiedAt(String modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Timestamp indicating when the action was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp indicating when the action was last modified")

  public String getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(String modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public Action origination(OriginationEnum origination) {
    
    
    
    
    this.origination = origination;
    return this;
  }

   /**
   * The origination of the action&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;USER&lt;/strong&gt; - These are user requests.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SYSTEM&lt;/strong&gt; - These are system processing actions.&lt;/li&gt;&lt;/ul&gt;
   * @return origination
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The origination of the action<br/><ul><li><strong style='margin-left: 12px;'>USER</strong> - These are user requests.</li><li><strong style='margin-left: 12px;'>SYSTEM</strong> - These are system processing actions.</li></ul>")

  public OriginationEnum getOrigination() {
    return origination;
  }


  public void setOrigination(OriginationEnum origination) {
    
    
    
    this.origination = origination;
  }


  public Action reason(ActionReason reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ActionReason getReason() {
    return reason;
  }


  public void setReason(ActionReason reason) {
    
    
    
    this.reason = reason;
  }


  public Action requestId(String requestId) {
    
    
    
    
    this.requestId = requestId;
    return this;
  }

   /**
   * A client provided identifier (via X-Request-Id header) used for tracking individual requests
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A client provided identifier (via X-Request-Id header) used for tracking individual requests")

  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    
    
    
    this.requestId = requestId;
  }


  public Action startedAt(String startedAt) {
    
    
    
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Timestamp indicating when the action was started
   * @return startedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp indicating when the action was started")

  public String getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(String startedAt) {
    
    
    
    this.startedAt = startedAt;
  }


  public Action status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the action&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACCEPTED&lt;/strong&gt; - The action has been queued, processing has not started.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AWAITING&lt;/strong&gt; - The action is waiting on a user input.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - The action has been cancelled by the user.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;FAILED&lt;/strong&gt; - An error occurred while the action was processing, no more processing will be performed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - The action is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SUCCESS&lt;/strong&gt; - The action has completed, no additional processing is required.&lt;/li&gt;&lt;/ul&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACCEPTED", required = true, value = "The current status of the action<br/><ul><li><strong style='margin-left: 12px;'>ACCEPTED</strong> - The action has been queued, processing has not started.</li><li><strong style='margin-left: 12px;'>AWAITING</strong> - The action is waiting on a user input.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - The action has been cancelled by the user.</li><li><strong style='margin-left: 12px;'>FAILED</strong> - An error occurred while the action was processing, no more processing will be performed.</li><li><strong style='margin-left: 12px;'>PENDING</strong> - The action is being processed.</li><li><strong style='margin-left: 12px;'>SUCCESS</strong> - The action has completed, no additional processing is required.</li></ul>")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Action type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of action being performed&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTH_CODE_PURCHASE&lt;/strong&gt; - Request for an auth code for a .de domain via POST /v2/customers/{customerId}/domains/{domain}/purchaseAuthCode.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTH_CODE_REGENERATE&lt;/strong&gt; - Request to regenerate the authCode for a domain via POST /v2/customers/{customerId}/domains/{domain}/regenerateAuthCode&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTO_RENEWAL&lt;/strong&gt; - A Domain Auto Renew is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;BACKORDER_PURCHASE&lt;/strong&gt; - Request to purchase a domain backorder via POST /v2/customers/{customerId}/domains/backorders/purchase.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;BACKORDER_DELETE&lt;/strong&gt; - Request to cancel the current domain backorder via DELETE /v2/customers/{customerId}/domains/backorders/{domain}.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;BACKORDER_UPDATE&lt;/strong&gt; - Request update the current domain backorder via PATCH /v2/customers/{customerId}/domains/backorders/{domain}.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONTACT_CREATE&lt;/strong&gt; - Request to create a contact via POST /v2/customers/{customerId}/domains/contacts.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONTACT_DELETE&lt;/strong&gt; - Request to delete a contact via DELETE /v2/customers/{customerId}/domains/contacts/{contactId}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CONTACT_UPDATE&lt;/strong&gt; - Request to update a contact via PATCH /v2/customers/{customerId}/domains/contacts/{contactId}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DNS_VERIFICATION&lt;/strong&gt; - Domain requires zone file setup.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DNSSEC_CREATE&lt;/strong&gt; - Request to create DNSSEC record for the domain via PATCH /v2/customers/{customerId}/domains/{domain}/dnssecRecords.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DNSSEC_DELETE&lt;/strong&gt; - Request to delete DNSSEC record for the domain via DELETE /v2/customers/{customerId}/domains/{domain}/dnssecRecords.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_DELETE&lt;/strong&gt; - Request to delete the domain via DELETE /v2/customers/{customerId}/domains/{domain}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_UPDATE&lt;/strong&gt; - Request to update the domain via PATCH /v2/customers/{customerId}/domains/{domain}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_UPDATE_CONTACTS&lt;/strong&gt; -Request to update the domain contacts via PATCH /v2/customers/{customerId}/domains/{domain}/contacts&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DOMAIN_UPDATE_NAME_SERVERS&lt;/strong&gt; - Request to update the domain name servers via PUT /v2/customers/{customerId}/domains/{domain}/nameServers&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EXPIRY&lt;/strong&gt; - A Domain Expiration is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HOST_CREATE&lt;/strong&gt; - Request to create a hostname via PUT /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HOST_DELETE&lt;/strong&gt; - Request to delete a hostname via DELETE /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ICANN_VERIFICATION&lt;/strong&gt; - Domain requires registrant verification for Icann.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PREMIUM&lt;/strong&gt; - Premium Domain domain sale is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PRIVACY_PURCHASE&lt;/strong&gt; - Request to purchase privacy for a domain via POST /v2/customers/{customerId}/domains/{domain}/privacy/purchase&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PRIVACY_DELETE&lt;/strong&gt; - Request to remove privacy from a domain via DELETE /v2/customers/{customerId}/domains/{domain}/privacy&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REDEEM&lt;/strong&gt; - Request to redeem a domain via POST /v2/customers/{customerId}/domains/{domain}/redeem&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REGISTER&lt;/strong&gt; - Request to register a domain via POST /v2/customers/{customerId}/domains/{domain}/register&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;RENEW&lt;/strong&gt; - Request to renew a domain via POST /v2/customers/{customerId}/domains/{domain}/renew&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;RENEW_UNDO&lt;/strong&gt; - Request to undo a renewal for a uk domain via POST /v2/customers/{customerId}/domains/{domain}/undoRenew&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE&lt;/strong&gt; - A domain trade request is in progress&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_CANCEL&lt;/strong&gt; - Request to cancel a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeCancel&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_PURCHASE&lt;/strong&gt; - Request to purchase a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchase&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_PURCHASE_AUTH_TEXT_MESSAGE&lt;/strong&gt; - Request for a trade purchase text message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchaseAuthorizationTextMessage&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRADE_RESEND_AUTH_EMAIL&lt;/strong&gt; - Request to resend the trade auth email message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeResendAuthorizationEmail&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER&lt;/strong&gt; - Request to transfer a domain via POST /v2/customers/{customerId}/domains/{domain}/transfer&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN&lt;/strong&gt; - A domain transfer in request is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_ACCEPT&lt;/strong&gt; - Request to accept a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInAccept&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_CANCEL&lt;/strong&gt; - Request to cancel a domain transfer via POST /v2/customers/{customerId}/domains/{domain}/transferInCancel&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_RESTART&lt;/strong&gt; - Request to restart a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInRestart&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_IN_RETRY&lt;/strong&gt; - Request to retry a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInRetry&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT&lt;/strong&gt; - A domain transfer out request is in progress.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT_ACCEPT&lt;/strong&gt; - Request to accept a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutAccept&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT_REJECT&lt;/strong&gt; - Request to reject a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutReject&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_OUT_REQUESTED&lt;/strong&gt; - Request to transfer out for a domain (.de) via POST /v2/customers/{customerId}/domains/{domain}/transferOut&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSIT&lt;/strong&gt; - Request to transit a de or at domain at the registry via POST /v2/customers/{customerId}/domains/{domain}/transit&lt;/li&gt;&lt;/ul&gt;
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of action being performed<br/><ul><li><strong style='margin-left: 12px;'>AUTH_CODE_PURCHASE</strong> - Request for an auth code for a .de domain via POST /v2/customers/{customerId}/domains/{domain}/purchaseAuthCode.</li><li><strong style='margin-left: 12px;'>AUTH_CODE_REGENERATE</strong> - Request to regenerate the authCode for a domain via POST /v2/customers/{customerId}/domains/{domain}/regenerateAuthCode</li><li><strong style='margin-left: 12px;'>AUTO_RENEWAL</strong> - A Domain Auto Renew is in progress.</li><li><strong style='margin-left: 12px;'>BACKORDER_PURCHASE</strong> - Request to purchase a domain backorder via POST /v2/customers/{customerId}/domains/backorders/purchase.</li><li><strong style='margin-left: 12px;'>BACKORDER_DELETE</strong> - Request to cancel the current domain backorder via DELETE /v2/customers/{customerId}/domains/backorders/{domain}.</li><li><strong style='margin-left: 12px;'>BACKORDER_UPDATE</strong> - Request update the current domain backorder via PATCH /v2/customers/{customerId}/domains/backorders/{domain}.</li><li><strong style='margin-left: 12px;'>CONTACT_CREATE</strong> - Request to create a contact via POST /v2/customers/{customerId}/domains/contacts.</li><li><strong style='margin-left: 12px;'>CONTACT_DELETE</strong> - Request to delete a contact via DELETE /v2/customers/{customerId}/domains/contacts/{contactId}</li><li><strong style='margin-left: 12px;'>CONTACT_UPDATE</strong> - Request to update a contact via PATCH /v2/customers/{customerId}/domains/contacts/{contactId}</li><li><strong style='margin-left: 12px;'>DNS_VERIFICATION</strong> - Domain requires zone file setup.</li><li><strong style='margin-left: 12px;'>DNSSEC_CREATE</strong> - Request to create DNSSEC record for the domain via PATCH /v2/customers/{customerId}/domains/{domain}/dnssecRecords.</li><li><strong style='margin-left: 12px;'>DNSSEC_DELETE</strong> - Request to delete DNSSEC record for the domain via DELETE /v2/customers/{customerId}/domains/{domain}/dnssecRecords.</li><li><strong style='margin-left: 12px;'>DOMAIN_DELETE</strong> - Request to delete the domain via DELETE /v2/customers/{customerId}/domains/{domain}</li><li><strong style='margin-left: 12px;'>DOMAIN_UPDATE</strong> - Request to update the domain via PATCH /v2/customers/{customerId}/domains/{domain}</li><li><strong style='margin-left: 12px;'>DOMAIN_UPDATE_CONTACTS</strong> -Request to update the domain contacts via PATCH /v2/customers/{customerId}/domains/{domain}/contacts</li><li><strong style='margin-left: 12px;'>DOMAIN_UPDATE_NAME_SERVERS</strong> - Request to update the domain name servers via PUT /v2/customers/{customerId}/domains/{domain}/nameServers</li><li><strong style='margin-left: 12px;'>EXPIRY</strong> - A Domain Expiration is in progress.</li><li><strong style='margin-left: 12px;'>HOST_CREATE</strong> - Request to create a hostname via PUT /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}</li><li><strong style='margin-left: 12px;'>HOST_DELETE</strong> - Request to delete a hostname via DELETE /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}</li><li><strong style='margin-left: 12px;'>ICANN_VERIFICATION</strong> - Domain requires registrant verification for Icann.</li><li><strong style='margin-left: 12px;'>PREMIUM</strong> - Premium Domain domain sale is in progress.</li><li><strong style='margin-left: 12px;'>PRIVACY_PURCHASE</strong> - Request to purchase privacy for a domain via POST /v2/customers/{customerId}/domains/{domain}/privacy/purchase</li><li><strong style='margin-left: 12px;'>PRIVACY_DELETE</strong> - Request to remove privacy from a domain via DELETE /v2/customers/{customerId}/domains/{domain}/privacy</li><li><strong style='margin-left: 12px;'>REDEEM</strong> - Request to redeem a domain via POST /v2/customers/{customerId}/domains/{domain}/redeem</li><li><strong style='margin-left: 12px;'>REGISTER</strong> - Request to register a domain via POST /v2/customers/{customerId}/domains/{domain}/register</li><li><strong style='margin-left: 12px;'>RENEW</strong> - Request to renew a domain via POST /v2/customers/{customerId}/domains/{domain}/renew</li><li><strong style='margin-left: 12px;'>RENEW_UNDO</strong> - Request to undo a renewal for a uk domain via POST /v2/customers/{customerId}/domains/{domain}/undoRenew</li><li><strong style='margin-left: 12px;'>TRADE</strong> - A domain trade request is in progress</li><li><strong style='margin-left: 12px;'>TRADE_CANCEL</strong> - Request to cancel a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeCancel</li><li><strong style='margin-left: 12px;'>TRADE_PURCHASE</strong> - Request to purchase a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchase</li><li><strong style='margin-left: 12px;'>TRADE_PURCHASE_AUTH_TEXT_MESSAGE</strong> - Request for a trade purchase text message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchaseAuthorizationTextMessage</li><li><strong style='margin-left: 12px;'>TRADE_RESEND_AUTH_EMAIL</strong> - Request to resend the trade auth email message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeResendAuthorizationEmail</li><li><strong style='margin-left: 12px;'>TRANSFER</strong> - Request to transfer a domain via POST /v2/customers/{customerId}/domains/{domain}/transfer</li><li><strong style='margin-left: 12px;'>TRANSFER_IN</strong> - A domain transfer in request is in progress.</li><li><strong style='margin-left: 12px;'>TRANSFER_IN_ACCEPT</strong> - Request to accept a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInAccept</li><li><strong style='margin-left: 12px;'>TRANSFER_IN_CANCEL</strong> - Request to cancel a domain transfer via POST /v2/customers/{customerId}/domains/{domain}/transferInCancel</li><li><strong style='margin-left: 12px;'>TRANSFER_IN_RESTART</strong> - Request to restart a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInRestart</li><li><strong style='margin-left: 12px;'>TRANSFER_IN_RETRY</strong> - Request to retry a domain transfer in via POST /v2/customers/{customerId}/domains/{domain}/transferInRetry</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT</strong> - A domain transfer out request is in progress.</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT_ACCEPT</strong> - Request to accept a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutAccept</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT_REJECT</strong> - Request to reject a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutReject</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT_REQUESTED</strong> - Request to transfer out for a domain (.de) via POST /v2/customers/{customerId}/domains/{domain}/transferOut</li><li><strong style='margin-left: 12px;'>TRANSIT</strong> - Request to transit a de or at domain at the registry via POST /v2/customers/{customerId}/domains/{domain}/transit</li></ul>")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Action instance itself
   */
  public Action putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Action action = (Action) o;
    return Objects.equals(this.completedAt, action.completedAt) &&
        Objects.equals(this.createdAt, action.createdAt) &&
        Objects.equals(this.modifiedAt, action.modifiedAt) &&
        Objects.equals(this.origination, action.origination) &&
        Objects.equals(this.reason, action.reason) &&
        Objects.equals(this.requestId, action.requestId) &&
        Objects.equals(this.startedAt, action.startedAt) &&
        Objects.equals(this.status, action.status) &&
        Objects.equals(this.type, action.type)&&
        Objects.equals(this.additionalProperties, action.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedAt, createdAt, modifiedAt, origination, reason, requestId, startedAt, status, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Action {\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    origination: ").append(toIndentedString(origination)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedAt");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("origination");
    openapiFields.add("reason");
    openapiFields.add("requestId");
    openapiFields.add("startedAt");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("origination");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Action
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Action is not found in the empty JSON string", Action.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Action.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("completedAt") != null && !jsonObj.get("completedAt").isJsonNull()) && !jsonObj.get("completedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedAt").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("modifiedAt") != null && !jsonObj.get("modifiedAt").isJsonNull()) && !jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      if (!jsonObj.get("origination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origination").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ActionReason.validateJsonObject(jsonObj.getAsJsonObject("reason"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("startedAt") != null && !jsonObj.get("startedAt").isJsonNull()) && !jsonObj.get("startedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startedAt").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Action.class));

       return (TypeAdapter<T>) new TypeAdapter<Action>() {
           @Override
           public void write(JsonWriter out, Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Action read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Action instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Action given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Action
  * @throws IOException if the JSON string is invalid with respect to Action
  */
  public static Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Action.class);
  }

 /**
  * Convert an instance of Action to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

