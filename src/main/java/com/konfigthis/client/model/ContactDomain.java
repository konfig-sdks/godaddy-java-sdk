/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContactDomain
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContactDomain {
  public static final String SERIALIZED_NAME_CREATED_AT = "_createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DELETED = "_deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "_modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  public static final String SERIALIZED_NAME_REVISION = "_revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_ADDRESS_MAILING = "addressMailing";
  @SerializedName(SERIALIZED_NAME_ADDRESS_MAILING)
  private Address addressMailing;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * The encoding of the contact data&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ASCII&lt;/strong&gt; - Data contains only ASCII characters that are not region or language specific&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UTF-8&lt;/strong&gt; - Data contains characters that are specific to a region or language&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
 public enum EncodingEnum {
    ASCII("ASCII"),
    
    UTF_8("UTF-8");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding = EncodingEnum.ASCII;

  public static final String SERIALIZED_NAME_EXPOSE_WHOIS = "exposeWhois";
  @SerializedName(SERIALIZED_NAME_EXPOSE_WHOIS)
  private Boolean exposeWhois;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NAME_FIRST = "nameFirst";
  @SerializedName(SERIALIZED_NAME_NAME_FIRST)
  private String nameFirst;

  public static final String SERIALIZED_NAME_NAME_LAST = "nameLast";
  @SerializedName(SERIALIZED_NAME_NAME_LAST)
  private String nameLast;

  public static final String SERIALIZED_NAME_NAME_MIDDLE = "nameMiddle";
  @SerializedName(SERIALIZED_NAME_NAME_MIDDLE)
  private String nameMiddle;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_TLDS = "tlds";
  @SerializedName(SERIALIZED_NAME_TLDS)
  private List<String> tlds = null;

  public ContactDomain() {
  }

  public ContactDomain createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp indicating when the contact was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp indicating when the contact was created")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ContactDomain deleted(Boolean deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Flag indicating if the contact has been logically deleted in the system
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag indicating if the contact has been logically deleted in the system")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    
    
    
    this.deleted = deleted;
  }


  public ContactDomain modifiedAt(String modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Timestamp indicating when the contact was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp indicating when the contact was last modified")

  public String getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(String modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public ContactDomain revision(Integer revision) {
    
    
    
    
    this.revision = revision;
    return this;
  }

   /**
   * The current revision number of the contact.
   * @return revision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current revision number of the contact.")

  public Integer getRevision() {
    return revision;
  }


  public void setRevision(Integer revision) {
    
    
    
    this.revision = revision;
  }


  public ContactDomain addressMailing(Address addressMailing) {
    
    
    
    
    this.addressMailing = addressMailing;
    return this;
  }

   /**
   * Get addressMailing
   * @return addressMailing
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Address getAddressMailing() {
    return addressMailing;
  }


  public void setAddressMailing(Address addressMailing) {
    
    
    
    this.addressMailing = addressMailing;
  }


  public ContactDomain contactId(String contactId) {
    
    
    
    
    this.contactId = contactId;
    return this;
  }

   /**
   * Unique identifier for this Contact
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for this Contact")

  public String getContactId() {
    return contactId;
  }


  public void setContactId(String contactId) {
    
    
    
    this.contactId = contactId;
  }


  public ContactDomain email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public ContactDomain encoding(EncodingEnum encoding) {
    
    
    
    
    this.encoding = encoding;
    return this;
  }

   /**
   * The encoding of the contact data&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ASCII&lt;/strong&gt; - Data contains only ASCII characters that are not region or language specific&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UTF-8&lt;/strong&gt; - Data contains characters that are specific to a region or language&lt;/li&gt;&lt;/ul&gt;
   * @return encoding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ASCII", value = "The encoding of the contact data<br/><ul><li><strong style='margin-left: 12px;'>ASCII</strong> - Data contains only ASCII characters that are not region or language specific</li><li><strong style='margin-left: 12px;'>UTF-8</strong> - Data contains characters that are specific to a region or language</li></ul>")

  public EncodingEnum getEncoding() {
    return encoding;
  }


  public void setEncoding(EncodingEnum encoding) {
    
    
    
    this.encoding = encoding;
  }


  public ContactDomain exposeWhois(Boolean exposeWhois) {
    
    
    
    
    this.exposeWhois = exposeWhois;
    return this;
  }

   /**
   * Whether or not the contact details should be shown in the WHOIS
   * @return exposeWhois
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the contact details should be shown in the WHOIS")

  public Boolean getExposeWhois() {
    return exposeWhois;
  }


  public void setExposeWhois(Boolean exposeWhois) {
    
    
    
    this.exposeWhois = exposeWhois;
  }


  public ContactDomain fax(String fax) {
    
    
    
    
    this.fax = fax;
    return this;
  }

   /**
   * Get fax
   * @return fax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFax() {
    return fax;
  }


  public void setFax(String fax) {
    
    
    
    this.fax = fax;
  }


  public ContactDomain jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public ContactDomain metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * The contact eligibility data fields as specified by GET /v2/customers/{customerId}/domains/contacts/schema/{tld}
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact eligibility data fields as specified by GET /v2/customers/{customerId}/domains/contacts/schema/{tld}")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public ContactDomain nameFirst(String nameFirst) {
    
    
    
    
    this.nameFirst = nameFirst;
    return this;
  }

   /**
   * Get nameFirst
   * @return nameFirst
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNameFirst() {
    return nameFirst;
  }


  public void setNameFirst(String nameFirst) {
    
    
    
    this.nameFirst = nameFirst;
  }


  public ContactDomain nameLast(String nameLast) {
    
    
    
    
    this.nameLast = nameLast;
    return this;
  }

   /**
   * Get nameLast
   * @return nameLast
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNameLast() {
    return nameLast;
  }


  public void setNameLast(String nameLast) {
    
    
    
    this.nameLast = nameLast;
  }


  public ContactDomain nameMiddle(String nameMiddle) {
    
    
    
    
    this.nameMiddle = nameMiddle;
    return this;
  }

   /**
   * Get nameMiddle
   * @return nameMiddle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNameMiddle() {
    return nameMiddle;
  }


  public void setNameMiddle(String nameMiddle) {
    
    
    
    this.nameMiddle = nameMiddle;
  }


  public ContactDomain organization(String organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrganization() {
    return organization;
  }


  public void setOrganization(String organization) {
    
    
    
    this.organization = organization;
  }


  public ContactDomain phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public ContactDomain tlds(List<String> tlds) {
    
    
    
    
    this.tlds = tlds;
    return this;
  }

  public ContactDomain addTldsItem(String tldsItem) {
    if (this.tlds == null) {
      this.tlds = new ArrayList<>();
    }
    this.tlds.add(tldsItem);
    return this;
  }

   /**
   * The tlds that this contact can be assigned to
   * @return tlds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tlds that this contact can be assigned to")

  public List<String> getTlds() {
    return tlds;
  }


  public void setTlds(List<String> tlds) {
    
    
    
    this.tlds = tlds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContactDomain instance itself
   */
  public ContactDomain putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactDomain contactDomain = (ContactDomain) o;
    return Objects.equals(this.createdAt, contactDomain.createdAt) &&
        Objects.equals(this.deleted, contactDomain.deleted) &&
        Objects.equals(this.modifiedAt, contactDomain.modifiedAt) &&
        Objects.equals(this.revision, contactDomain.revision) &&
        Objects.equals(this.addressMailing, contactDomain.addressMailing) &&
        Objects.equals(this.contactId, contactDomain.contactId) &&
        Objects.equals(this.email, contactDomain.email) &&
        Objects.equals(this.encoding, contactDomain.encoding) &&
        Objects.equals(this.exposeWhois, contactDomain.exposeWhois) &&
        Objects.equals(this.fax, contactDomain.fax) &&
        Objects.equals(this.jobTitle, contactDomain.jobTitle) &&
        Objects.equals(this.metadata, contactDomain.metadata) &&
        Objects.equals(this.nameFirst, contactDomain.nameFirst) &&
        Objects.equals(this.nameLast, contactDomain.nameLast) &&
        Objects.equals(this.nameMiddle, contactDomain.nameMiddle) &&
        Objects.equals(this.organization, contactDomain.organization) &&
        Objects.equals(this.phone, contactDomain.phone) &&
        Objects.equals(this.tlds, contactDomain.tlds)&&
        Objects.equals(this.additionalProperties, contactDomain.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, deleted, modifiedAt, revision, addressMailing, contactId, email, encoding, exposeWhois, fax, jobTitle, metadata, nameFirst, nameLast, nameMiddle, organization, phone, tlds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactDomain {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    addressMailing: ").append(toIndentedString(addressMailing)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    exposeWhois: ").append(toIndentedString(exposeWhois)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    nameFirst: ").append(toIndentedString(nameFirst)).append("\n");
    sb.append("    nameLast: ").append(toIndentedString(nameLast)).append("\n");
    sb.append("    nameMiddle: ").append(toIndentedString(nameMiddle)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    tlds: ").append(toIndentedString(tlds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_createdAt");
    openapiFields.add("_deleted");
    openapiFields.add("_modifiedAt");
    openapiFields.add("_revision");
    openapiFields.add("addressMailing");
    openapiFields.add("contactId");
    openapiFields.add("email");
    openapiFields.add("encoding");
    openapiFields.add("exposeWhois");
    openapiFields.add("fax");
    openapiFields.add("jobTitle");
    openapiFields.add("metadata");
    openapiFields.add("nameFirst");
    openapiFields.add("nameLast");
    openapiFields.add("nameMiddle");
    openapiFields.add("organization");
    openapiFields.add("phone");
    openapiFields.add("tlds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressMailing");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("exposeWhois");
    openapiRequiredFields.add("nameFirst");
    openapiRequiredFields.add("nameLast");
    openapiRequiredFields.add("phone");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactDomain
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContactDomain.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactDomain is not found in the empty JSON string", ContactDomain.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactDomain.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("_createdAt") != null && !jsonObj.get("_createdAt").isJsonNull()) && !jsonObj.get("_createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_createdAt").toString()));
      }
      if ((jsonObj.get("_modifiedAt") != null && !jsonObj.get("_modifiedAt").isJsonNull()) && !jsonObj.get("_modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_modifiedAt").toString()));
      }
      // validate the required field `addressMailing`
      Address.validateJsonObject(jsonObj.getAsJsonObject("addressMailing"));
      if ((jsonObj.get("contactId") != null && !jsonObj.get("contactId").isJsonNull()) && !jsonObj.get("contactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactId").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if (!jsonObj.get("nameFirst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFirst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFirst").toString()));
      }
      if (!jsonObj.get("nameLast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameLast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameLast").toString()));
      }
      if ((jsonObj.get("nameMiddle") != null && !jsonObj.get("nameMiddle").isJsonNull()) && !jsonObj.get("nameMiddle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameMiddle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameMiddle").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tlds") != null && !jsonObj.get("tlds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlds` to be an array in the JSON string but got `%s`", jsonObj.get("tlds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactDomain>() {
           @Override
           public void write(JsonWriter out, ContactDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactDomain read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContactDomain instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactDomain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactDomain
  * @throws IOException if the JSON string is invalid with respect to ContactDomain
  */
  public static ContactDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactDomain.class);
  }

 /**
  * Convert an instance of ContactDomain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

