/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ConsentRenew;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainRenewV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainRenewV2 {
  public static final String SERIALIZED_NAME_CONSENT = "consent";
  @SerializedName(SERIALIZED_NAME_CONSENT)
  private ConsentRenew consent;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private String expires;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public DomainRenewV2() {
  }

  public DomainRenewV2 consent(ConsentRenew consent) {
    
    
    
    
    this.consent = consent;
    return this;
  }

   /**
   * Get consent
   * @return consent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ConsentRenew getConsent() {
    return consent;
  }


  public void setConsent(ConsentRenew consent) {
    
    
    
    this.consent = consent;
  }


  public DomainRenewV2 expires(String expires) {
    
    
    
    
    this.expires = expires;
    return this;
  }

   /**
   * Current date when this domain will expire
   * @return expires
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Current date when this domain will expire")

  public String getExpires() {
    return expires;
  }


  public void setExpires(String expires) {
    
    
    
    this.expires = expires;
  }


  public DomainRenewV2 period(Integer period) {
    if (period != null && period < 1) {
      throw new IllegalArgumentException("Invalid value for period. Must be greater than or equal to 1.");
    }
    if (period != null && period > 10) {
      throw new IllegalArgumentException("Invalid value for period. Must be less than or equal to 10.");
    }
    
    
    this.period = period;
    return this;
  }

   /**
   * Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to &#x60;period&#x60; specified during original purchase
   * minimum: 1
   * maximum: 10
   * @return period
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to `period` specified during original purchase")

  public Integer getPeriod() {
    return period;
  }


  public void setPeriod(Integer period) {
    if (period != null && period < 1) {
      throw new IllegalArgumentException("Invalid value for period. Must be greater than or equal to 1.");
    }
    if (period != null && period > 10) {
      throw new IllegalArgumentException("Invalid value for period. Must be less than or equal to 10.");
    }
    
    this.period = period;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainRenewV2 domainRenewV2 = (DomainRenewV2) o;
    return Objects.equals(this.consent, domainRenewV2.consent) &&
        Objects.equals(this.expires, domainRenewV2.expires) &&
        Objects.equals(this.period, domainRenewV2.period);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consent, expires, period);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainRenewV2 {\n");
    sb.append("    consent: ").append(toIndentedString(consent)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consent");
    openapiFields.add("expires");
    openapiFields.add("period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consent");
    openapiRequiredFields.add("expires");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainRenewV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainRenewV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainRenewV2 is not found in the empty JSON string", DomainRenewV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DomainRenewV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainRenewV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainRenewV2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `consent`
      ConsentRenew.validateJsonObject(jsonObj.getAsJsonObject("consent"));
      if (!jsonObj.get("expires").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainRenewV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainRenewV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainRenewV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainRenewV2.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainRenewV2>() {
           @Override
           public void write(JsonWriter out, DomainRenewV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainRenewV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainRenewV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainRenewV2
  * @throws IOException if the JSON string is invalid with respect to DomainRenewV2
  */
  public static DomainRenewV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainRenewV2.class);
  }

 /**
  * Convert an instance of DomainRenewV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

