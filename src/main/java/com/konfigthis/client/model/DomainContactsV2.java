/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContactDomain;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainContactsV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainContactsV2 {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private ContactDomain admin;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private ContactDomain billing;

  public static final String SERIALIZED_NAME_REGISTRANT = "registrant";
  @SerializedName(SERIALIZED_NAME_REGISTRANT)
  private ContactDomain registrant;

  public static final String SERIALIZED_NAME_TECH = "tech";
  @SerializedName(SERIALIZED_NAME_TECH)
  private ContactDomain tech;

  public DomainContactsV2() {
  }

  public DomainContactsV2 admin(ContactDomain admin) {
    
    
    
    
    this.admin = admin;
    return this;
  }

   /**
   * Get admin
   * @return admin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomain getAdmin() {
    return admin;
  }


  public void setAdmin(ContactDomain admin) {
    
    
    
    this.admin = admin;
  }


  public DomainContactsV2 billing(ContactDomain billing) {
    
    
    
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomain getBilling() {
    return billing;
  }


  public void setBilling(ContactDomain billing) {
    
    
    
    this.billing = billing;
  }


  public DomainContactsV2 registrant(ContactDomain registrant) {
    
    
    
    
    this.registrant = registrant;
    return this;
  }

   /**
   * Get registrant
   * @return registrant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomain getRegistrant() {
    return registrant;
  }


  public void setRegistrant(ContactDomain registrant) {
    
    
    
    this.registrant = registrant;
  }


  public DomainContactsV2 tech(ContactDomain tech) {
    
    
    
    
    this.tech = tech;
    return this;
  }

   /**
   * Get tech
   * @return tech
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDomain getTech() {
    return tech;
  }


  public void setTech(ContactDomain tech) {
    
    
    
    this.tech = tech;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainContactsV2 domainContactsV2 = (DomainContactsV2) o;
    return Objects.equals(this.admin, domainContactsV2.admin) &&
        Objects.equals(this.billing, domainContactsV2.billing) &&
        Objects.equals(this.registrant, domainContactsV2.registrant) &&
        Objects.equals(this.tech, domainContactsV2.tech);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, billing, registrant, tech);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainContactsV2 {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    registrant: ").append(toIndentedString(registrant)).append("\n");
    sb.append("    tech: ").append(toIndentedString(tech)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("billing");
    openapiFields.add("registrant");
    openapiFields.add("tech");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainContactsV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainContactsV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainContactsV2 is not found in the empty JSON string", DomainContactsV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DomainContactsV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainContactsV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `admin`
      if (jsonObj.get("admin") != null && !jsonObj.get("admin").isJsonNull()) {
        ContactDomain.validateJsonObject(jsonObj.getAsJsonObject("admin"));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        ContactDomain.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `registrant`
      if (jsonObj.get("registrant") != null && !jsonObj.get("registrant").isJsonNull()) {
        ContactDomain.validateJsonObject(jsonObj.getAsJsonObject("registrant"));
      }
      // validate the optional field `tech`
      if (jsonObj.get("tech") != null && !jsonObj.get("tech").isJsonNull()) {
        ContactDomain.validateJsonObject(jsonObj.getAsJsonObject("tech"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainContactsV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainContactsV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainContactsV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainContactsV2.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainContactsV2>() {
           @Override
           public void write(JsonWriter out, DomainContactsV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainContactsV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainContactsV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainContactsV2
  * @throws IOException if the JSON string is invalid with respect to DomainContactsV2
  */
  public static DomainContactsV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainContactsV2.class);
  }

 /**
  * Convert an instance of DomainContactsV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

