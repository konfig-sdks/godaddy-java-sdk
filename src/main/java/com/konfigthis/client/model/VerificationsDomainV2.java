/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VerificationsDomainV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VerificationsDomainV2 {
  /**
   * Status of the verification of the domain name against a prohibited list maintained by the government
   */
  @JsonAdapter(DomainNameEnum.Adapter.class)
 public enum DomainNameEnum {
    APPROVED("APPROVED"),
    
    PENDING("PENDING"),
    
    REJECTED("REJECTED"),
    
    UNABLE_TO_RETRIEVE_STATUS("UNABLE_TO_RETRIEVE_STATUS");

    private String value;

    DomainNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainNameEnum fromValue(String value) {
      for (DomainNameEnum b : DomainNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private DomainNameEnum domainName;

  /**
   * Status of the Icann verification of domain registrant contact by completing email and/or phone verification&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;COMPLETED&lt;/strong&gt; - Icann verification has been completed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - Icann verification has not been completed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNABLE_TO_RETRIEVE_STATUS&lt;/strong&gt; - Icann verification not supported for specified TLD.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(IcannEnum.Adapter.class)
 public enum IcannEnum {
    COMPLETED("COMPLETED"),
    
    PENDING("PENDING"),
    
    UNABLE_TO_RETRIEVE_STATUS("UNABLE_TO_RETRIEVE_STATUS");

    private String value;

    IcannEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IcannEnum fromValue(String value) {
      for (IcannEnum b : IcannEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IcannEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IcannEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IcannEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IcannEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ICANN = "icann";
  @SerializedName(SERIALIZED_NAME_ICANN)
  private IcannEnum icann;

  /**
   * Status of the real name verification of an identity by comparing registration data against government issued documents&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;APPROVED&lt;/strong&gt; - All is well&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - Real name verification is working its way through the workflow&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_DOCUMENT_OUTDATED&lt;/strong&gt; - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_BUSINESS_LICENSE&lt;/strong&gt; - Business license is expired&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_ORGANIZATION_CODE&lt;/strong&gt; - Organization code certificate number has expired&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_DOCUMENT_NAME&lt;/strong&gt; - There isnâ€™t a clear name on your uploaded document, please upload a different document to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is not clear.  Upload a better image to retry&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is incomplete&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_REGISTRATION_LETTER&lt;/strong&gt; - Registration letter is incomplete&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_IDENTITY_CARD&lt;/strong&gt; - Provided identity card is inconsistent with the identity card on record&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_ORGANIZATION_CODE&lt;/strong&gt; - Provided organization information is inconsistent with the results obtained using the submitted organization code&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_REGISTRANT_NAME&lt;/strong&gt; - Name on the registrant identification does not match the name in the system&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE&lt;/strong&gt; - Your document contains an invalid business license or organization code certificate number&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_DOCUMENT&lt;/strong&gt; - Document is invalid.  Please upload another document to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_ID&lt;/strong&gt; - Business id does not match the business id in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_NAME&lt;/strong&gt; - Business name does not match the business name in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_ID&lt;/strong&gt; - Document id does not match the id in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_NAME&lt;/strong&gt; - Document name does not match the name in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_TYPE&lt;/strong&gt; - Document type does not match the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_INFO&lt;/strong&gt; - The information provided for the registrant does not match the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_LOCALITY&lt;/strong&gt; - Registrant region is overseas, but a local identity document was provided&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_NAME&lt;/strong&gt; - Registrant name has been changed, so the request must be resubmitted&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_OPEN&lt;/strong&gt; - Registrant identification could not be opened.  Please upload the document again to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_VERIFY&lt;/strong&gt; - Unable to initiate verification.  Please upload the document again to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNKNOWN_ERROR&lt;/strong&gt; - Document was rejected due to an unknown error. For more information, contact customer support&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNABLE_TO_RETRIEVE_STATUS&lt;/strong&gt; - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(RealNameEnum.Adapter.class)
 public enum RealNameEnum {
    APPROVED("APPROVED"),
    
    PENDING("PENDING"),
    
    REJECTED_DOCUMENT_OUTDATED("REJECTED_DOCUMENT_OUTDATED"),
    
    REJECTED_EXPIRED_BUSINESS_LICENSE("REJECTED_EXPIRED_BUSINESS_LICENSE"),
    
    REJECTED_EXPIRED_ORGANIZATION_CODE("REJECTED_EXPIRED_ORGANIZATION_CODE"),
    
    REJECTED_ILLEGIBLE_DOCUMENT_NAME("REJECTED_ILLEGIBLE_DOCUMENT_NAME"),
    
    REJECTED_ILLEGIBLE_IDENTIFICATION("REJECTED_ILLEGIBLE_IDENTIFICATION"),
    
    REJECTED_INCOMPLETE_IDENTIFICATION("REJECTED_INCOMPLETE_IDENTIFICATION"),
    
    REJECTED_INCOMPLETE_REGISTRATION_LETTER("REJECTED_INCOMPLETE_REGISTRATION_LETTER"),
    
    REJECTED_INCONSISTENT_IDENTITY_CARD("REJECTED_INCONSISTENT_IDENTITY_CARD"),
    
    REJECTED_INCONSISTENT_ORGANIZATION_CODE("REJECTED_INCONSISTENT_ORGANIZATION_CODE"),
    
    REJECTED_INCONSISTENT_REGISTRANT_NAME("REJECTED_INCONSISTENT_REGISTRANT_NAME"),
    
    REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE("REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE"),
    
    REJECTED_INVALID_DOCUMENT("REJECTED_INVALID_DOCUMENT"),
    
    REJECTED_MISMATCH_BUSINESS_ID("REJECTED_MISMATCH_BUSINESS_ID"),
    
    REJECTED_MISMATCH_BUSINESS_NAME("REJECTED_MISMATCH_BUSINESS_NAME"),
    
    REJECTED_MISMATCH_DOCUMENT_ID("REJECTED_MISMATCH_DOCUMENT_ID"),
    
    REJECTED_MISMATCH_DOCUMENT_NAME("REJECTED_MISMATCH_DOCUMENT_NAME"),
    
    REJECTED_MISMATCH_DOCUMENT_TYPE("REJECTED_MISMATCH_DOCUMENT_TYPE"),
    
    REJECTED_MISMATCH_REGISTRANT_INFO("REJECTED_MISMATCH_REGISTRANT_INFO"),
    
    REJECTED_MISMATCH_REGISTRANT_LOCALITY("REJECTED_MISMATCH_REGISTRANT_LOCALITY"),
    
    REJECTED_MISMATCH_REGISTRANT_NAME("REJECTED_MISMATCH_REGISTRANT_NAME"),
    
    REJECTED_UNABLE_TO_OPEN("REJECTED_UNABLE_TO_OPEN"),
    
    REJECTED_UNABLE_TO_VERIFY("REJECTED_UNABLE_TO_VERIFY"),
    
    REJECTED_UNKNOWN_ERROR("REJECTED_UNKNOWN_ERROR"),
    
    UNABLE_TO_RETRIEVE_STATUS("UNABLE_TO_RETRIEVE_STATUS");

    private String value;

    RealNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RealNameEnum fromValue(String value) {
      for (RealNameEnum b : RealNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RealNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RealNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RealNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RealNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REAL_NAME = "realName";
  @SerializedName(SERIALIZED_NAME_REAL_NAME)
  private RealNameEnum realName;

  public VerificationsDomainV2() {
  }

  public VerificationsDomainV2 domainName(DomainNameEnum domainName) {
    
    
    
    
    this.domainName = domainName;
    return this;
  }

   /**
   * Status of the verification of the domain name against a prohibited list maintained by the government
   * @return domainName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the verification of the domain name against a prohibited list maintained by the government")

  public DomainNameEnum getDomainName() {
    return domainName;
  }


  public void setDomainName(DomainNameEnum domainName) {
    
    
    
    this.domainName = domainName;
  }


  public VerificationsDomainV2 icann(IcannEnum icann) {
    
    
    
    
    this.icann = icann;
    return this;
  }

   /**
   * Status of the Icann verification of domain registrant contact by completing email and/or phone verification&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;COMPLETED&lt;/strong&gt; - Icann verification has been completed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - Icann verification has not been completed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNABLE_TO_RETRIEVE_STATUS&lt;/strong&gt; - Icann verification not supported for specified TLD.&lt;/li&gt;&lt;/ul&gt;
   * @return icann
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the Icann verification of domain registrant contact by completing email and/or phone verification<br/><ul><li><strong style='margin-left: 12px;'>COMPLETED</strong> - Icann verification has been completed.</li><li><strong style='margin-left: 12px;'>PENDING</strong> - Icann verification has not been completed.</li><li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Icann verification not supported for specified TLD.</li></ul>")

  public IcannEnum getIcann() {
    return icann;
  }


  public void setIcann(IcannEnum icann) {
    
    
    
    this.icann = icann;
  }


  public VerificationsDomainV2 realName(RealNameEnum realName) {
    
    
    
    
    this.realName = realName;
    return this;
  }

   /**
   * Status of the real name verification of an identity by comparing registration data against government issued documents&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;APPROVED&lt;/strong&gt; - All is well&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - Real name verification is working its way through the workflow&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_DOCUMENT_OUTDATED&lt;/strong&gt; - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_BUSINESS_LICENSE&lt;/strong&gt; - Business license is expired&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_ORGANIZATION_CODE&lt;/strong&gt; - Organization code certificate number has expired&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_DOCUMENT_NAME&lt;/strong&gt; - There isnâ€™t a clear name on your uploaded document, please upload a different document to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is not clear.  Upload a better image to retry&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is incomplete&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_REGISTRATION_LETTER&lt;/strong&gt; - Registration letter is incomplete&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_IDENTITY_CARD&lt;/strong&gt; - Provided identity card is inconsistent with the identity card on record&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_ORGANIZATION_CODE&lt;/strong&gt; - Provided organization information is inconsistent with the results obtained using the submitted organization code&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_REGISTRANT_NAME&lt;/strong&gt; - Name on the registrant identification does not match the name in the system&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE&lt;/strong&gt; - Your document contains an invalid business license or organization code certificate number&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_DOCUMENT&lt;/strong&gt; - Document is invalid.  Please upload another document to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_ID&lt;/strong&gt; - Business id does not match the business id in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_NAME&lt;/strong&gt; - Business name does not match the business name in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_ID&lt;/strong&gt; - Document id does not match the id in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_NAME&lt;/strong&gt; - Document name does not match the name in the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_TYPE&lt;/strong&gt; - Document type does not match the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_INFO&lt;/strong&gt; - The information provided for the registrant does not match the document&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_LOCALITY&lt;/strong&gt; - Registrant region is overseas, but a local identity document was provided&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_NAME&lt;/strong&gt; - Registrant name has been changed, so the request must be resubmitted&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_OPEN&lt;/strong&gt; - Registrant identification could not be opened.  Please upload the document again to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_VERIFY&lt;/strong&gt; - Unable to initiate verification.  Please upload the document again to retry real name verification&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNKNOWN_ERROR&lt;/strong&gt; - Document was rejected due to an unknown error. For more information, contact customer support&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNABLE_TO_RETRIEVE_STATUS&lt;/strong&gt; - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support&lt;/li&gt;&lt;/ul&gt;
   * @return realName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the real name verification of an identity by comparing registration data against government issued documents<br/><ul><li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li><li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li><li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li><li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li><li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isnâ€™t a clear name on your uploaded document, please upload a different document to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li><li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li><li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li><li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li><li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li><li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li><li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li><li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li><li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li><li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li></ul>")

  public RealNameEnum getRealName() {
    return realName;
  }


  public void setRealName(RealNameEnum realName) {
    
    
    
    this.realName = realName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationsDomainV2 verificationsDomainV2 = (VerificationsDomainV2) o;
    return Objects.equals(this.domainName, verificationsDomainV2.domainName) &&
        Objects.equals(this.icann, verificationsDomainV2.icann) &&
        Objects.equals(this.realName, verificationsDomainV2.realName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, icann, realName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationsDomainV2 {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    icann: ").append(toIndentedString(icann)).append("\n");
    sb.append("    realName: ").append(toIndentedString(realName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainName");
    openapiFields.add("icann");
    openapiFields.add("realName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerificationsDomainV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VerificationsDomainV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationsDomainV2 is not found in the empty JSON string", VerificationsDomainV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VerificationsDomainV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerificationsDomainV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if ((jsonObj.get("icann") != null && !jsonObj.get("icann").isJsonNull()) && !jsonObj.get("icann").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icann` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icann").toString()));
      }
      if ((jsonObj.get("realName") != null && !jsonObj.get("realName").isJsonNull()) && !jsonObj.get("realName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationsDomainV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationsDomainV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationsDomainV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationsDomainV2.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationsDomainV2>() {
           @Override
           public void write(JsonWriter out, VerificationsDomainV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationsDomainV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerificationsDomainV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerificationsDomainV2
  * @throws IOException if the JSON string is invalid with respect to VerificationsDomainV2
  */
  public static VerificationsDomainV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationsDomainV2.class);
  }

 /**
  * Convert an instance of VerificationsDomainV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

