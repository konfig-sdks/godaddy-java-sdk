/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VerificationRealName
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VerificationRealName {
  /**
   * Status of the real name verification&lt;br/&gt;&lt;ul&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;APPROVED&lt;/strong&gt; - All is well&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - Real name verification is working its way through the workflow&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_DOCUMENT_OUTDATED&lt;/strong&gt; - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_BUSINESS_LICENSE&lt;/strong&gt; - Business license is expired&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_ORGANIZATION_CODE&lt;/strong&gt; - Organization code certificate number has expired&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_DOCUMENT_NAME&lt;/strong&gt; - There isnâ€™t a clear name on your uploaded document, please upload a different document to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is not clear.  Upload a better image to retry&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is incomplete&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_REGISTRATION_LETTER&lt;/strong&gt; - Registration letter is incomplete&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_IDENTITY_CARD&lt;/strong&gt; - Provided identity card is inconsistent with the identity card on record&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_ORGANIZATION_CODE&lt;/strong&gt; - Provided organization information is inconsistent with the results obtained using the submitted organization code&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_REGISTRANT_NAME&lt;/strong&gt; - Name on the registrant identification does not match the name in the system&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE&lt;/strong&gt; - Your document contains an invalid business license or organization code certificate number&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_DOCUMENT&lt;/strong&gt; - Document is invalid.  Please upload another document to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_ID&lt;/strong&gt; - Business id does not match the business id in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_NAME&lt;/strong&gt; - Business name does not match the business name in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_ID&lt;/strong&gt; - Document id does not match the id in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_NAME&lt;/strong&gt; - Document name does not match the name in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_TYPE&lt;/strong&gt; - Document type does not match the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_INFO&lt;/strong&gt; - The information provided for the registrant does not match the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_LOCALITY&lt;/strong&gt; - Registrant region is overseas, but a local identity document was provided&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_NAME&lt;/strong&gt; - Registrant name has been changed, so the request must be resubmitted&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_OPEN&lt;/strong&gt; - Registrant identification could not be opened.  Please upload the document again to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_VERIFY&lt;/strong&gt; - Unable to initiate verification.  Please upload the document again to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNKNOWN_ERROR&lt;/strong&gt; - Document was rejected due to an unknown error. For more information, contact customer support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNABLE_TO_RETRIEVE_STATUS&lt;/strong&gt; - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    APPROVED("APPROVED"),
    
    PENDING("PENDING"),
    
    REJECTED_DOCUMENT_OUTDATED("REJECTED_DOCUMENT_OUTDATED"),
    
    REJECTED_EXPIRED_BUSINESS_LICENSE("REJECTED_EXPIRED_BUSINESS_LICENSE"),
    
    REJECTED_EXPIRED_ORGANIZATION_CODE("REJECTED_EXPIRED_ORGANIZATION_CODE"),
    
    REJECTED_ILLEGIBLE_DOCUMENT_NAME("REJECTED_ILLEGIBLE_DOCUMENT_NAME"),
    
    REJECTED_ILLEGIBLE_IDENTIFICATION("REJECTED_ILLEGIBLE_IDENTIFICATION"),
    
    REJECTED_INCOMPLETE_IDENTIFICATION("REJECTED_INCOMPLETE_IDENTIFICATION"),
    
    REJECTED_INCOMPLETE_REGISTRATION_LETTER("REJECTED_INCOMPLETE_REGISTRATION_LETTER"),
    
    REJECTED_INCONSISTENT_IDENTITY_CARD("REJECTED_INCONSISTENT_IDENTITY_CARD"),
    
    REJECTED_INCONSISTENT_ORGANIZATION_CODE("REJECTED_INCONSISTENT_ORGANIZATION_CODE"),
    
    REJECTED_INCONSISTENT_REGISTRANT_NAME("REJECTED_INCONSISTENT_REGISTRANT_NAME"),
    
    REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE("REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE"),
    
    REJECTED_INVALID_DOCUMENT("REJECTED_INVALID_DOCUMENT"),
    
    REJECTED_MISMATCH_BUSINESS_ID("REJECTED_MISMATCH_BUSINESS_ID"),
    
    REJECTED_MISMATCH_BUSINESS_NAME("REJECTED_MISMATCH_BUSINESS_NAME"),
    
    REJECTED_MISMATCH_DOCUMENT_ID("REJECTED_MISMATCH_DOCUMENT_ID"),
    
    REJECTED_MISMATCH_DOCUMENT_NAME("REJECTED_MISMATCH_DOCUMENT_NAME"),
    
    REJECTED_MISMATCH_DOCUMENT_TYPE("REJECTED_MISMATCH_DOCUMENT_TYPE"),
    
    REJECTED_MISMATCH_REGISTRANT_INFO("REJECTED_MISMATCH_REGISTRANT_INFO"),
    
    REJECTED_MISMATCH_REGISTRANT_LOCALITY("REJECTED_MISMATCH_REGISTRANT_LOCALITY"),
    
    REJECTED_MISMATCH_REGISTRANT_NAME("REJECTED_MISMATCH_REGISTRANT_NAME"),
    
    REJECTED_UNABLE_TO_OPEN("REJECTED_UNABLE_TO_OPEN"),
    
    REJECTED_UNABLE_TO_VERIFY("REJECTED_UNABLE_TO_VERIFY"),
    
    REJECTED_UNKNOWN_ERROR("REJECTED_UNKNOWN_ERROR"),
    
    UNABLE_TO_RETRIEVE_STATUS("UNABLE_TO_RETRIEVE_STATUS");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public VerificationRealName() {
  }

  public VerificationRealName status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the real name verification&lt;br/&gt;&lt;ul&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;APPROVED&lt;/strong&gt; - All is well&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING&lt;/strong&gt; - Real name verification is working its way through the workflow&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_DOCUMENT_OUTDATED&lt;/strong&gt; - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_BUSINESS_LICENSE&lt;/strong&gt; - Business license is expired&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_EXPIRED_ORGANIZATION_CODE&lt;/strong&gt; - Organization code certificate number has expired&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_DOCUMENT_NAME&lt;/strong&gt; - There isnâ€™t a clear name on your uploaded document, please upload a different document to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_ILLEGIBLE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is not clear.  Upload a better image to retry&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_IDENTIFICATION&lt;/strong&gt; - Registrant identification is incomplete&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCOMPLETE_REGISTRATION_LETTER&lt;/strong&gt; - Registration letter is incomplete&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_IDENTITY_CARD&lt;/strong&gt; - Provided identity card is inconsistent with the identity card on record&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_ORGANIZATION_CODE&lt;/strong&gt; - Provided organization information is inconsistent with the results obtained using the submitted organization code&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INCONSISTENT_REGISTRANT_NAME&lt;/strong&gt; - Name on the registrant identification does not match the name in the system&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE&lt;/strong&gt; - Your document contains an invalid business license or organization code certificate number&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_INVALID_DOCUMENT&lt;/strong&gt; - Document is invalid.  Please upload another document to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_ID&lt;/strong&gt; - Business id does not match the business id in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_BUSINESS_NAME&lt;/strong&gt; - Business name does not match the business name in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_ID&lt;/strong&gt; - Document id does not match the id in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_NAME&lt;/strong&gt; - Document name does not match the name in the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_DOCUMENT_TYPE&lt;/strong&gt; - Document type does not match the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_INFO&lt;/strong&gt; - The information provided for the registrant does not match the document&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_LOCALITY&lt;/strong&gt; - Registrant region is overseas, but a local identity document was provided&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_MISMATCH_REGISTRANT_NAME&lt;/strong&gt; - Registrant name has been changed, so the request must be resubmitted&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_OPEN&lt;/strong&gt; - Registrant identification could not be opened.  Please upload the document again to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNABLE_TO_VERIFY&lt;/strong&gt; - Unable to initiate verification.  Please upload the document again to retry real name verification&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REJECTED_UNKNOWN_ERROR&lt;/strong&gt; - Document was rejected due to an unknown error. For more information, contact customer support&lt;/li&gt; &lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UNABLE_TO_RETRIEVE_STATUS&lt;/strong&gt; - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support&lt;/li&gt; &lt;/ul&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Status of the real name verification<br/><ul> <li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li> <li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li> <li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isnâ€™t a clear name on your uploaded document, please upload a different document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li> <li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li> </ul>")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VerificationRealName instance itself
   */
  public VerificationRealName putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationRealName verificationRealName = (VerificationRealName) o;
    return Objects.equals(this.status, verificationRealName.status)&&
        Objects.equals(this.additionalProperties, verificationRealName.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationRealName {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerificationRealName
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VerificationRealName.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationRealName is not found in the empty JSON string", VerificationRealName.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerificationRealName.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationRealName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationRealName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationRealName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationRealName.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationRealName>() {
           @Override
           public void write(JsonWriter out, VerificationRealName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationRealName read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VerificationRealName instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerificationRealName given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerificationRealName
  * @throws IOException if the JSON string is invalid with respect to VerificationRealName
  */
  public static VerificationRealName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationRealName.class);
  }

 /**
  * Convert an instance of VerificationRealName to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

