/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Action;
import com.konfigthis.client.model.DomainContactsV2;
import com.konfigthis.client.model.DomainDnssec;
import com.konfigthis.client.model.RenewalDetails;
import com.konfigthis.client.model.VerificationsDomainV2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainDetailV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainDetailV2 {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<Action> actions = null;

  public static final String SERIALIZED_NAME_AUTH_CODE = "authCode";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private DomainContactsV2 contacts;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private String deletedAt;

  public static final String SERIALIZED_NAME_DNSSEC_RECORDS = "dnssecRecords";
  @SerializedName(SERIALIZED_NAME_DNSSEC_RECORDS)
  private List<DomainDnssec> dnssecRecords = null;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_EXPIRATION_PROTECTED = "expirationProtected";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_PROTECTED)
  private Boolean expirationProtected;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_HOLD_REGISTRAR = "holdRegistrar";
  @SerializedName(SERIALIZED_NAME_HOLD_REGISTRAR)
  private Boolean holdRegistrar;

  public static final String SERIALIZED_NAME_HOSTNAMES = "hostnames";
  @SerializedName(SERIALIZED_NAME_HOSTNAMES)
  private List<String> hostnames = null;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  public static final String SERIALIZED_NAME_NAME_SERVERS = "nameServers";
  @SerializedName(SERIALIZED_NAME_NAME_SERVERS)
  private List<String> nameServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private Boolean privacy;

  public static final String SERIALIZED_NAME_REGISTRAR_CREATED_AT = "registrarCreatedAt";
  @SerializedName(SERIALIZED_NAME_REGISTRAR_CREATED_AT)
  private String registrarCreatedAt;

  /**
   * Gets or Sets registryStatusCodes
   */
  @JsonAdapter(RegistryStatusCodesEnum.Adapter.class)
 public enum RegistryStatusCodesEnum {
    ADD_PERIOD("ADD_PERIOD"),
    
    AUTO_RENEW_PERIOD("AUTO_RENEW_PERIOD"),
    
    CLIENT_DELETE_PROHIBITED("CLIENT_DELETE_PROHIBITED"),
    
    CLIENT_HOLD("CLIENT_HOLD"),
    
    CLIENT_RENEW_PROHIBITED("CLIENT_RENEW_PROHIBITED"),
    
    CLIENT_TRANSFER_PROHIBITED("CLIENT_TRANSFER_PROHIBITED"),
    
    CLIENT_UPDATE_PROHIBITED("CLIENT_UPDATE_PROHIBITED"),
    
    INACTIVE("INACTIVE"),
    
    OK("OK"),
    
    PENDING_CREATE("PENDING_CREATE"),
    
    PENDING_DELETE("PENDING_DELETE"),
    
    PENDING_RENEW("PENDING_RENEW"),
    
    PENDING_RESTORE("PENDING_RESTORE"),
    
    PENDING_TRANSFER("PENDING_TRANSFER"),
    
    PENDING_UPDATE("PENDING_UPDATE"),
    
    REDEMPTION_PERIOD("REDEMPTION_PERIOD"),
    
    RENEW_PERIOD("RENEW_PERIOD"),
    
    SERVER_DELETE_PROHIBITED("SERVER_DELETE_PROHIBITED"),
    
    SERVER_HOLD("SERVER_HOLD"),
    
    SERVER_RENEW_PROHIBITED("SERVER_RENEW_PROHIBITED"),
    
    SERVER_TRANSFER_PROHIBITED("SERVER_TRANSFER_PROHIBITED"),
    
    SERVER_UPDATE_PROHIBITED("SERVER_UPDATE_PROHIBITED"),
    
    TRANSFER_PERIOD("TRANSFER_PERIOD");

    private String value;

    RegistryStatusCodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistryStatusCodesEnum fromValue(String value) {
      for (RegistryStatusCodesEnum b : RegistryStatusCodesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegistryStatusCodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistryStatusCodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistryStatusCodesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegistryStatusCodesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGISTRY_STATUS_CODES = "registryStatusCodes";
  @SerializedName(SERIALIZED_NAME_REGISTRY_STATUS_CODES)
  private List<RegistryStatusCodesEnum> registryStatusCodes = null;

  public static final String SERIALIZED_NAME_RENEW_AUTO = "renewAuto";
  @SerializedName(SERIALIZED_NAME_RENEW_AUTO)
  private Boolean renewAuto;

  public static final String SERIALIZED_NAME_RENEW_DEADLINE = "renewDeadline";
  @SerializedName(SERIALIZED_NAME_RENEW_DEADLINE)
  private String renewDeadline;

  public static final String SERIALIZED_NAME_RENEWAL = "renewal";
  @SerializedName(SERIALIZED_NAME_RENEWAL)
  private RenewalDetails renewal;

  /**
   * The current status of the domain&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACTIVE&lt;/strong&gt; - Domain has been registered and is active.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - Domain has been cancelled by the user or system, and is not be reclaimable.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DELETED_REDEEMABLE&lt;/strong&gt; - Domain is deleted but is redeemable.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EXPIRED&lt;/strong&gt; - Domain has expired.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;FAILED&lt;/strong&gt; - Domain registration or transfer error.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;LOCKED_REGISTRAR&lt;/strong&gt; - Domain is locked at the registrar - this is usually the result of a spam, abuse, etc.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PARKED&lt;/strong&gt; - Domain has been parked.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HELD_REGISTRAR&lt;/strong&gt; - Domain is held at the registrar and cannot be transferred or modified - this is usually the result of a dispute.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;OWNERSHIP_CHANGED&lt;/strong&gt; - Domain has been moved to another account.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_TRANSFER&lt;/strong&gt; - Domain transfer has been requested and is pending the transfer process.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_REGISTRATION&lt;/strong&gt; - Domain is pending setup at the registry.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REPOSSESSED&lt;/strong&gt; - Domain has been confiscated - this is usually the result of a chargeback, fraud, abuse, etc.).&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SUSPENDED&lt;/strong&gt; - Domain is in violation and has been suspended.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFERRED&lt;/strong&gt; - Domain has been transferred to another registrar.&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    CANCELLED("CANCELLED"),
    
    DELETED_REDEEMABLE("DELETED_REDEEMABLE"),
    
    EXPIRED("EXPIRED"),
    
    FAILED("FAILED"),
    
    LOCKED_REGISTRAR("LOCKED_REGISTRAR"),
    
    PARKED("PARKED"),
    
    HELD_REGISTRAR("HELD_REGISTRAR"),
    
    OWNERSHIP_CHANGED("OWNERSHIP_CHANGED"),
    
    PENDING_TRANSFER("PENDING_TRANSFER"),
    
    PENDING_REGISTRATION("PENDING_REGISTRATION"),
    
    REPOSSESSED("REPOSSESSED"),
    
    SUSPENDED("SUSPENDED"),
    
    TRANSFERRED("TRANSFERRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_TRANSFER_AWAY_ELIGIBLE_AT = "transferAwayEligibleAt";
  @SerializedName(SERIALIZED_NAME_TRANSFER_AWAY_ELIGIBLE_AT)
  private String transferAwayEligibleAt;

  public static final String SERIALIZED_NAME_TRANSFER_PROTECTED = "transferProtected";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PROTECTED)
  private Boolean transferProtected;

  public static final String SERIALIZED_NAME_VERIFICATIONS = "verifications";
  @SerializedName(SERIALIZED_NAME_VERIFICATIONS)
  private VerificationsDomainV2 verifications;

  public DomainDetailV2() {
  }

  public DomainDetailV2 actions(List<Action> actions) {
    
    
    
    
    this.actions = actions;
    return this;
  }

  public DomainDetailV2 addActionsItem(Action actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * List of current actions in progress for this domain
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of current actions in progress for this domain")

  public List<Action> getActions() {
    return actions;
  }


  public void setActions(List<Action> actions) {
    
    
    
    this.actions = actions;
  }


  public DomainDetailV2 authCode(String authCode) {
    
    
    
    
    this.authCode = authCode;
    return this;
  }

   /**
   * Authorization code for transferring the Domain
   * @return authCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Authorization code for transferring the Domain")

  public String getAuthCode() {
    return authCode;
  }


  public void setAuthCode(String authCode) {
    
    
    
    this.authCode = authCode;
  }


  public DomainDetailV2 contacts(DomainContactsV2 contacts) {
    
    
    
    
    this.contacts = contacts;
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DomainContactsV2 getContacts() {
    return contacts;
  }


  public void setContacts(DomainContactsV2 contacts) {
    
    
    
    this.contacts = contacts;
  }


  public DomainDetailV2 createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date and time when this domain was created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time when this domain was created")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public DomainDetailV2 deletedAt(String deletedAt) {
    
    
    
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Date and time when this domain was deleted
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain was deleted")

  public String getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(String deletedAt) {
    
    
    
    this.deletedAt = deletedAt;
  }


  public DomainDetailV2 dnssecRecords(List<DomainDnssec> dnssecRecords) {
    
    
    
    
    this.dnssecRecords = dnssecRecords;
    return this;
  }

  public DomainDetailV2 addDnssecRecordsItem(DomainDnssec dnssecRecordsItem) {
    if (this.dnssecRecords == null) {
      this.dnssecRecords = new ArrayList<>();
    }
    this.dnssecRecords.add(dnssecRecordsItem);
    return this;
  }

   /**
   * List of active DNSSEC records for this domain
   * @return dnssecRecords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of active DNSSEC records for this domain")

  public List<DomainDnssec> getDnssecRecords() {
    return dnssecRecords;
  }


  public void setDnssecRecords(List<DomainDnssec> dnssecRecords) {
    
    
    
    this.dnssecRecords = dnssecRecords;
  }


  public DomainDetailV2 domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * Name of the domain
   * @return domain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the domain")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


  public DomainDetailV2 domainId(String domainId) {
    
    
    
    
    this.domainId = domainId;
    return this;
  }

   /**
   * Unique identifier for this Domain
   * @return domainId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier for this Domain")

  public String getDomainId() {
    return domainId;
  }


  public void setDomainId(String domainId) {
    
    
    
    this.domainId = domainId;
  }


  public DomainDetailV2 expirationProtected(Boolean expirationProtected) {
    
    
    
    
    this.expirationProtected = expirationProtected;
    return this;
  }

   /**
   * Whether or not the domain is protected from expiration
   * @return expirationProtected
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is protected from expiration")

  public Boolean getExpirationProtected() {
    return expirationProtected;
  }


  public void setExpirationProtected(Boolean expirationProtected) {
    
    
    
    this.expirationProtected = expirationProtected;
  }


  public DomainDetailV2 expiresAt(String expiresAt) {
    
    
    
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Date and time when this domain will expire
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain will expire")

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    
    
    
    this.expiresAt = expiresAt;
  }


  public DomainDetailV2 holdRegistrar(Boolean holdRegistrar) {
    
    
    
    
    this.holdRegistrar = holdRegistrar;
    return this;
  }

   /**
   * Whether or not the domain is on-hold by the registrar
   * @return holdRegistrar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is on-hold by the registrar")

  public Boolean getHoldRegistrar() {
    return holdRegistrar;
  }


  public void setHoldRegistrar(Boolean holdRegistrar) {
    
    
    
    this.holdRegistrar = holdRegistrar;
  }


  public DomainDetailV2 hostnames(List<String> hostnames) {
    
    
    
    
    this.hostnames = hostnames;
    return this;
  }

  public DomainDetailV2 addHostnamesItem(String hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

   /**
   * Hostnames owned by the domain
   * @return hostnames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hostnames owned by the domain")

  public List<String> getHostnames() {
    return hostnames;
  }


  public void setHostnames(List<String> hostnames) {
    
    
    
    this.hostnames = hostnames;
  }


  public DomainDetailV2 locked(Boolean locked) {
    
    
    
    
    this.locked = locked;
    return this;
  }

   /**
   * Whether or not the domain is locked to prevent transfers
   * @return locked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is locked to prevent transfers")

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    
    
    
    this.locked = locked;
  }


  public DomainDetailV2 modifiedAt(String modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Date and time when this domain was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain was last modified")

  public String getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(String modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public DomainDetailV2 nameServers(List<String> nameServers) {
    
    
    
    
    this.nameServers = nameServers;
    return this;
  }

  public DomainDetailV2 addNameServersItem(String nameServersItem) {
    this.nameServers.add(nameServersItem);
    return this;
  }

   /**
   * Fully-qualified domain names for DNS servers
   * @return nameServers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Fully-qualified domain names for DNS servers")

  public List<String> getNameServers() {
    return nameServers;
  }


  public void setNameServers(List<String> nameServers) {
    
    
    
    this.nameServers = nameServers;
  }


  public DomainDetailV2 privacy(Boolean privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Whether or not the domain has privacy protection
   * @return privacy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain has privacy protection")

  public Boolean getPrivacy() {
    return privacy;
  }


  public void setPrivacy(Boolean privacy) {
    
    
    
    this.privacy = privacy;
  }


  public DomainDetailV2 registrarCreatedAt(String registrarCreatedAt) {
    
    
    
    
    this.registrarCreatedAt = registrarCreatedAt;
    return this;
  }

   /**
   * Date and time when this domain was created by the registrar
   * @return registrarCreatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain was created by the registrar")

  public String getRegistrarCreatedAt() {
    return registrarCreatedAt;
  }


  public void setRegistrarCreatedAt(String registrarCreatedAt) {
    
    
    
    this.registrarCreatedAt = registrarCreatedAt;
  }


  public DomainDetailV2 registryStatusCodes(List<RegistryStatusCodesEnum> registryStatusCodes) {
    
    
    
    
    this.registryStatusCodes = registryStatusCodes;
    return this;
  }

  public DomainDetailV2 addRegistryStatusCodesItem(RegistryStatusCodesEnum registryStatusCodesItem) {
    if (this.registryStatusCodes == null) {
      this.registryStatusCodes = new ArrayList<>();
    }
    this.registryStatusCodes.add(registryStatusCodesItem);
    return this;
  }

   /**
   * The current registry status codes of the domain&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ADD_PERIOD&lt;/strong&gt; - This grace period is provided after the initial registration of a domain name.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;AUTO_RENEW_PERIOD&lt;/strong&gt; - This grace period is provided after a domain name registration period expires and is extended (renewed) automatically by the registry.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CLIENT_DELETE_PROHIBITED&lt;/strong&gt; - This status code tells your domain&#39;s registry to reject requests to delete the domain.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CLIENT_HOLD&lt;/strong&gt; - This status code tells your domain&#39;s registry to not activate your domain in the DNS and as a consequence, it will not resolve.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CLIENT_RENEW_PROHIBITED&lt;/strong&gt; - This status code tells your domain&#39;s registry to reject requests to renew your domain.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CLIENT_TRANSFER_PROHIBITED&lt;/strong&gt; - This status code tells your domain&#39;s registry to reject requests to transfer the domain from your current registrar to another.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CLIENT_UPDATE_PROHIBITED&lt;/strong&gt; - This status code tells your domain&#39;s registry to reject requests to update the domain.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;INACTIVE&lt;/strong&gt; - This status code indicates that delegation information (name servers) has not been associated with your domain.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;OK&lt;/strong&gt; - This is the standard status for a domain, meaning it has no pending operations or prohibitions.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_CREATE&lt;/strong&gt; - This status code indicates that a request to create your domain has been received and is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_DELETE&lt;/strong&gt; - This status code indicates that the domain is either in a redemption period if combined with either REDEMPTION_PERIOD or PENDING_RESTORE, if not combined with these, then indicates that the redemption period for the domain has ended and domain will be be purged and dropped from the registry database.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_RENEW&lt;/strong&gt; - This status code indicates that a request to renew your domain has been received and is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_RESTORE&lt;/strong&gt; - This status code indicates that your registrar has asked the registry to restore your domain that was in REDEMPTION_PERIOD status&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_TRANSFER&lt;/strong&gt; - This status code indicates that a request to transfer your domain to a new registrar has been received and is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_UPDATE&lt;/strong&gt; - This status code indicates that a request to update your domain has been received and is being processed.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REDEMPTION_PERIOD&lt;/strong&gt; - This status code indicates that your registrar has asked the registry to delete your domain.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;RENEW_PERIOD&lt;/strong&gt; - This grace period is provided after a domain name registration period is explicitly extended (renewed) by the registrar.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SERVER_DELETE_PROHIBITED&lt;/strong&gt; - This status code prevents your domain from being deleted. &lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SERVER_HOLD&lt;/strong&gt; - This status code is set by your domain&#39;s Registry Operator. Your domain is not activated in the DNS.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SERVER_RENEW_PROHIBITED&lt;/strong&gt; - This status code indicates your domain&#39;s Registry Operator will not allow your registrar to renew your domain.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SERVER_TRANSFER_PROHIBITED&lt;/strong&gt; - This status code prevents your domain from being transferred from your current registrar to another. &lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SERVER_UPDATE_PROHIBITED&lt;/strong&gt; - This status code locks your domain preventing it from being updated.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFER_PERIOD&lt;/strong&gt; - This grace period is provided after the successful transfer of a domain name from one registrar to another. &lt;/li&gt;&lt;/ul&gt;
   * @return registryStatusCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current registry status codes of the domain<br/><ul><li><strong style='margin-left: 12px;'>ADD_PERIOD</strong> - This grace period is provided after the initial registration of a domain name.</li><li><strong style='margin-left: 12px;'>AUTO_RENEW_PERIOD</strong> - This grace period is provided after a domain name registration period expires and is extended (renewed) automatically by the registry.</li><li><strong style='margin-left: 12px;'>CLIENT_DELETE_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to delete the domain.</li><li><strong style='margin-left: 12px;'>CLIENT_HOLD</strong> - This status code tells your domain's registry to not activate your domain in the DNS and as a consequence, it will not resolve.</li><li><strong style='margin-left: 12px;'>CLIENT_RENEW_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to renew your domain.</li><li><strong style='margin-left: 12px;'>CLIENT_TRANSFER_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to transfer the domain from your current registrar to another.</li><li><strong style='margin-left: 12px;'>CLIENT_UPDATE_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to update the domain.</li><li><strong style='margin-left: 12px;'>INACTIVE</strong> - This status code indicates that delegation information (name servers) has not been associated with your domain.</li><li><strong style='margin-left: 12px;'>OK</strong> - This is the standard status for a domain, meaning it has no pending operations or prohibitions.</li><li><strong style='margin-left: 12px;'>PENDING_CREATE</strong> - This status code indicates that a request to create your domain has been received and is being processed.</li><li><strong style='margin-left: 12px;'>PENDING_DELETE</strong> - This status code indicates that the domain is either in a redemption period if combined with either REDEMPTION_PERIOD or PENDING_RESTORE, if not combined with these, then indicates that the redemption period for the domain has ended and domain will be be purged and dropped from the registry database.</li><li><strong style='margin-left: 12px;'>PENDING_RENEW</strong> - This status code indicates that a request to renew your domain has been received and is being processed.</li><li><strong style='margin-left: 12px;'>PENDING_RESTORE</strong> - This status code indicates that your registrar has asked the registry to restore your domain that was in REDEMPTION_PERIOD status</li><li><strong style='margin-left: 12px;'>PENDING_TRANSFER</strong> - This status code indicates that a request to transfer your domain to a new registrar has been received and is being processed.</li><li><strong style='margin-left: 12px;'>PENDING_UPDATE</strong> - This status code indicates that a request to update your domain has been received and is being processed.</li><li><strong style='margin-left: 12px;'>REDEMPTION_PERIOD</strong> - This status code indicates that your registrar has asked the registry to delete your domain.</li><li><strong style='margin-left: 12px;'>RENEW_PERIOD</strong> - This grace period is provided after a domain name registration period is explicitly extended (renewed) by the registrar.</li><li><strong style='margin-left: 12px;'>SERVER_DELETE_PROHIBITED</strong> - This status code prevents your domain from being deleted. </li><li><strong style='margin-left: 12px;'>SERVER_HOLD</strong> - This status code is set by your domain's Registry Operator. Your domain is not activated in the DNS.</li><li><strong style='margin-left: 12px;'>SERVER_RENEW_PROHIBITED</strong> - This status code indicates your domain's Registry Operator will not allow your registrar to renew your domain.</li><li><strong style='margin-left: 12px;'>SERVER_TRANSFER_PROHIBITED</strong> - This status code prevents your domain from being transferred from your current registrar to another. </li><li><strong style='margin-left: 12px;'>SERVER_UPDATE_PROHIBITED</strong> - This status code locks your domain preventing it from being updated.</li><li><strong style='margin-left: 12px;'>TRANSFER_PERIOD</strong> - This grace period is provided after the successful transfer of a domain name from one registrar to another. </li></ul>")

  public List<RegistryStatusCodesEnum> getRegistryStatusCodes() {
    return registryStatusCodes;
  }


  public void setRegistryStatusCodes(List<RegistryStatusCodesEnum> registryStatusCodes) {
    
    
    
    this.registryStatusCodes = registryStatusCodes;
  }


  public DomainDetailV2 renewAuto(Boolean renewAuto) {
    
    
    
    
    this.renewAuto = renewAuto;
    return this;
  }

   /**
   * Whether or not the domain is configured to automatically renew
   * @return renewAuto
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is configured to automatically renew")

  public Boolean getRenewAuto() {
    return renewAuto;
  }


  public void setRenewAuto(Boolean renewAuto) {
    
    
    
    this.renewAuto = renewAuto;
  }


  public DomainDetailV2 renewDeadline(String renewDeadline) {
    
    
    
    
    this.renewDeadline = renewDeadline;
    return this;
  }

   /**
   * Date the domain must renew on
   * @return renewDeadline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date the domain must renew on")

  public String getRenewDeadline() {
    return renewDeadline;
  }


  public void setRenewDeadline(String renewDeadline) {
    
    
    
    this.renewDeadline = renewDeadline;
  }


  public DomainDetailV2 renewal(RenewalDetails renewal) {
    
    
    
    
    this.renewal = renewal;
    return this;
  }

   /**
   * Get renewal
   * @return renewal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RenewalDetails getRenewal() {
    return renewal;
  }


  public void setRenewal(RenewalDetails renewal) {
    
    
    
    this.renewal = renewal;
  }


  public DomainDetailV2 status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the domain&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ACTIVE&lt;/strong&gt; - Domain has been registered and is active.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;CANCELLED&lt;/strong&gt; - Domain has been cancelled by the user or system, and is not be reclaimable.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;DELETED_REDEEMABLE&lt;/strong&gt; - Domain is deleted but is redeemable.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;EXPIRED&lt;/strong&gt; - Domain has expired.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;FAILED&lt;/strong&gt; - Domain registration or transfer error.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;LOCKED_REGISTRAR&lt;/strong&gt; - Domain is locked at the registrar - this is usually the result of a spam, abuse, etc.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PARKED&lt;/strong&gt; - Domain has been parked.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;HELD_REGISTRAR&lt;/strong&gt; - Domain is held at the registrar and cannot be transferred or modified - this is usually the result of a dispute.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;OWNERSHIP_CHANGED&lt;/strong&gt; - Domain has been moved to another account.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_TRANSFER&lt;/strong&gt; - Domain transfer has been requested and is pending the transfer process.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;PENDING_REGISTRATION&lt;/strong&gt; - Domain is pending setup at the registry.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;REPOSSESSED&lt;/strong&gt; - Domain has been confiscated - this is usually the result of a chargeback, fraud, abuse, etc.).&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;SUSPENDED&lt;/strong&gt; - Domain is in violation and has been suspended.&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;TRANSFERRED&lt;/strong&gt; - Domain has been transferred to another registrar.&lt;/li&gt;&lt;/ul&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The current status of the domain<br/><ul><li><strong style='margin-left: 12px;'>ACTIVE</strong> - Domain has been registered and is active.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - Domain has been cancelled by the user or system, and is not be reclaimable.</li><li><strong style='margin-left: 12px;'>DELETED_REDEEMABLE</strong> - Domain is deleted but is redeemable.</li><li><strong style='margin-left: 12px;'>EXPIRED</strong> - Domain has expired.</li><li><strong style='margin-left: 12px;'>FAILED</strong> - Domain registration or transfer error.</li><li><strong style='margin-left: 12px;'>LOCKED_REGISTRAR</strong> - Domain is locked at the registrar - this is usually the result of a spam, abuse, etc.</li><li><strong style='margin-left: 12px;'>PARKED</strong> - Domain has been parked.</li><li><strong style='margin-left: 12px;'>HELD_REGISTRAR</strong> - Domain is held at the registrar and cannot be transferred or modified - this is usually the result of a dispute.</li><li><strong style='margin-left: 12px;'>OWNERSHIP_CHANGED</strong> - Domain has been moved to another account.</li><li><strong style='margin-left: 12px;'>PENDING_TRANSFER</strong> - Domain transfer has been requested and is pending the transfer process.</li><li><strong style='margin-left: 12px;'>PENDING_REGISTRATION</strong> - Domain is pending setup at the registry.</li><li><strong style='margin-left: 12px;'>REPOSSESSED</strong> - Domain has been confiscated - this is usually the result of a chargeback, fraud, abuse, etc.).</li><li><strong style='margin-left: 12px;'>SUSPENDED</strong> - Domain is in violation and has been suspended.</li><li><strong style='margin-left: 12px;'>TRANSFERRED</strong> - Domain has been transferred to another registrar.</li></ul>")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public DomainDetailV2 subaccountId(String subaccountId) {
    
    
    
    
    this.subaccountId = subaccountId;
    return this;
  }

   /**
   * Reseller subaccount shopperid who can manage the domain
   * @return subaccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reseller subaccount shopperid who can manage the domain")

  public String getSubaccountId() {
    return subaccountId;
  }


  public void setSubaccountId(String subaccountId) {
    
    
    
    this.subaccountId = subaccountId;
  }


  public DomainDetailV2 transferAwayEligibleAt(String transferAwayEligibleAt) {
    
    
    
    
    this.transferAwayEligibleAt = transferAwayEligibleAt;
    return this;
  }

   /**
   * Date and time when this domain is eligible to transfer
   * @return transferAwayEligibleAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when this domain is eligible to transfer")

  public String getTransferAwayEligibleAt() {
    return transferAwayEligibleAt;
  }


  public void setTransferAwayEligibleAt(String transferAwayEligibleAt) {
    
    
    
    this.transferAwayEligibleAt = transferAwayEligibleAt;
  }


  public DomainDetailV2 transferProtected(Boolean transferProtected) {
    
    
    
    
    this.transferProtected = transferProtected;
    return this;
  }

   /**
   * Whether or not the domain is protected from transfer
   * @return transferProtected
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the domain is protected from transfer")

  public Boolean getTransferProtected() {
    return transferProtected;
  }


  public void setTransferProtected(Boolean transferProtected) {
    
    
    
    this.transferProtected = transferProtected;
  }


  public DomainDetailV2 verifications(VerificationsDomainV2 verifications) {
    
    
    
    
    this.verifications = verifications;
    return this;
  }

   /**
   * Get verifications
   * @return verifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VerificationsDomainV2 getVerifications() {
    return verifications;
  }


  public void setVerifications(VerificationsDomainV2 verifications) {
    
    
    
    this.verifications = verifications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainDetailV2 domainDetailV2 = (DomainDetailV2) o;
    return Objects.equals(this.actions, domainDetailV2.actions) &&
        Objects.equals(this.authCode, domainDetailV2.authCode) &&
        Objects.equals(this.contacts, domainDetailV2.contacts) &&
        Objects.equals(this.createdAt, domainDetailV2.createdAt) &&
        Objects.equals(this.deletedAt, domainDetailV2.deletedAt) &&
        Objects.equals(this.dnssecRecords, domainDetailV2.dnssecRecords) &&
        Objects.equals(this.domain, domainDetailV2.domain) &&
        Objects.equals(this.domainId, domainDetailV2.domainId) &&
        Objects.equals(this.expirationProtected, domainDetailV2.expirationProtected) &&
        Objects.equals(this.expiresAt, domainDetailV2.expiresAt) &&
        Objects.equals(this.holdRegistrar, domainDetailV2.holdRegistrar) &&
        Objects.equals(this.hostnames, domainDetailV2.hostnames) &&
        Objects.equals(this.locked, domainDetailV2.locked) &&
        Objects.equals(this.modifiedAt, domainDetailV2.modifiedAt) &&
        Objects.equals(this.nameServers, domainDetailV2.nameServers) &&
        Objects.equals(this.privacy, domainDetailV2.privacy) &&
        Objects.equals(this.registrarCreatedAt, domainDetailV2.registrarCreatedAt) &&
        Objects.equals(this.registryStatusCodes, domainDetailV2.registryStatusCodes) &&
        Objects.equals(this.renewAuto, domainDetailV2.renewAuto) &&
        Objects.equals(this.renewDeadline, domainDetailV2.renewDeadline) &&
        Objects.equals(this.renewal, domainDetailV2.renewal) &&
        Objects.equals(this.status, domainDetailV2.status) &&
        Objects.equals(this.subaccountId, domainDetailV2.subaccountId) &&
        Objects.equals(this.transferAwayEligibleAt, domainDetailV2.transferAwayEligibleAt) &&
        Objects.equals(this.transferProtected, domainDetailV2.transferProtected) &&
        Objects.equals(this.verifications, domainDetailV2.verifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, authCode, contacts, createdAt, deletedAt, dnssecRecords, domain, domainId, expirationProtected, expiresAt, holdRegistrar, hostnames, locked, modifiedAt, nameServers, privacy, registrarCreatedAt, registryStatusCodes, renewAuto, renewDeadline, renewal, status, subaccountId, transferAwayEligibleAt, transferProtected, verifications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainDetailV2 {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    dnssecRecords: ").append(toIndentedString(dnssecRecords)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    expirationProtected: ").append(toIndentedString(expirationProtected)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    holdRegistrar: ").append(toIndentedString(holdRegistrar)).append("\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    nameServers: ").append(toIndentedString(nameServers)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    registrarCreatedAt: ").append(toIndentedString(registrarCreatedAt)).append("\n");
    sb.append("    registryStatusCodes: ").append(toIndentedString(registryStatusCodes)).append("\n");
    sb.append("    renewAuto: ").append(toIndentedString(renewAuto)).append("\n");
    sb.append("    renewDeadline: ").append(toIndentedString(renewDeadline)).append("\n");
    sb.append("    renewal: ").append(toIndentedString(renewal)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    transferAwayEligibleAt: ").append(toIndentedString(transferAwayEligibleAt)).append("\n");
    sb.append("    transferProtected: ").append(toIndentedString(transferProtected)).append("\n");
    sb.append("    verifications: ").append(toIndentedString(verifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("authCode");
    openapiFields.add("contacts");
    openapiFields.add("createdAt");
    openapiFields.add("deletedAt");
    openapiFields.add("dnssecRecords");
    openapiFields.add("domain");
    openapiFields.add("domainId");
    openapiFields.add("expirationProtected");
    openapiFields.add("expiresAt");
    openapiFields.add("holdRegistrar");
    openapiFields.add("hostnames");
    openapiFields.add("locked");
    openapiFields.add("modifiedAt");
    openapiFields.add("nameServers");
    openapiFields.add("privacy");
    openapiFields.add("registrarCreatedAt");
    openapiFields.add("registryStatusCodes");
    openapiFields.add("renewAuto");
    openapiFields.add("renewDeadline");
    openapiFields.add("renewal");
    openapiFields.add("status");
    openapiFields.add("subaccountId");
    openapiFields.add("transferAwayEligibleAt");
    openapiFields.add("transferProtected");
    openapiFields.add("verifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authCode");
    openapiRequiredFields.add("contacts");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("domainId");
    openapiRequiredFields.add("expirationProtected");
    openapiRequiredFields.add("holdRegistrar");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("nameServers");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("renewAuto");
    openapiRequiredFields.add("renewDeadline");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("transferProtected");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainDetailV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainDetailV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainDetailV2 is not found in the empty JSON string", DomainDetailV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DomainDetailV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainDetailV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainDetailV2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            Action.validateJsonObject(jsonArrayactions.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authCode").toString()));
      }
      // validate the required field `contacts`
      DomainContactsV2.validateJsonObject(jsonObj.getAsJsonObject("contacts"));
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("deletedAt") != null && !jsonObj.get("deletedAt").isJsonNull()) && !jsonObj.get("deletedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedAt").toString()));
      }
      if (jsonObj.get("dnssecRecords") != null && !jsonObj.get("dnssecRecords").isJsonNull()) {
        JsonArray jsonArraydnssecRecords = jsonObj.getAsJsonArray("dnssecRecords");
        if (jsonArraydnssecRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnssecRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnssecRecords` to be an array in the JSON string but got `%s`", jsonObj.get("dnssecRecords").toString()));
          }

          // validate the optional field `dnssecRecords` (array)
          for (int i = 0; i < jsonArraydnssecRecords.size(); i++) {
            DomainDnssec.validateJsonObject(jsonArraydnssecRecords.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      if ((jsonObj.get("expiresAt") != null && !jsonObj.get("expiresAt").isJsonNull()) && !jsonObj.get("expiresAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresAt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostnames") != null && !jsonObj.get("hostnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostnames` to be an array in the JSON string but got `%s`", jsonObj.get("hostnames").toString()));
      }
      if ((jsonObj.get("modifiedAt") != null && !jsonObj.get("modifiedAt").isJsonNull()) && !jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("nameServers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("nameServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameServers` to be an array in the JSON string but got `%s`", jsonObj.get("nameServers").toString()));
      }
      if ((jsonObj.get("registrarCreatedAt") != null && !jsonObj.get("registrarCreatedAt").isJsonNull()) && !jsonObj.get("registrarCreatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrarCreatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrarCreatedAt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("registryStatusCodes") != null && !jsonObj.get("registryStatusCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `registryStatusCodes` to be an array in the JSON string but got `%s`", jsonObj.get("registryStatusCodes").toString()));
      }
      if (!jsonObj.get("renewDeadline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renewDeadline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renewDeadline").toString()));
      }
      // validate the optional field `renewal`
      if (jsonObj.get("renewal") != null && !jsonObj.get("renewal").isJsonNull()) {
        RenewalDetails.validateJsonObject(jsonObj.getAsJsonObject("renewal"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("transferAwayEligibleAt") != null && !jsonObj.get("transferAwayEligibleAt").isJsonNull()) && !jsonObj.get("transferAwayEligibleAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferAwayEligibleAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferAwayEligibleAt").toString()));
      }
      // validate the optional field `verifications`
      if (jsonObj.get("verifications") != null && !jsonObj.get("verifications").isJsonNull()) {
        VerificationsDomainV2.validateJsonObject(jsonObj.getAsJsonObject("verifications"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainDetailV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainDetailV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainDetailV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainDetailV2.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainDetailV2>() {
           @Override
           public void write(JsonWriter out, DomainDetailV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainDetailV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainDetailV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainDetailV2
  * @throws IOException if the JSON string is invalid with respect to DomainDetailV2
  */
  public static DomainDetailV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainDetailV2.class);
  }

 /**
  * Convert an instance of DomainDetailV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

