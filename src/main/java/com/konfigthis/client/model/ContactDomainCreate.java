/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContactDomainCreate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContactDomainCreate {
  public static final String SERIALIZED_NAME_ADDRESS_MAILING = "addressMailing";
  @SerializedName(SERIALIZED_NAME_ADDRESS_MAILING)
  private Address addressMailing;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * The encoding of the contact data&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ASCII&lt;/strong&gt; - Data contains only ASCII characters that are not region or language specific&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UTF-8&lt;/strong&gt; - Data contains characters that are specific to a region or language&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
 public enum EncodingEnum {
    ASCII("ASCII"),
    
    UTF_8("UTF-8");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding = EncodingEnum.ASCII;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NAME_FIRST = "nameFirst";
  @SerializedName(SERIALIZED_NAME_NAME_FIRST)
  private String nameFirst;

  public static final String SERIALIZED_NAME_NAME_LAST = "nameLast";
  @SerializedName(SERIALIZED_NAME_NAME_LAST)
  private String nameLast;

  public static final String SERIALIZED_NAME_NAME_MIDDLE = "nameMiddle";
  @SerializedName(SERIALIZED_NAME_NAME_MIDDLE)
  private String nameMiddle;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public ContactDomainCreate() {
  }

  public ContactDomainCreate addressMailing(Address addressMailing) {
    
    
    
    
    this.addressMailing = addressMailing;
    return this;
  }

   /**
   * Get addressMailing
   * @return addressMailing
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Address getAddressMailing() {
    return addressMailing;
  }


  public void setAddressMailing(Address addressMailing) {
    
    
    
    this.addressMailing = addressMailing;
  }


  public ContactDomainCreate email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public ContactDomainCreate encoding(EncodingEnum encoding) {
    
    
    
    
    this.encoding = encoding;
    return this;
  }

   /**
   * The encoding of the contact data&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;ASCII&lt;/strong&gt; - Data contains only ASCII characters that are not region or language specific&lt;/li&gt;&lt;li&gt;&lt;strong style&#x3D;&#39;margin-left: 12px;&#39;&gt;UTF-8&lt;/strong&gt; - Data contains characters that are specific to a region or language&lt;/li&gt;&lt;/ul&gt;
   * @return encoding
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ASCII", required = true, value = "The encoding of the contact data<br/><ul><li><strong style='margin-left: 12px;'>ASCII</strong> - Data contains only ASCII characters that are not region or language specific</li><li><strong style='margin-left: 12px;'>UTF-8</strong> - Data contains characters that are specific to a region or language</li></ul>")

  public EncodingEnum getEncoding() {
    return encoding;
  }


  public void setEncoding(EncodingEnum encoding) {
    
    
    
    this.encoding = encoding;
  }


  public ContactDomainCreate fax(String fax) {
    
    
    
    
    this.fax = fax;
    return this;
  }

   /**
   * Get fax
   * @return fax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFax() {
    return fax;
  }


  public void setFax(String fax) {
    
    
    
    this.fax = fax;
  }


  public ContactDomainCreate jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public ContactDomainCreate metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * The contact eligibility data fields as specified by GET /v2/customers/{customerId}/domains/contacts/schema/{tld}
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contact eligibility data fields as specified by GET /v2/customers/{customerId}/domains/contacts/schema/{tld}")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public ContactDomainCreate nameFirst(String nameFirst) {
    
    
    
    
    this.nameFirst = nameFirst;
    return this;
  }

   /**
   * Get nameFirst
   * @return nameFirst
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNameFirst() {
    return nameFirst;
  }


  public void setNameFirst(String nameFirst) {
    
    
    
    this.nameFirst = nameFirst;
  }


  public ContactDomainCreate nameLast(String nameLast) {
    
    
    
    
    this.nameLast = nameLast;
    return this;
  }

   /**
   * Get nameLast
   * @return nameLast
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNameLast() {
    return nameLast;
  }


  public void setNameLast(String nameLast) {
    
    
    
    this.nameLast = nameLast;
  }


  public ContactDomainCreate nameMiddle(String nameMiddle) {
    
    
    
    
    this.nameMiddle = nameMiddle;
    return this;
  }

   /**
   * Get nameMiddle
   * @return nameMiddle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNameMiddle() {
    return nameMiddle;
  }


  public void setNameMiddle(String nameMiddle) {
    
    
    
    this.nameMiddle = nameMiddle;
  }


  public ContactDomainCreate organization(String organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrganization() {
    return organization;
  }


  public void setOrganization(String organization) {
    
    
    
    this.organization = organization;
  }


  public ContactDomainCreate phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactDomainCreate contactDomainCreate = (ContactDomainCreate) o;
    return Objects.equals(this.addressMailing, contactDomainCreate.addressMailing) &&
        Objects.equals(this.email, contactDomainCreate.email) &&
        Objects.equals(this.encoding, contactDomainCreate.encoding) &&
        Objects.equals(this.fax, contactDomainCreate.fax) &&
        Objects.equals(this.jobTitle, contactDomainCreate.jobTitle) &&
        Objects.equals(this.metadata, contactDomainCreate.metadata) &&
        Objects.equals(this.nameFirst, contactDomainCreate.nameFirst) &&
        Objects.equals(this.nameLast, contactDomainCreate.nameLast) &&
        Objects.equals(this.nameMiddle, contactDomainCreate.nameMiddle) &&
        Objects.equals(this.organization, contactDomainCreate.organization) &&
        Objects.equals(this.phone, contactDomainCreate.phone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressMailing, email, encoding, fax, jobTitle, metadata, nameFirst, nameLast, nameMiddle, organization, phone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactDomainCreate {\n");
    sb.append("    addressMailing: ").append(toIndentedString(addressMailing)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    nameFirst: ").append(toIndentedString(nameFirst)).append("\n");
    sb.append("    nameLast: ").append(toIndentedString(nameLast)).append("\n");
    sb.append("    nameMiddle: ").append(toIndentedString(nameMiddle)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressMailing");
    openapiFields.add("email");
    openapiFields.add("encoding");
    openapiFields.add("fax");
    openapiFields.add("jobTitle");
    openapiFields.add("metadata");
    openapiFields.add("nameFirst");
    openapiFields.add("nameLast");
    openapiFields.add("nameMiddle");
    openapiFields.add("organization");
    openapiFields.add("phone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressMailing");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("encoding");
    openapiRequiredFields.add("nameFirst");
    openapiRequiredFields.add("nameLast");
    openapiRequiredFields.add("phone");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactDomainCreate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContactDomainCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactDomainCreate is not found in the empty JSON string", ContactDomainCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ContactDomainCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactDomainCreate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactDomainCreate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `addressMailing`
      Address.validateJsonObject(jsonObj.getAsJsonObject("addressMailing"));
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if (!jsonObj.get("nameFirst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFirst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFirst").toString()));
      }
      if (!jsonObj.get("nameLast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameLast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameLast").toString()));
      }
      if ((jsonObj.get("nameMiddle") != null && !jsonObj.get("nameMiddle").isJsonNull()) && !jsonObj.get("nameMiddle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameMiddle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameMiddle").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactDomainCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactDomainCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactDomainCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactDomainCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactDomainCreate>() {
           @Override
           public void write(JsonWriter out, ContactDomainCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactDomainCreate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactDomainCreate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactDomainCreate
  * @throws IOException if the JSON string is invalid with respect to ContactDomainCreate
  */
  public static ContactDomainCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactDomainCreate.class);
  }

 /**
  * Convert an instance of ContactDomainCreate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

