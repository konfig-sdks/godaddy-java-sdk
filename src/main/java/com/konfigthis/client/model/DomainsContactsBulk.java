/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Contact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DomainsContactsBulk
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DomainsContactsBulk {
  public static final String SERIALIZED_NAME_CONTACT_ADMIN = "contactAdmin";
  @SerializedName(SERIALIZED_NAME_CONTACT_ADMIN)
  private Contact contactAdmin;

  public static final String SERIALIZED_NAME_CONTACT_BILLING = "contactBilling";
  @SerializedName(SERIALIZED_NAME_CONTACT_BILLING)
  private Contact contactBilling;

  public static final String SERIALIZED_NAME_CONTACT_PRESENCE = "contactPresence";
  @SerializedName(SERIALIZED_NAME_CONTACT_PRESENCE)
  private Contact contactPresence;

  public static final String SERIALIZED_NAME_CONTACT_REGISTRANT = "contactRegistrant";
  @SerializedName(SERIALIZED_NAME_CONTACT_REGISTRANT)
  private Contact contactRegistrant;

  public static final String SERIALIZED_NAME_CONTACT_TECH = "contactTech";
  @SerializedName(SERIALIZED_NAME_CONTACT_TECH)
  private Contact contactTech;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = new ArrayList<>();

  /**
   * Canadian Presence Requirement (CA)
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
 public enum EntityTypeEnum {
    ABORIGINAL("ABORIGINAL"),
    
    ASSOCIATION("ASSOCIATION"),
    
    CITIZEN("CITIZEN"),
    
    CORPORATION("CORPORATION"),
    
    EDUCATIONAL("EDUCATIONAL"),
    
    GOVERNMENT("GOVERNMENT"),
    
    HOSPITAL("HOSPITAL"),
    
    INDIAN_BAND("INDIAN_BAND"),
    
    LEGAL_REPRESENTATIVE("LEGAL_REPRESENTATIVE"),
    
    LIBRARY_ARCHIVE_MUSEUM("LIBRARY_ARCHIVE_MUSEUM"),
    
    MARK_REGISTERED("MARK_REGISTERED"),
    
    MARK_TRADE("MARK_TRADE"),
    
    PARTNERSHIP("PARTNERSHIP"),
    
    POLITICAL_PARTY("POLITICAL_PARTY"),
    
    RESIDENT_PERMANENT("RESIDENT_PERMANENT"),
    
    TRUST("TRUST"),
    
    UNION("UNION");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public DomainsContactsBulk() {
  }

  public DomainsContactsBulk contactAdmin(Contact contactAdmin) {
    
    
    
    
    this.contactAdmin = contactAdmin;
    return this;
  }

   /**
   * Get contactAdmin
   * @return contactAdmin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getContactAdmin() {
    return contactAdmin;
  }


  public void setContactAdmin(Contact contactAdmin) {
    
    
    
    this.contactAdmin = contactAdmin;
  }


  public DomainsContactsBulk contactBilling(Contact contactBilling) {
    
    
    
    
    this.contactBilling = contactBilling;
    return this;
  }

   /**
   * Get contactBilling
   * @return contactBilling
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getContactBilling() {
    return contactBilling;
  }


  public void setContactBilling(Contact contactBilling) {
    
    
    
    this.contactBilling = contactBilling;
  }


  public DomainsContactsBulk contactPresence(Contact contactPresence) {
    
    
    
    
    this.contactPresence = contactPresence;
    return this;
  }

   /**
   * Get contactPresence
   * @return contactPresence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getContactPresence() {
    return contactPresence;
  }


  public void setContactPresence(Contact contactPresence) {
    
    
    
    this.contactPresence = contactPresence;
  }


  public DomainsContactsBulk contactRegistrant(Contact contactRegistrant) {
    
    
    
    
    this.contactRegistrant = contactRegistrant;
    return this;
  }

   /**
   * Get contactRegistrant
   * @return contactRegistrant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getContactRegistrant() {
    return contactRegistrant;
  }


  public void setContactRegistrant(Contact contactRegistrant) {
    
    
    
    this.contactRegistrant = contactRegistrant;
  }


  public DomainsContactsBulk contactTech(Contact contactTech) {
    
    
    
    
    this.contactTech = contactTech;
    return this;
  }

   /**
   * Get contactTech
   * @return contactTech
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getContactTech() {
    return contactTech;
  }


  public void setContactTech(Contact contactTech) {
    
    
    
    this.contactTech = contactTech;
  }


  public DomainsContactsBulk domains(List<String> domains) {
    
    
    
    
    this.domains = domains;
    return this;
  }

  public DomainsContactsBulk addDomainsItem(String domainsItem) {
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * An array of domain names to be validated against. Alternatively, you can specify the extracted tlds. However, full domain names are required if the tld is &#x60;uk&#x60;
   * @return domains
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of domain names to be validated against. Alternatively, you can specify the extracted tlds. However, full domain names are required if the tld is `uk`")

  public List<String> getDomains() {
    return domains;
  }


  public void setDomains(List<String> domains) {
    
    
    
    this.domains = domains;
  }


  public DomainsContactsBulk entityType(EntityTypeEnum entityType) {
    
    
    
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Canadian Presence Requirement (CA)
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Canadian Presence Requirement (CA)")

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  public void setEntityType(EntityTypeEnum entityType) {
    
    
    
    this.entityType = entityType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DomainsContactsBulk instance itself
   */
  public DomainsContactsBulk putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainsContactsBulk domainsContactsBulk = (DomainsContactsBulk) o;
    return Objects.equals(this.contactAdmin, domainsContactsBulk.contactAdmin) &&
        Objects.equals(this.contactBilling, domainsContactsBulk.contactBilling) &&
        Objects.equals(this.contactPresence, domainsContactsBulk.contactPresence) &&
        Objects.equals(this.contactRegistrant, domainsContactsBulk.contactRegistrant) &&
        Objects.equals(this.contactTech, domainsContactsBulk.contactTech) &&
        Objects.equals(this.domains, domainsContactsBulk.domains) &&
        Objects.equals(this.entityType, domainsContactsBulk.entityType)&&
        Objects.equals(this.additionalProperties, domainsContactsBulk.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactAdmin, contactBilling, contactPresence, contactRegistrant, contactTech, domains, entityType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainsContactsBulk {\n");
    sb.append("    contactAdmin: ").append(toIndentedString(contactAdmin)).append("\n");
    sb.append("    contactBilling: ").append(toIndentedString(contactBilling)).append("\n");
    sb.append("    contactPresence: ").append(toIndentedString(contactPresence)).append("\n");
    sb.append("    contactRegistrant: ").append(toIndentedString(contactRegistrant)).append("\n");
    sb.append("    contactTech: ").append(toIndentedString(contactTech)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactAdmin");
    openapiFields.add("contactBilling");
    openapiFields.add("contactPresence");
    openapiFields.add("contactRegistrant");
    openapiFields.add("contactTech");
    openapiFields.add("domains");
    openapiFields.add("entityType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domains");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DomainsContactsBulk
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DomainsContactsBulk.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainsContactsBulk is not found in the empty JSON string", DomainsContactsBulk.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainsContactsBulk.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `contactAdmin`
      if (jsonObj.get("contactAdmin") != null && !jsonObj.get("contactAdmin").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contactAdmin"));
      }
      // validate the optional field `contactBilling`
      if (jsonObj.get("contactBilling") != null && !jsonObj.get("contactBilling").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contactBilling"));
      }
      // validate the optional field `contactPresence`
      if (jsonObj.get("contactPresence") != null && !jsonObj.get("contactPresence").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contactPresence"));
      }
      // validate the optional field `contactRegistrant`
      if (jsonObj.get("contactRegistrant") != null && !jsonObj.get("contactRegistrant").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contactRegistrant"));
      }
      // validate the optional field `contactTech`
      if (jsonObj.get("contactTech") != null && !jsonObj.get("contactTech").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contactTech"));
      }
      // ensure the required json array is present
      if (jsonObj.get("domains") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainsContactsBulk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainsContactsBulk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainsContactsBulk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainsContactsBulk.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainsContactsBulk>() {
           @Override
           public void write(JsonWriter out, DomainsContactsBulk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainsContactsBulk read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DomainsContactsBulk instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainsContactsBulk given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainsContactsBulk
  * @throws IOException if the JSON string is invalid with respect to DomainsContactsBulk
  */
  public static DomainsContactsBulk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainsContactsBulk.class);
  }

 /**
  * Convert an instance of DomainsContactsBulk to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

