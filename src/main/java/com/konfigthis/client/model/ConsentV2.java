/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ConsentV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConsentV2 {
  public static final String SERIALIZED_NAME_AGREED_AT = "agreedAt";
  @SerializedName(SERIALIZED_NAME_AGREED_AT)
  private String agreedAt;

  public static final String SERIALIZED_NAME_AGREED_BY = "agreedBy";
  @SerializedName(SERIALIZED_NAME_AGREED_BY)
  private String agreedBy;

  public static final String SERIALIZED_NAME_AGREEMENT_KEYS = "agreementKeys";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_KEYS)
  private List<String> agreementKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLAIM_TOKEN = "claimToken";
  @SerializedName(SERIALIZED_NAME_CLAIM_TOKEN)
  private String claimToken;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "USD";

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_REGISTRY_PREMIUM_PRICING = "registryPremiumPricing";
  @SerializedName(SERIALIZED_NAME_REGISTRY_PREMIUM_PRICING)
  private Boolean registryPremiumPricing;

  public ConsentV2() {
  }

  public ConsentV2 agreedAt(String agreedAt) {
    
    
    
    
    this.agreedAt = agreedAt;
    return this;
  }

   /**
   * Timestamp indicating when the end-user consented to these legal agreements
   * @return agreedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Timestamp indicating when the end-user consented to these legal agreements")

  public String getAgreedAt() {
    return agreedAt;
  }


  public void setAgreedAt(String agreedAt) {
    
    
    
    this.agreedAt = agreedAt;
  }


  public ConsentV2 agreedBy(String agreedBy) {
    
    
    
    
    this.agreedBy = agreedBy;
    return this;
  }

   /**
   * Originating client IP address of the end-user&#39;s computer when they consented to these legal agreements
   * @return agreedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Originating client IP address of the end-user's computer when they consented to these legal agreements")

  public String getAgreedBy() {
    return agreedBy;
  }


  public void setAgreedBy(String agreedBy) {
    
    
    
    this.agreedBy = agreedBy;
  }


  public ConsentV2 agreementKeys(List<String> agreementKeys) {
    
    
    
    
    this.agreementKeys = agreementKeys;
    return this;
  }

  public ConsentV2 addAgreementKeysItem(String agreementKeysItem) {
    this.agreementKeys.add(agreementKeysItem);
    return this;
  }

   /**
   * Unique identifiers of the legal agreements to which the end-user has agreed, as returned from the/domains/agreements endpoint
   * @return agreementKeys
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifiers of the legal agreements to which the end-user has agreed, as returned from the/domains/agreements endpoint")

  public List<String> getAgreementKeys() {
    return agreementKeys;
  }


  public void setAgreementKeys(List<String> agreementKeys) {
    
    
    
    this.agreementKeys = agreementKeys;
  }


  public ConsentV2 claimToken(String claimToken) {
    
    
    
    
    this.claimToken = claimToken;
    return this;
  }

   /**
   * The trademark claim token, only needed if the domain has an active trademark claim
   * @return claimToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The trademark claim token, only needed if the domain has an active trademark claim")

  public String getClaimToken() {
    return claimToken;
  }


  public void setClaimToken(String claimToken) {
    
    
    
    this.claimToken = claimToken;
  }


  public ConsentV2 currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency in which the &#x60;price&#x60; is listed
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "Currency in which the `price` is listed")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public ConsentV2 price(Integer price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Price of the domain excluding taxes or fees. Please use GET /v1/domains/available to retrieve the price and currency for the domain
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Price of the domain excluding taxes or fees. Please use GET /v1/domains/available to retrieve the price and currency for the domain")

  public Integer getPrice() {
    return price;
  }


  public void setPrice(Integer price) {
    
    
    
    this.price = price;
  }


  public ConsentV2 registryPremiumPricing(Boolean registryPremiumPricing) {
    
    
    
    
    this.registryPremiumPricing = registryPremiumPricing;
    return this;
  }

   /**
   * Only required for hosted registrar if domain is premium. If true indicates that the &#x60;price&#x60; and &#x60;currency&#x60; listed are the registry premium price and currency for the domain
   * @return registryPremiumPricing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only required for hosted registrar if domain is premium. If true indicates that the `price` and `currency` listed are the registry premium price and currency for the domain")

  public Boolean getRegistryPremiumPricing() {
    return registryPremiumPricing;
  }


  public void setRegistryPremiumPricing(Boolean registryPremiumPricing) {
    
    
    
    this.registryPremiumPricing = registryPremiumPricing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentV2 consentV2 = (ConsentV2) o;
    return Objects.equals(this.agreedAt, consentV2.agreedAt) &&
        Objects.equals(this.agreedBy, consentV2.agreedBy) &&
        Objects.equals(this.agreementKeys, consentV2.agreementKeys) &&
        Objects.equals(this.claimToken, consentV2.claimToken) &&
        Objects.equals(this.currency, consentV2.currency) &&
        Objects.equals(this.price, consentV2.price) &&
        Objects.equals(this.registryPremiumPricing, consentV2.registryPremiumPricing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreedAt, agreedBy, agreementKeys, claimToken, currency, price, registryPremiumPricing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentV2 {\n");
    sb.append("    agreedAt: ").append(toIndentedString(agreedAt)).append("\n");
    sb.append("    agreedBy: ").append(toIndentedString(agreedBy)).append("\n");
    sb.append("    agreementKeys: ").append(toIndentedString(agreementKeys)).append("\n");
    sb.append("    claimToken: ").append(toIndentedString(claimToken)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    registryPremiumPricing: ").append(toIndentedString(registryPremiumPricing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agreedAt");
    openapiFields.add("agreedBy");
    openapiFields.add("agreementKeys");
    openapiFields.add("claimToken");
    openapiFields.add("currency");
    openapiFields.add("price");
    openapiFields.add("registryPremiumPricing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agreedAt");
    openapiRequiredFields.add("agreedBy");
    openapiRequiredFields.add("agreementKeys");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("price");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsentV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConsentV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsentV2 is not found in the empty JSON string", ConsentV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConsentV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsentV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsentV2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("agreedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreedAt").toString()));
      }
      if (!jsonObj.get("agreedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreedBy").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("agreementKeys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("agreementKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementKeys` to be an array in the JSON string but got `%s`", jsonObj.get("agreementKeys").toString()));
      }
      if ((jsonObj.get("claimToken") != null && !jsonObj.get("claimToken").isJsonNull()) && !jsonObj.get("claimToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimToken").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsentV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsentV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsentV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsentV2.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsentV2>() {
           @Override
           public void write(JsonWriter out, ConsentV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsentV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsentV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsentV2
  * @throws IOException if the JSON string is invalid with respect to ConsentV2
  */
  public static ConsentV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsentV2.class);
  }

 /**
  * Convert an instance of ConsentV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

