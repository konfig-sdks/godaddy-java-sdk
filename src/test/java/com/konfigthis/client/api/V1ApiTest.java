/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Consent;
import com.konfigthis.client.model.ConsentDomainUpdate;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.DNSRecord;
import com.konfigthis.client.model.DNSRecordCreateType;
import com.konfigthis.client.model.DNSRecordCreateTypeName;
import com.konfigthis.client.model.DomainAvailableBulk;
import com.konfigthis.client.model.DomainAvailableBulkMixed;
import com.konfigthis.client.model.DomainAvailableResponse;
import com.konfigthis.client.model.DomainContacts;
import com.konfigthis.client.model.DomainDetail;
import com.konfigthis.client.model.DomainPurchase;
import com.konfigthis.client.model.DomainPurchaseResponse;
import com.konfigthis.client.model.DomainRenew;
import com.konfigthis.client.model.DomainSuggestion;
import com.konfigthis.client.model.DomainSummary;
import com.konfigthis.client.model.DomainTransferIn;
import com.konfigthis.client.model.DomainUpdate;
import com.konfigthis.client.model.DomainsContactsBulk;
import com.konfigthis.client.model.JsonSchema;
import com.konfigthis.client.model.LegalAgreement;
import com.konfigthis.client.model.PrivacyPurchase;
import com.konfigthis.client.model.TldSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1Api
 */
@Disabled
public class V1ApiTest {

    private static V1Api api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new V1Api(apiClient);
    }

    /**
     * Add the specified DNS Records to the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDnsRecordsToDomainTest() throws ApiException {
        String domain = null;
        String xShopperId = null;
        api.addDnsRecordsToDomain(domain)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel a purchased domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDomainPurchaseTest() throws ApiException {
        String domain = null;
        api.cancelDomainPurchase(domain)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit a privacy cancellation request for the given domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPrivacyRequestTest() throws ApiException {
        String domain = null;
        String xShopperId = null;
        api.cancelPrivacyRequest(domain)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Determine whether or not the specified domain is available for purchase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkDomainAvailabilityTest() throws ApiException {
        String domain = null;
        String checkType = null;
        Boolean forTransfer = null;
        DomainAvailableResponse response = api.checkDomainAvailability(domain)
                .checkType(checkType)
                .forTransfer(forTransfer)
                .execute();
        // TODO: test validations
    }

    /**
     * Determine whether or not the specified domains are available for purchase
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkDomainAvailabilityPostTest() throws ApiException {
        String checkType = null;
        DomainAvailableBulk response = api.checkDomainAvailabilityPost()
                .checkType(checkType)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase and register the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainPurchaseTest() throws ApiException {
        Consent consent = null;
        String domain = null;
        Contact contactAdmin = null;
        Contact contactBilling = null;
        Contact contactRegistrant = null;
        Contact contactTech = null;
        List<String> nameServers = null;
        Integer period = null;
        Boolean privacy = null;
        Boolean renewAuto = null;
        String xShopperId = null;
        DomainPurchaseResponse response = api.createDomainPurchase(consent, domain)
                .contactAdmin(contactAdmin)
                .contactBilling(contactBilling)
                .contactRegistrant(contactRegistrant)
                .contactTech(contactTech)
                .nameServers(nameServers)
                .period(period)
                .privacy(privacy)
                .renewAuto(renewAuto)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all DNS Records for the specified Domain with the specified Type and Name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllDnsRecordsTest() throws ApiException {
        String domain = null;
        String type = null;
        String name = null;
        String xShopperId = null;
        api.deleteAllDnsRecords(domain, type, name)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDnsRecordsTest() throws ApiException {
        String domain = null;
        String type = null;
        String name = null;
        String xShopperId = null;
        Integer offset = null;
        Integer limit = null;
        List<DNSRecord> response = api.getDnsRecords(domain, type, name)
                .xShopperId(xShopperId)
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve details for the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainDetailsTest() throws ApiException {
        String domain = null;
        String xShopperId = null;
        DomainDetail response = api.getDomainDetails(domain)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the schema to be submitted when registering a Domain for the specified TLD
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainSchemaTest() throws ApiException {
        String tld = null;
        JsonSchema response = api.getDomainSchema(tld)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of Domains for the specified Shopper
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainsListTest() throws ApiException {
        String xShopperId = null;
        List<String> statuses = null;
        List<String> statusGroups = null;
        Integer limit = null;
        String marker = null;
        List<String> includes = null;
        String modifiedDate = null;
        List<DomainSummary> response = api.getDomainsList()
                .xShopperId(xShopperId)
                .statuses(statuses)
                .statusGroups(statusGroups)
                .limit(limit)
                .marker(marker)
                .includes(includes)
                .modifiedDate(modifiedDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLegalAgreementsTest() throws ApiException {
        List<String> tlds = null;
        Boolean privacy = null;
        String xMarketId = null;
        Boolean forTransfer = null;
        List<LegalAgreement> response = api.getLegalAgreements(tlds, privacy)
                .xMarketId(xMarketId)
                .forTransfer(forTransfer)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a list of TLDs supported and enabled for sale
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTldsListTest() throws ApiException {
        List<TldSummary> response = api.getTldsList()
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase privacy for a specified domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchasePrivacyForDomainTest() throws ApiException {
        Consent consent = null;
        String domain = null;
        String xShopperId = null;
        DomainPurchaseResponse response = api.purchasePrivacyForDomain(consent, domain)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase and start or restart transfer process
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseTransferProcessTest() throws ApiException {
        String authCode = null;
        Consent consent = null;
        String domain = null;
        Contact contactAdmin = null;
        Contact contactBilling = null;
        Contact contactRegistrant = null;
        Contact contactTech = null;
        Integer period = null;
        Boolean privacy = null;
        Boolean renewAuto = null;
        String xShopperId = null;
        DomainPurchaseResponse response = api.purchaseTransferProcess(authCode, consent, domain)
                .contactAdmin(contactAdmin)
                .contactBilling(contactBilling)
                .contactRegistrant(contactRegistrant)
                .contactTech(contactTech)
                .period(period)
                .privacy(privacy)
                .renewAuto(renewAuto)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Renew the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewDomainTest() throws ApiException {
        String domain = null;
        Integer period = null;
        String xShopperId = null;
        DomainPurchaseResponse response = api.renewDomain(domain)
                .period(period)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replace all DNS Records for the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceDnsRecordsTest() throws ApiException {
        String domain = null;
        String xShopperId = null;
        api.replaceDnsRecords(domain)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replace all DNS Records for the specified Domain with the specified Type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceDnsRecordsTypeTest() throws ApiException {
        String domain = null;
        String type = null;
        String xShopperId = null;
        api.replaceDnsRecordsType(domain, type)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replace all DNS Records for the specified Domain with the specified Type and Name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceDnsRecordsType_0Test() throws ApiException {
        String domain = null;
        String type = null;
        String name = null;
        String xShopperId = null;
        api.replaceDnsRecordsType_0(domain, type, name)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Re-send Contact E-mail Verification for specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendContactEmailVerificationTest() throws ApiException {
        String domain = null;
        String xShopperId = null;
        api.resendContactEmailVerification(domain)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper&#39;s purchase history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suggestAlternateDomainsTest() throws ApiException {
        String xShopperId = null;
        String query = null;
        String country = null;
        String city = null;
        List<String> sources = null;
        List<String> tlds = null;
        Integer lengthMax = null;
        Integer lengthMin = null;
        Integer limit = null;
        Integer waitMs = null;
        List<DomainSuggestion> response = api.suggestAlternateDomains()
                .xShopperId(xShopperId)
                .query(query)
                .country(country)
                .city(city)
                .sources(sources)
                .tlds(tlds)
                .lengthMax(lengthMax)
                .lengthMin(lengthMin)
                .limit(limit)
                .waitMs(waitMs)
                .execute();
        // TODO: test validations
    }

    /**
     * Update domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainContactsTest() throws ApiException {
        Contact contactRegistrant = null;
        String domain = null;
        Contact contactAdmin = null;
        Contact contactBilling = null;
        Contact contactTech = null;
        String xShopperId = null;
        api.updateDomainContacts(contactRegistrant, domain)
                .contactAdmin(contactAdmin)
                .contactBilling(contactBilling)
                .contactTech(contactTech)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update details for the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainDetailsTest() throws ApiException {
        String domain = null;
        ConsentDomainUpdate consent = null;
        Boolean exposeWhois = null;
        Boolean locked = null;
        List<Object> nameServers = null;
        Boolean renewAuto = null;
        String subaccountId = null;
        String xShopperId = null;
        api.updateDomainDetails(domain)
                .consent(consent)
                .exposeWhois(exposeWhois)
                .locked(locked)
                .nameServers(nameServers)
                .renewAuto(renewAuto)
                .subaccountId(subaccountId)
                .xShopperId(xShopperId)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate the request body using the Domain Contact Validation Schema for specified domains.
     *
     * All contacts specified in request will be validated against all domains specifed in \&quot;domains\&quot;. As an alternative, you can also pass in tlds, with the exception of &#x60;uk&#x60;, which requires full domain names
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateDomainContactsTest() throws ApiException {
        List<String> domains = null;
        Contact contactAdmin = null;
        Contact contactBilling = null;
        Contact contactPresence = null;
        Contact contactRegistrant = null;
        Contact contactTech = null;
        String entityType = null;
        Integer xPrivateLabelId = null;
        String marketId = null;
        api.validateDomainContacts(domains)
                .contactAdmin(contactAdmin)
                .contactBilling(contactBilling)
                .contactPresence(contactPresence)
                .contactRegistrant(contactRegistrant)
                .contactTech(contactTech)
                .entityType(entityType)
                .xPrivateLabelId(xPrivateLabelId)
                .marketId(marketId)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate the request body using the Domain Purchase Schema for the specified TLD
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateDomainPurchaseTest() throws ApiException {
        Consent consent = null;
        String domain = null;
        Contact contactAdmin = null;
        Contact contactBilling = null;
        Contact contactRegistrant = null;
        Contact contactTech = null;
        List<String> nameServers = null;
        Integer period = null;
        Boolean privacy = null;
        Boolean renewAuto = null;
        api.validateDomainPurchase(consent, domain)
                .contactAdmin(contactAdmin)
                .contactBilling(contactBilling)
                .contactRegistrant(contactRegistrant)
                .contactTech(contactTech)
                .nameServers(nameServers)
                .period(period)
                .privacy(privacy)
                .renewAuto(renewAuto)
                .execute();
        // TODO: test validations
    }

}
