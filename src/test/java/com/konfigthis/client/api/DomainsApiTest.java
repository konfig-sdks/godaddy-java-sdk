/*
 * 
 * All the help and tools you need to grow online: Websites, Domains, Digital and Social Marketing - plus GoDaddy Guides with you every step of the way.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ConsentRedemption;
import com.konfigthis.client.model.ConsentRenew;
import com.konfigthis.client.model.ConsentV2;
import com.konfigthis.client.model.DomainContactsCreateV2;
import com.konfigthis.client.model.DomainDetailV2;
import com.konfigthis.client.model.DomainForwarding;
import com.konfigthis.client.model.DomainForwardingCreate;
import com.konfigthis.client.model.DomainForwardingMask;
import com.konfigthis.client.model.DomainPurchaseV2;
import com.konfigthis.client.model.DomainRedeemV2;
import com.konfigthis.client.model.DomainRenewV2;
import com.konfigthis.client.model.DomainTransferAuthCode;
import com.konfigthis.client.model.DomainTransferInV2;
import com.konfigthis.client.model.JsonSchema;
import com.konfigthis.client.model.Maintenance;
import com.konfigthis.client.model.MaintenanceDetail;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsApi
 */
@Disabled
public class DomainsApiTest {

    private static DomainsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DomainsApi(apiClient);
    }

    /**
     * Accepts the transfer in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptTransferInTest() throws ApiException {
        String authCode = null;
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        api.acceptTransferIn(authCode, customerId, domain)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Accept transfer out
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptTransferOutTest() throws ApiException {
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        api.acceptTransferOut(customerId, domain)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit a forwarding cancellation request for the given fqdn
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelForwardingRequestTest() throws ApiException {
        String customerId = null;
        String fqdn = null;
        api.cancelForwardingRequest(customerId, fqdn)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancels the transfer in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelTransferInTest() throws ApiException {
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        api.cancelTransferIn(customerId, domain)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new forwarding configuration for the given FQDN
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createForwardingConfigurationTest() throws ApiException {
        String type = null;
        String url = null;
        String customerId = null;
        String fqdn = null;
        DomainForwardingMask mask = null;
        api.createForwardingConfiguration(type, url, customerId, fqdn)
                .mask(mask)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve details for the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        List<String> includes = null;
        DomainDetailV2 response = api.getDetails(customerId, domain)
                .xRequestId(xRequestId)
                .includes(includes)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the forwarding information for the given fqdn
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getForwardingInfoTest() throws ApiException {
        String customerId = null;
        String fqdn = null;
        Boolean includeSubs = null;
        List<DomainForwarding> response = api.getForwardingInfo(customerId, fqdn)
                .includeSubs(includeSubs)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the schema to be submitted when registering a Domain for the specified TLD
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegisterSchemaTest() throws ApiException {
        String customerId = null;
        String tld = null;
        String xRequestId = null;
        JsonSchema response = api.getRegisterSchema(customerId, tld)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the details for an upcoming system Maintenances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpcomingMaintenanceDetailsTest() throws ApiException {
        String maintenanceId = null;
        String xRequestId = null;
        MaintenanceDetail response = api.getUpcomingMaintenanceDetails(maintenanceId)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of upcoming system Maintenances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpcomingMaintenancesListTest() throws ApiException {
        String xRequestId = null;
        String status = null;
        String modifiedAtAfter = null;
        String startsAtAfter = null;
        Integer limit = null;
        Maintenance response = api.getUpcomingMaintenancesList()
                .xRequestId(xRequestId)
                .status(status)
                .modifiedAtAfter(modifiedAtAfter)
                .startsAtAfter(startsAtAfter)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Initiate transfer out to another registrar for a .uk domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateTransferOutTest() throws ApiException {
        String customerId = null;
        String domain = null;
        String registrar = null;
        String xRequestId = null;
        api.initiateTransferOut(customerId, domain, registrar)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Modify the forwarding information for the given fqdn
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyForwardingInfoTest() throws ApiException {
        String type = null;
        String url = null;
        String customerId = null;
        String fqdn = null;
        DomainForwardingMask mask = null;
        api.modifyForwardingInfo(type, url, customerId, fqdn)
                .mask(mask)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase and register the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseRegisterDomainTest() throws ApiException {
        ConsentV2 consent = null;
        String domain = null;
        String customerId = null;
        DomainContactsCreateV2 contacts = null;
        Object metadata = null;
        List<String> nameServers = null;
        Integer period = null;
        Boolean privacy = null;
        Boolean renewAuto = null;
        String xRequestId = null;
        api.purchaseRegisterDomain(consent, domain, customerId)
                .contacts(contacts)
                .metadata(metadata)
                .nameServers(nameServers)
                .period(period)
                .privacy(privacy)
                .renewAuto(renewAuto)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase and start or restart transfer process
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseTransferProcessTest() throws ApiException {
        String authCode = null;
        ConsentV2 consent = null;
        String customerId = null;
        String domain = null;
        DomainContactsCreateV2 contacts = null;
        String identityDocumentId = null;
        Object metadata = null;
        Integer period = null;
        Boolean privacy = null;
        Boolean renewAuto = null;
        String xRequestId = null;
        api.purchaseTransferProcess(authCode, consent, customerId, domain)
                .contacts(contacts)
                .identityDocumentId(identityDocumentId)
                .metadata(metadata)
                .period(period)
                .privacy(privacy)
                .renewAuto(renewAuto)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase a restore for the given domain to bring it out of redemption
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redeemDomainRestoreTest() throws ApiException {
        ConsentRedemption consent = null;
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        api.redeemDomainRestore(consent, customerId, domain)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Reject transfer out
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectTransferOutTest() throws ApiException {
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        String reason = null;
        api.rejectTransferOut(customerId, domain)
                .xRequestId(xRequestId)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * Renew the specified Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewDomainTest() throws ApiException {
        ConsentRenew consent = null;
        String expires = null;
        String customerId = null;
        String domain = null;
        Integer period = null;
        String xRequestId = null;
        api.renewDomain(consent, expires, customerId, domain)
                .period(period)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Restarts transfer in request from the beginning
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restartTransferInTest() throws ApiException {
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        api.restartTransferIn(customerId, domain)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retries the current transfer in request with supplied Authorization code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryTransferInProcessTest() throws ApiException {
        String authCode = null;
        String customerId = null;
        String domain = null;
        String xRequestId = null;
        api.retryTransferInProcess(authCode, customerId, domain)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate the request body using the Domain Registration Schema for the specified TLD
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateDomainRegistrationTest() throws ApiException {
        ConsentV2 consent = null;
        String domain = null;
        String customerId = null;
        DomainContactsCreateV2 contacts = null;
        Object metadata = null;
        List<String> nameServers = null;
        Integer period = null;
        Boolean privacy = null;
        Boolean renewAuto = null;
        String xRequestId = null;
        api.validateDomainRegistration(consent, domain, customerId)
                .contacts(contacts)
                .metadata(metadata)
                .nameServers(nameServers)
                .period(period)
                .privacy(privacy)
                .renewAuto(renewAuto)
                .xRequestId(xRequestId)
                .execute();
        // TODO: test validations
    }

}
